#!/usr/bin/env bash

BIN=$(cd "$(dirname $0)"; pwd)
CMD_HOME=$(dirname $BIN)
CONF=$CMD_HOME/conf

source $CONF/kcnd.conf

pidfile=$RUN_DIR/kcnd.pid

__pid_run() {
    unset pid
    if [ ! -f $pidfile ]; then
        return
    fi
    PID_NUM=$(eval "cat $pidfile")
    if [[ ! -z "$PID_NUM" ]]; then
        export pid=$(eval "ps -p $PID_NUM -o pid=")
    fi
}

start() {
    __pid_run
    [ -n "$pid" ] && echo "kcnd already running...[$pid]" && return

    echo -n "Starting kcnd: "
    
    if [ ! -d $KLAY_HOME ] || [ ! -d $DATA_DIR ]; then
        echo 
        echo "  [ERROR] : kcnd is not initiated, Initiate kcnd with genesis file first."
        exit 1
    fi

    if [ ! -d $LOG_DIR ]; then
        mkdir -p $LOG_DIR
    fi
    if [ ! -d $RUN_DIR ]; then
        mkdir -p $RUN_DIR
    fi

    OPTIONS="--networkid $NETWORK_ID --datadir $DATA_DIR --port $PORT --srvtype fasthttp --metrics --prometheus --verbosity 3 \
    --txpool.globalslots 4096 --txpool.globalqueue 4096 --txpool.accountslots 4096 --txpool.accountqueue 4096 --nodiscover \
    --syncmode full --mine --maxpeers 5000 --db.leveldb.cache-size 10240"

    set -f
    $BIN/kcn $OPTIONS >> ${LOG_DIR}/kcnd.out 2>&1 &
    RETVAL=$?
    PIDNUM=$!
    set +f
    if [ $RETVAL = 0 ]; then
        echo $PIDNUM > ${pidfile}
        echo "OK"
    else
        echo "Fail"
    fi
    return $RETVAL
}

stop() {
    __pid_run
    [ -z "$pid" ] && echo "kcnd is not running" && return
    echo -n "Shutting down kcnd:  "
    kill -3 $(eval "cat ${pidfile}")
    RETVAL=$?
    [ $RETVAL = 0 ] && rm -f ${pidfile} && echo "OK" && return
    echo "Failed"
}

status() {
    __pid_run
    if [ -n "$pid" ]; then 
        echo "kcnd is running"
    else
        echo "kcnd is down"
    fi
}

restart() {
    stop
    start
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        restart
        ;;
    *)
        echo "Usages: kcnd {start|stop|restart|status}"
        exit 1
        ;;
esac
exit 0
