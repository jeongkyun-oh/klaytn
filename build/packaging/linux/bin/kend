#!/usr/bin/env bash

BIN=$(cd "$(dirname $0)"; pwd)
CMD_HOME=$(dirname $BIN)
CONF=$CMD_HOME/conf

source $CONF/kend.conf

pidfile=$RUN_DIR/kend.pid

__pid_run() {
    unset pid
    if [ ! -f $pidfile ]; then
        return
    fi
    PID_NUM=$(eval "cat $pidfile")
    if [[ ! -z "$PID_NUM" ]]; then
        export pid=$(eval "ps -p $PID_NUM -o pid=")
    fi
}

start() {
    __pid_run
    [ -n "$pid" ] && echo "kend already running...[$pid]" && return

    echo -n "Starting kend: "
    
    if [ ! -d $KLAY_HOME ] || [ ! -d $DATA_DIR ]; then
        echo 
        echo "  [ERROR] : kend is not initiated, Initiate kend with genesis file first."
        exit 1
    fi

    if [ ! -d $LOG_DIR ]; then
        mkdir -p $LOG_DIR
    fi
    if [ ! -d $RUN_DIR ]; then
        mkdir -p $RUN_DIR
    fi

    OPTIONS="--mine"

    if [ ! -z $NO_DISCOVER ]; then
        OPTIONS="$OPTIONS --nodiscover"
    fi

    if [[ ! -z $METRICS ]] && [[ $METRICS -eq 1 ]]; then
        OPTIONS="$OPTIONS --metrics"
    fi

    if [[ ! -z $PROMETHEUS ]] && [[ $PROMETHEUS -eq 1 ]]; then
        OPTIONS="$OPTIONS --prometheus"
    fi

    if [[ ! -z $DB_NO_PARALLEL_WRITE ]] && [[ $DB_NO_PARALLEL_WRITE -eq 1 ]]; then
        OPTIONS="$OPTIONS --db.no-parallel-write"
    fi

    if [[ ! -z $DB_USE_CACHE ]] && [[ $DB_USE_CACHE -eq 1 ]]; then
        OPTIONS="$OPTIONS --statedb.use-cache"
    fi

    if [[ ! -z $MULTICHANNEL ]] && [[ $MULTICHANNEL -eq 1 ]]; then
        OPTIONS="$OPTIONS --multichannel"
    fi

    if [[ ! -z $RPC_ENABLE ]] && [[ $RPC_ENABLE -eq 1 ]]; then
        OPTIONS="$OPTIONS --rpc --rpcapi $RPC_API --rpcport $RPC_PORT --rpcaddr $RPC_ADDR --rpccorsdomain $RPC_CORSDOMAIN --rpcvhosts $RPC_VHOSTS"
    fi

    if [[ ! -z $WS_ENABLE ]] && [[ $WS_ENABLE -eq 1 ]]; then
        OPTIONS="$OPTIONS --ws --wsaddr $WS_ADDR --wsport $WS_PORT --wsorigins $WS_ORIGINS"
    fi

    if [ ! -z $NETWORK_ID ]; then
        OPTIONS="$OPTIONS --network $NETWORK_ID"
    fi

    if [ ! -z $DATA_DIR ]; then
        OPTIONS="$OPTIONS --datadir $DATA_DIR"
    fi

    if [ ! -z $PORT ]; then
        OPTIONS="$OPTIONS --port $PORT"
    fi

    if [ ! -z $SERVER_TYPE ]; then
        OPTIONS="$OPTIONS --srvtype $SERVER_TYPE"
    fi

    if [ ! -z $VERBOSITY ]; then
        OPTIONS="$OPTIONS --verbosity $VERBOSITY"
    fi

    if [ ! -z $TXPOOL_EXEC_SLOTS_ALL ]; then
        OPTIONS="$OPTIONS --txpool.exec-slots.all $TXPOOL_EXEC_SLOTS_ALL"
    fi

    if [ ! -z $TXPOOL_NONEXEC_SLOTS_ALL ]; then
        OPTIONS="$OPTIONS --txpool.nonexec-slots.all $TXPOOL_NONEXEC_SLOTS_ALL"
    fi

    if [ ! -z $TXPOOL_EXEC_SLOTS_ACCOUNT ]; then
        OPTIONS="$OPTIONS --txpool.exec-slots.account $TXPOOL_EXEC_SLOTS_ACCOUNT"
    fi

    if [ ! -z $TXPOOL_NONEXEC_SLOTS_ACCOUNT ]; then
        OPTIONS="$OPTIONS --txpool.nonexec-slots.account $TXPOOL_NONEXEC_SLOTS_ACCOUNT"
    fi

    if [ ! -z $SYNCMODE ]; then
        OPTIONS="$OPTIONS --syncmode $SYNCMODE"
    fi

    if [ ! -z $MAXPEERS ]; then
        OPTIONS="$OPTIONS --maxpeers $MAXPEERS"
    fi

    if [ ! -z $LDBCACHESIZE ]; then
        OPTIONS="$OPTIONS --db.leveldb.cache-size $LDBCACHESIZE"
    fi

    if [[ ! -z $SC_ENABLE ]] && [[ $SC_ENABLE -eq 1 ]]; then
        OPTIONS="$OPTIONS --chainaddr $SC_ADDR --chaintxperiod $SC_TX_PERIOD --bridgeport $SC_BRIDGE_PORT \
    --parentchainws $SC_PARENT_CHAIN_WS --chaintxlimit $SC_TX_LIMIT"
        if [[ ! -z $SC_INDEXING ]] && [[ $SC_INDEXING -eq 1 ]]; then
            OPTIONS="$OPTIONS --childchainindexing"
        fi
        if [[ ! -z $SC_BRIDGE ]] && [[ $SC_BRIDGE -eq 1 ]]; then
            OPTIONS="$OPTIONS --bridge --mainbridge"
        fi
    fi

    if [[ ! -z $ADDTIONAL ]] && [[ $ADDITIONAL != "" ]]; then
        OPTIONS="$OPTIONS $ADDTIONAL"
    fi

    set -f
    $BIN/ken $OPTIONS >> ${LOG_DIR}/kend.out 2>&1 &
    RETVAL=$?
    PIDNUM=$!
    set +f
    if [ $RETVAL = 0 ]; then
        echo $PIDNUM > ${pidfile}
        echo "OK"
    else
        echo "Fail"
    fi
    return $RETVAL
}

stop() {
    __pid_run
    [ -z "$pid" ] && echo "kend is not running" && return
    echo -n "Shutting down kend: "
    kill -3 $(eval "cat ${pidfile}")
    RETVAL=$?
    [ $RETVAL = 0 ] && rm -f ${pidfile} && echo "OK" && return
    echo "Failed"
}

status() {
    __pid_run
    if [ -n "$pid" ]; then 
        echo "kend is running"
    else
        echo "kend is down"
    fi
}

restart() {
    stop
    start
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        restart
        ;;
    *)
        echo "Usages: kend {start|stop|restart|status}"
        exit 1
        ;;
esac
exit 0
