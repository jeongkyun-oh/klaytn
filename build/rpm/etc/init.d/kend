#!/bin/bash
#
# kend         Startup script for the ken
#
# chkconifg: - 85 15
# description : kend is the Klaytn endpoint node daemon
#
# processname: kend
# config:  /etc/kend/conf/kend.conf
# pidfile: /var/run/kend.pid
#

# Source function library.
. /etc/init.d/functions

if [ -f /etc/kend/conf/kend.conf ]; then
        . /etc/kend/conf/kend.conf
fi

ken=/usr/bin/ken
prog=kend
lockfile=${LOCKFILE-/var/lock/subsys/kend}
pidfile=${PIDFILE-/var/run/kend.pid}
RETVAL=0
STOP_TIMEOUT=${STOP_TIMEOUT-10}

OPTIONS="--mine"

if [ ! -z $NO_DISCOVER ]; then
    OPTIONS="$OPTIONS --nodiscover"
fi

if [[ ! -z $METRICS ]] && [[ $METRICS -eq 1 ]]; then
    OPTIONS="$OPTIONS --metrics"
fi

if [[ ! -z $PROMETHEUS ]] && [[ $PROMETHEUS -eq 1 ]]; then
    OPTIONS="$OPTIONS --prometheus"
fi

if [[ ! -z $DB_NO_PARALLEL_WRITE ]] && [[ $DB_NO_PARALLEL_WRITE -eq 1 ]]; then
    OPTIONS="$OPTIONS --db.no-parallel-write"
fi

if [[ ! -z $DB_USE_CACHE ]] && [[ $DB_USE_CACHE -eq 1 ]]; then
    OPTIONS="$OPTIONS --statedb.use-cache"
fi

if [[ ! -z $MULTICHANNEL ]] && [[ $MULTICHANNEL -eq 1 ]]; then
    OPTIONS="$OPTIONS --multichannel"
fi

if [[ ! -z $RPC_ENABLE ]] && [[ $RPC_ENABLE -eq 1 ]]; then
    OPTIONS="$OPTIONS --rpc --rpcapi $RPC_API --rpcport $RPC_PORT --rpcaddr $RPC_ADDR --rpccorsdomain $RPC_CORSDOMAIN --rpcvhosts $RPC_VHOSTS"
fi

if [[ ! -z $WS_ENABLE ]] && [[ $WS_ENABLE -eq 1 ]]; then
    OPTIONS="$OPTIONS --ws --wsaddr $WS_ADDR --wsport $WS_PORT --wsorigins $WS_ORIGINS"
fi

if [ ! -z $NETWORK_ID ]; then
    OPTIONS="$OPTIONS --network $NETWORK_ID"
fi

if [ ! -z $DATA_DIR ]; then
    OPTIONS="$OPTIONS --datadir $DATA_DIR"
fi

if [ ! -z $PORT ]; then
    OPTIONS="$OPTIONS --port $PORT"
fi

if [ ! -z $SERVER_TYPE ]; then
    OPTIONS="$OPTIONS --srvtype $SERVER_TYPE"
fi

if [ ! -z $VERBOSITY ]; then
    OPTIONS="$OPTIONS --verbosity $VERBOSITY"
fi

if [ ! -z $TXPOOL_EXEC_SLOTS_ALL ]; then
    OPTIONS="$OPTIONS --txpool.exec-slots.all $TXPOOL_EXEC_SLOTS_ALL"
fi

if [ ! -z $TXPOOL_NONEXEC_SLOTS_ALL ]; then
    OPTIONS="$OPTIONS --txpool.nonexec-slots.all $TXPOOL_NONEXEC_SLOTS_ALL"
fi

if [ ! -z $TXPOOL_EXEC_SLOTS_ACCOUNT ]; then
    OPTIONS="$OPTIONS --txpool.exec-slots.account $TXPOOL_EXEC_SLOTS_ACCOUNT"
fi

if [ ! -z $TXPOOL_NONEXEC_SLOTS_ACCOUNT ]; then
    OPTIONS="$OPTIONS --txpool.nonexec-slots.account $TXPOOL_NONEXEC_SLOTS_ACCOUNT"
fi

if [ ! -z $SYNCMODE ]; then
    OPTIONS="$OPTIONS --syncmode $SYNCMODE"
fi

if [ ! -z $MAXPEERS ]; then
    OPTIONS="$OPTIONS --maxpeers $MAXPEERS"
fi

if [ ! -z $LDBCACHESIZE ]; then
    OPTIONS="$OPTIONS --db.leveldb.cache-size $LDBCACHESIZE"
fi

if [[ ! -z $SC_ENABLE ]] && [[ $SC_ENABLE -eq 1 ]]; then
    OPTIONS="$OPTIONS --chainaddr $SC_ADDR --chaintxperiod $SC_TX_PERIOD --bridgeport $SC_BRIDGE_PORT \
--parentchainws $SC_PARENT_CHAIN_WS --chaintxlimit $SC_TX_LIMIT"
    if [[ ! -z $SC_INDEXING ]] && [[ $SC_INDEXING -eq 1 ]]; then
        OPTIONS="$OPTIONS --childchainindexing"
    fi
    if [[ ! -z $SC_BRIDGE ]] && [[ $SC_BRIDGE -eq 1 ]]; then
        OPTIONS="$OPTIONS --bridge --mainbridge"
    fi
fi

if [[ ! -z $ADDTIONAL ]] && [[ $ADDITIONAL != "" ]]; then
    OPTIONS="$OPTIONS $ADDTIONAL"
fi

start() {
        echo -n "Starting $prog: "
        if [ ! -d ${LOG_DIR} ]; then
                mkdir -p ${LOG_DIR}
        fi
        if [ ! -d ${RUN_DIR} ]; then
                mkdir -p ${RUN_DIR}
        fi

        __pids_var_run "$prog" "$pidfile"
        [ -n "$pid" ] && echo && return

        set -f
        $ken $OPTIONS >> ${LOG_DIR}/kend.out 2>&1 &
        RETVAL=$?
        PIDNUM=$!
        set +f
        if [ $RETVAL = 0 ]; then
                echo $PIDNUM > ${pidfile}
                touch ${lockfile}
                success "$prog startup"
        else
                failure "$prog startup"
        fi
        echo
        return $RETVAL
}

stop() {
        echo -n "Shutting down $prog: "
        killproc -p ${pidfile} -d ${STOP_TIMEOUT} $ken
        RETVAL=$?
        echo
        [ $RETVAL = 0 ] && rm -f ${lockfile} ${pidfile}
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status -p ${pidfile} -l ${lockfile} $ken
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo "Usage: $prog {start|stop|restart|status}"
        exit 1
        ;;
esac
exit $?
