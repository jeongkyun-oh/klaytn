package grpc

import (
	"fmt"
	"html/template"
	"io"
	"path/filepath"
	"sort"
)

// Generate a renderable object from a list of messages
func GenerateMessageProtoFile(name, pkgName string, sources []string, messages []Message, version string) MessageProtoFile {
	var filteredMsgs []Message
	var processedSources []string
	encountered := make(map[string]bool)

	for _, m := range messages {
		if _, ok := encountered[m.Name]; !ok {
			encountered[m.Name] = true
			filteredMsgs = append(filteredMsgs, m)
		}
	}

	for _, s := range sources {
		processedSources = append(processedSources, filepath.Base(s))
	}

	sort.Sort(Messages(filteredMsgs))
	sort.Sort(Sources(sources))

	return MessageProtoFile{
		GeneratorVersion: version,
		Package:          pkgName,
		Name:             name,
		Messages:         filteredMsgs,
		Sources:          processedSources,
	}
}

type MessageProtoFile struct {
	GeneratorVersion string
	Package          string
	Name             string
	Messages         Messages
	Sources          Sources
}

func (p MessageProtoFile) Render(writer io.WriteCloser) error {
	template, err := template.New("proto").Parse(MessagesTemplate)
	if err != nil {
		fmt.Printf("Failed to parse template: %v\n", err)
		return err
	}

	return template.Execute(writer, p)
}

var MessagesTemplate string = `// Automatically generated by sol2proto {{ .GeneratorVersion }}. DO NOT EDIT!
// sources: {{ range .Sources }}
//     {{ . }}
{{- end }}
syntax = "proto3";

package {{ .Package }};

import public "github.com/ground-x/go-gxplatform/cmd/sol2proto/protobuf/messages.proto";

{{ range .Messages }}
{{ . }}
{{ end }}
`
