// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"math/big"
	"strings"

	"github.com/ground-x/klaytn"
	"github.com/ground-x/klaytn/accounts/abi"
	"github.com/ground-x/klaytn/accounts/abi/bind"
	"github.com/ground-x/klaytn/blockchain/types"
	"github.com/ground-x/klaytn/common"
	"github.com/ground-x/klaytn/event"
)

// InitContractABI is the input ABI used to generate the binding from.
const InitContractABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_branchName\",\"type\":\"string\"},{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"unregisterBranchContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"},{\"name\":\"_pending\",\"type\":\"bool\"},{\"name\":\"_executed\",\"type\":\"bool\"},{\"name\":\"_canceled\",\"type\":\"bool\"}],\"name\":\"getRequestIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"deleteAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_branchAddress\",\"type\":\"address\"},{\"name\":\"_addressType\",\"type\":\"uint256\"},{\"name\":\"_prevLeafAddress\",\"type\":\"address\"},{\"name\":\"_curLeafAddress\",\"type\":\"address\"},{\"name\":\"_extraLeafAddress\",\"type\":\"address\"}],\"name\":\"updateLeafContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_branchAddress\",\"type\":\"address\"},{\"name\":\"_addressType\",\"type\":\"uint256\"},{\"name\":\"_leafAddress\",\"type\":\"address\"}],\"name\":\"unregisterLeafContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"branchContractCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminList\",\"type\":\"address[]\"},{\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"executeRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_branchName\",\"type\":\"string\"},{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"registerBranchContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_branchName\",\"type\":\"string\"}],\"name\":\"completeInitialization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"confirmRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_branchAddress\",\"type\":\"address\"},{\"name\":\"_addressType\",\"type\":\"uint256\"},{\"name\":\"_leafAddress\",\"type\":\"address[]\"}],\"name\":\"registerLeafContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBranchInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_branchName\",\"type\":\"string\"},{\"name\":\"_prevAddress\",\"type\":\"address\"},{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateBranchContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"updateRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllBranchAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"dummyArray\",\"type\":\"address[]\"},{\"name\":\"dummyUint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adminList\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"branchName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"RegisterBranchContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"branchName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"UnregisterBranchContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"branchName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"prevAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"curAddress\",\"type\":\"address\"}],\"name\":\"UpdateBranchContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"branchAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addressType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafAddress\",\"type\":\"address[]\"}],\"name\":\"RegisterLeafContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"branchAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addressType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafAddress\",\"type\":\"address\"}],\"name\":\"UnregisterLeafContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"branchAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addressType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevLeafAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"curLeafAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"extraLeafAddress\",\"type\":\"address\"}],\"name\":\"UpdateLeafContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"branchName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"CompleteInitialization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adminList\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"DeployMultisigContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"DeleteAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"UpdateRequirement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SubmitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ConfirmRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CancelRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExecuteRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExecuteRequestFailure\",\"type\":\"event\"}]"

// InitContractBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const InitContractBinRuntime = `0x6080604052600436106101535763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b81604581146101585780630d11f967146102255780631e482f821461029057806320ea8d861461030a57806327e1f7df146103225780632f0bcc341461034357806332be31001461037a578063392e53cd146103a5578063545d0e99146103ce57806358d65880146103f55780635badbe4c1461040a57806360b5bb3f1461041f5780636e417c6914610476578063704802751461048e578063715b208b146104af5780637408b0dc1461055d5780639ed5724a146105c1578063a2320f03146105e1578063a6b2c4371461064a578063b13fe92414610662578063b6cad6cd14610693578063b756393014610747578063c2c71c511461075c578063c3d5fd39146107d0578063c47afb3a146107e5578063fd7d4f6f146107fd575b600080fd5b34801561016457600080fd5b50610170600435610812565b60408051600160a060020a0389168152602080820189905260608201879052851515608083015284151560a083015283151560c083015260e0928201838152885193830193909352875191929161010084019189019080838360005b838110156101e45781810151838201526020016101cc565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561023157600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261028e95833595369560449491939091019190819084018382808284375094975050509235600160a060020a0316935061090992505050565b005b34801561029c57600080fd5b506102ba600435602435604435151560643515156084351515610c3d565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102f65781810151838201526020016102de565b505050509050019250505060405180910390f35b34801561031657600080fd5b5061028e600435610e1a565b34801561032e57600080fd5b5061028e600160a060020a0360043516611001565b34801561034f57600080fd5b5061028e600160a060020a0360043581169060243590604435811690606435811690608435166111a9565b34801561038657600080fd5b5061028e600160a060020a036004358116906024359060443516611229565b3480156103b157600080fd5b506103ba611297565b604080519115158252519081900360200190f35b3480156103da57600080fd5b506103e36112a0565b60408051918252519081900360200190f35b34801561040157600080fd5b506103e36112a6565b34801561041657600080fd5b506103e36112ab565b34801561042b57600080fd5b506040805160206004803580820135838102808601850190965280855261028e9536959394602494938501929182918501908490808284375094975050933594506112b19350505050565b34801561048257600080fd5b5061028e6004356114a1565b34801561049a57600080fd5b5061028e600160a060020a0360043516611689565b3480156104bb57600080fd5b506104c46117b8565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156105085781810151838201526020016104f0565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561054757818101518382015260200161052f565b5050505090500194505050505060405180910390f35b34801561056957600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261028e94369492936024939284019190819084018382808284375094975050509235600160a060020a03169350611c2392505050565b3480156105cd57600080fd5b5061028e6004803560248101910135611eed565b3480156105ed57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261028e948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061200d9650505050505050565b34801561065657600080fd5b5061028e60043561224a565b34801561066e57600080fd5b5061028e60048035600160a060020a03169060248035916044359182019101356123fd565b34801561069f57600080fd5b506106ab600435612497565b60405180806020018415151515815260200183600160a060020a0316600160a060020a03168152602001828103825285818151815260200191508051906020019080838360005b8381101561070a5781810151838201526020016106f2565b50505050905090810190601f1680156107375780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561075357600080fd5b506103e3612570565b34801561076857600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261028e95833595369560449491939091019190819084018382808284375094975050600160a060020a03853581169650602090950135909416935061257692505050565b3480156107dc57600080fd5b506102ba6128d1565b3480156107f157600080fd5b5061028e600435612934565b34801561080957600080fd5b506104c46129b3565b600081815260046020818152604080842080546001808301549583015460068401546002948501805487516101009582161586026000190190911696909604601f810189900489028701890190975286865289986060988a98899889988998600160a060020a0390911697949660ff80821695928204811694620100009092041692918791908301828280156108e95780601f106108be576101008083540402835291602001916108e9565b820191906000526020600020905b8154815290600101906020018083116108cc57829003601f168201915b505050505094509650965096509650965096509650919395979092949650565b80600160a060020a038116151561091f57600080fd5b600160a060020a038216600090815260056020526040902054829060ff16151561094857600080fd5b33301461095457600080fd5b60095460ff16151560011461096857600080fd5b600085815260076020526040902060010154600160a060020a0384811691161461099157600080fd5b836040516020018082805190602001908083835b602083106109c45780518252601f1990920191602091820191016109a5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310610a275780518252601f199092019160209182019101610a08565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600760008781526020019081526020016000206000016040516020018082805460018160011615610100020316600290048015610acc5780601f10610aaa576101008083540402835291820191610acc565b820191906000526020600020905b815481529060010190602001808311610ab8575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310610b0f5780518252601f199092019160209182019101610af0565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515610b4c57600080fd5b600160a060020a0383166000818152600560209081526040808320805460ff19169055888352600782529182902082518981529283019390935260609082018181528354600260001960018316156101000201909116049183018290527f67785cf16c29d07570d5093a10f1bf680274ff9ddb015bb801999c18cd558fa49389939092889290608083019085908015610c265780601f10610bfb57610100808354040283529160200191610c26565b820191906000526020600020905b815481529060010190602001808311610c0957829003601f168201915b505094505050505060405180910390a15050505050565b606060008082871580610c5257506002548810155b15610c5d5760025497505b600092508891505b87821015610d1257600082815260046020526040902054600160a060020a031615801590610caa575060008281526004602052604090206006015460ff161515871515145b8015610cd25750600082815260046020526040902060060154610100900460ff161515861515145b8015610cfb575060008281526004602052604090206006015462010000900460ff161515851515145b15610d07576001830192505b600190910190610c65565b82604051908082528060200260200182016040528015610d3c578160200160208202803883390190505b509050600092508891505b87821015610e0e57600082815260046020526040902054600160a060020a031615801590610d8c575060008281526004602052604090206006015460ff161515871515145b8015610db45750600082815260046020526040902060060154610100900460ff161515861515145b8015610ddd575060008281526004602052604090206006015462010000900460ff161515851515145b15610e0357818184815181101515610df157fe5b60209081029091010152600192909201915b600190910190610d47565b98975050505050505050565b3360008181526003602052604090205460ff161515610e3857600080fd5b60008281526004602090815260408083203380855260059091019092529091205483919060ff161515610e6a57600080fd5b6000848152600460205260409020600601548490610100900460ff1615610e9057600080fd5b600085815260046020526040902060060154859062010000900460ff1615610eb757600080fd5b6000868152600460208181526040808420338552600581018352908420805460ff19169055928990528190520154610ef690600163ffffffff612ac016565b6000878152600460208181526040928390209091019290925580514281529051339289927f0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17929081900390910190a3600154600087815260046020819052604090912001541015610f7e576000868152600460205260409020600601805460ff191660011790555b600086815260046020526040902060030154600160a060020a0316331415610ff957600086815260046020908152604091829020600601805462ff000019166201000017905581514281529151339289927f25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce192918290030190a35b505050505050565b600033301461100f57600080fd5b600160a060020a038216600090815260036020526040902054829060ff16151561103857600080fd5b60005461104c90600163ffffffff612ac016565b600154603282111580156110605750818111155b801561106b57508015155b801561107657508115155b151561108157600080fd5b600160a060020a0385166000908152600360205260408120805460ff1916905593505b6000546000190184101561115a5784600160a060020a03166000858154811015156110cb57fe5b600091825260209091200154600160a060020a0316141561114f576000805460001981019081106110f857fe5b60009182526020822001548154600160a060020a0390911691908690811061111c57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555061115a565b6001909301926110a4565b60008054600019019061116d9082612b13565b50604051600160a060020a038616907f1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc256522090600090a25050505050565b3360008181526005602052604090205460ff1615156111c757600080fd5b60408051600160a060020a038089168252602082018890528087168284015280861660608301528416608082015290517f43341da6506b6e80e576b49a91bffc0dd90c6f218b6b19d753caf865a9a5caf49181900360a00190a1505050505050565b3360008181526005602052604090205460ff16151561124757600080fd5b60408051600160a060020a0380871682526020820186905284168183015290517f58b09a47044d0872fa22b29a2c4d30639d1e6a48d8434efcb9f6994e1b3755e39181900360600190a150505050565b60095460ff1681565b60085481565b603281565b60025481565b6000825182603282111580156112c75750818111155b80156112d257508015155b80156112dd57508115155b15156112e857600080fd5b7395611200d726defd14cd1e3b29ed3048de363b4c331461130857600080fd5b60095460ff161561131857600080fd5b600092505b84518310156113e95760036000868581518110151561133857fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff1615801561138c5750848381518110151561137457fe5b90602001906020020151600160a060020a0316600014155b151561139757600080fd5b60016003600087868151811015156113ab57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff19169115159190911790556001929092019161131d565b84516113fc906000906020880190612b3c565b5060018481556009805460ff191690911790556040805160208101869052818152600080549282018390527ffa3e1e272694072320aad73a3fadd8876c4bf8f40899c6c7ce2fda9f4e652cfa9290918791819060608201908590801561148b57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161146d575b5050935050505060405180910390a15050505050565b3360008181526003602052604081205490919060ff1615156114c257600080fd5b600083815260046020526040902060060154839060ff16156114e357600080fd5b6000848152600460205260409020600601548490610100900460ff161561150957600080fd5b600085815260046020526040902060060154859062010000900460ff161561153057600080fd5b60008681526004602090815260409182902060068101805461010061ff001990911681179091558154600180840154600280860180548951948116159096026000190190951604601f8101879004870283018701909752868252939a506115fe95600160a060020a03909216949192909183908301828280156115f45780601f106115c9576101008083540402835291602001916115f4565b820191906000526020600020905b8154815290600101906020018083116115d757829003601f168201915b5050505050612ad7565b1561163f57604080514281529051339188917f55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee9181900360200190a3610ff9565b604080514281529051339188917f5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f79181900360200190a350505050600601805461ff001916905550565b33301461169557600080fd5b600160a060020a038116600090815260036020526040902054819060ff16156116bd57600080fd5b81600160a060020a03811615156116d357600080fd5b6000546116e790600163ffffffff612afa16565b600154603282111580156116fb5750818111155b801561170657508015155b801561171157508115155b151561171c57600080fd5b600160a060020a038516600081815260036020526040808220805460ff19166001908117909155825490810183558280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301805473ffffffffffffffffffffffffffffffffffffffff191684179055517fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba9190a25050505050565b606080600060606000806060806060806008546040519080825280602002602001820160405280156117f4578160200160208202803883390190505b509650600095505b60085486101561191057600086815260076020908152604080832060010154600160a060020a03168352600590915290205460ff16156119055760008681526007602090815260408083206001015481517fe024c2d00000000000000000000000000000000000000000000000000000000081529151600160a060020a039091169363e024c2d093600480850194919392918390030190829087803b1580156118a457600080fd5b505af11580156118b8573d6000803e3d6000fd5b505050506040513d60208110156118ce57600080fd5b505187518890889081106118de57fe5b6020908102909101015286518790879081106118f657fe5b90602001906020020151880197505b6001909501946117fc565b8760405190808252806020026020018201604052801561193a578160200160208202803883390190505b50935087604051908082528060200260200182016040528015611967578160200160208202803883390190505b509250600095505b600854861015611c1457868681518110151561198757fe5b6020908102909101015115611c095786868151811015156119a457fe5b906020019060200201516040519080825280602002602001820160405280156119d7578160200160208202803883390190505b50915086868151811015156119e857fe5b90602001906020020151604051908082528060200260200182016040528015611a1b578160200160208202803883390190505b506000878152600760205260408082206001015481517f715b208b0000000000000000000000000000000000000000000000000000000081529151939450600160a060020a03169263715b208b9260048084019391929182900301818387803b158015611a8757600080fd5b505af1158015611a9b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015611ac457600080fd5b810190808051640100000000811115611adc57600080fd5b82016020810184811115611aef57600080fd5b8151856020820283011164010000000082111715611b0c57600080fd5b50509291906020018051640100000000811115611b2857600080fd5b82016020810184811115611b3b57600080fd5b8151856020820283011164010000000082111715611b5857600080fd5b5060009a509496509450505050505b8686815181101515611b7557fe5b90602001906020020151851015611c09578185815181101515611b9457fe5b9060200190602002015184868801815181101515611bae57fe5b60ff9092166020928302909101909101528051819086908110611bcd57fe5b9060200190602002015183868801815181101515611be757fe5b600160a060020a03909216602092830290910190910152600190940193611b67565b60019095019461196f565b50919890975095505050505050565b600081600160a060020a0381161515611c3b57600080fd5b600160a060020a038316600090815260056020526040902054839060ff1615611c6357600080fd5b846006816040518082805190602001908083835b60208310611c965780518252601f199092019160209182019101611c77565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16159150611cd3905057600080fd5b333014611cdf57600080fd5b60095460ff161515600114611cf357600080fd5b8551600010611d0157600080fd5b600854604080518082018252888152600160a060020a038816602080830191909152600084815260078252929092208151805194985091939092611d49928492910190612bae565b5060208201518160010160006101000a815481600160a060020a030219169083600160a060020a0316021790555090505060016006876040518082805190602001908083835b60208310611dae5780518252601f199092019160209182019101611d8f565b51815160001960209485036101000a8101918216911992909216179091529390910195865260408051968790038201909620805497151560ff19988916179055600160a060020a038c16600090815260059091529490942080549095166001179094555050600854919091109050611e2557600080fd5b60088054600101905560408051858152600160a060020a038716918101919091526060602080830182815289519284019290925288517ffa9b2165fc71c1d6ffa03291c7f5d223ea363ec063d747eec9ce2d30d24855ef9388938b938b93608084019186019080838360005b83811015611ea9578181015183820152602001611e91565b50505050905090810190601f168015611ed65780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1505050505050565b81818080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506006816040518082805190602001908083835b60208310611f525780518252601f199092019160209182019101611f33565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff1615159150611f90905057600080fd5b3360008181526005602052604090205460ff161515611fae57600080fd5b6040805133602082018190528282529181018590527f933b0e6ba22c9fa6e54e9f516cf6cf46ff1498a763ae2aaee6a4d23425bc2e7791869186919080606081018585808284376040519201829003965090945050505050a150505050565b600083600160a060020a038116151561202557600080fd5b3360008181526003602052604090205460ff16151561204357600080fd5b600280546040805161010081018252600160a060020a038a8116825260208083018b81528385018b8152336060860152600060808601819052600160a0870181905260c0870182905260e08701829052888252600485529690208551815473ffffffffffffffffffffffffffffffffffffffff1916951694909417845590519483019490945592518051949850919490936120e5939185019290910190612bae565b50606082810151600383018054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff19909116179055608080850151600485015560a0808601516006909501805460c088015160e0909801511515620100000262ff0000199815156101000261ff001998151560ff19909316929092179790971617969096169490941790945560408051918b16825260208083018b9052429383018490529082018581528951958301959095528851339589957fd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb958e958e958e95929491939192918401919086019080838360005b838110156121f15781810151838201526020016121d9565b50505050905090810190601f16801561221e5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a360025461224290600163ffffffff612afa16565b600255610ff9835b3360008181526003602052604090205460ff16151561226857600080fd5b600082815260046020526040902060060154829060ff16151561228a57600080fd5b60008381526004602090815260408083203380855260059091019092529091205484919060ff16156122bb57600080fd5b6000858152600460205260409020600601548590610100900460ff16156122e157600080fd5b600086815260046020526040902060060154869062010000900460ff161561230857600080fd5b6000878152600460208181526040808420338552600581018352908420805460ff19166001908117909155938b905290829052015461234c9163ffffffff612afa16565b600088815260046020818152604092839020909101929092558051428152905133928a927f4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042929081900390910190a360015460008881526004602081905260409091200154106123d0576000878152600460205260409020600601805460ff191690555b60008781526004602052604090206006015460ff1615156123f4576123f4876114a1565b50505050505050565b3360008181526005602052604090205460ff16151561241b57600080fd5b7fc7b359b1e189b7d721be7f0765a8d745be718566b8e67cbd2728dae5d6fd64b6858585856040518085600160a060020a0316600160a060020a03168152602001848152602001806020018281038252848482818152602001925060200280828437604051920182900397509095505050505050a15050505050565b6000818152600760208181526040808420600180820154600160a060020a0316808752600585528387205488885295855282548451600261010094831615949094026000190190911692909204601f8101869004860283018601909452838252606096958695939460ff9091169391929185919083018282801561255c5780601f106125315761010080835404028352916020019161255c565b820191906000526020600020905b81548152906001019060200180831161253f57829003601f168201915b505050505092509250925092509193909250565b60015481565b80600160a060020a038116151561258c57600080fd5b600160a060020a038316600090815260056020526040902054839060ff1615156125b557600080fd5b3330146125c157600080fd5b60095460ff1615156001146125d557600080fd5b600086815260076020526040902060010154600160a060020a038581169116146125fe57600080fd5b846040516020018082805190602001908083835b602083106126315780518252601f199092019160209182019101612612565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106126945780518252601f199092019160209182019101612675565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166007600088815260200190815260200160002060000160405160200180828054600181600116156101000203166002900480156127395780601f10612717576101008083540402835291820191612739565b820191906000526020600020905b815481529060010190602001808311612725575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831061277c5780518252601f19909201916020918201910161275d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415156127b957600080fd5b826007600088815260200190815260200160002060010160006101000a815481600160a060020a030219169083600160a060020a031602179055507f6ebec3bc09570e3cf26482a73a6ff7af913480e4d50ccadf106ce6f33d560ddd86868686604051808581526020018060200184600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a03168152602001828103825285818151815260200191508051906020019080838360005b8381101561288c578181015183820152602001612874565b50505050905090810190601f1680156128b95780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050505050565b6060600080548060200260200160405190810160405280929190818152602001828054801561292957602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161290b575b505050505090505b90565b33301461294057600080fd5b60005481603282118015906129555750818111155b801561296057508015155b801561296b57508115155b151561297657600080fd5b60018390556040805184815290517f8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f9181900360200190a1505050565b60608060608060006008546040519080825280602002602001820160405280156129e7578160200160208202803883390190505b509250600854604051908082528060200260200182016040528015612a16578160200160208202803883390190505b509150600090505b600854811015612ab6576000818152600760205260409020600101548351600160a060020a0390911690849083908110612a5457fe5b600160a060020a039283166020918202909201810191909152600083815260078252604080822060010154909316815260059091522054825160ff90911690839083908110612a9f57fe5b911515602092830290910190910152600101612a1e565b5090939092509050565b60008083831115612ad057600080fd5b5050900390565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b600082820183811015612b0c57600080fd5b9392505050565b815481835581811115612b3757600083815260209020612b37918101908301612c24565b505050565b828054828255906000526020600020908101928215612b9e579160200282015b82811115612b9e578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178255602090920191600190910190612b5c565b50612baa929150612c3e565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612bef57805160ff1916838001178555612c1c565b82800160010185558215612c1c579182015b82811115612c1c578251825591602001919060010190612c01565b50612baa9291505b61293191905b80821115612baa5760008155600101612c2a565b61293191905b80821115612baa57805473ffffffffffffffffffffffffffffffffffffffff19168155600101612c445600a165627a7a7230582040b424a8b3811c2dcb3f0c38767effcb54531dd8fe216b18eeedcf7ff47875330029`

// InitContractBin is the compiled bytecode used for deploying new contracts.
const InitContractBin = `0x60806040523480156200001157600080fd5b5060405162002f4038038062002f408339810160405280516020820151910180519091908290829060009082603282118015906200004f5750818111155b80156200005b57508015155b80156200006757508115155b15156200007357600080fd5b600092505b84518310156200014b576003600086858151811015156200009557fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff16158015620000eb57508483815181101515620000d357fe5b90602001906020020151600160a060020a0316600014155b1515620000f757600080fd5b60016003600087868151811015156200010c57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff19169115159190911790556001929092019162000078565b84516200016090600090602088019062000201565b50836001819055507f14aa44bb5ce6609639302921fc20d0c5c26dc52d8fbea76c78a2e7d6d8b047f5600060015460405180806020018381526020018281038252848181548152602001915080548015620001e557602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311620001c6575b5050935050505060405180910390a15050505050505062000295565b82805482825590600052602060002090810192821562000259579160200282015b82811115620002595782518254600160a060020a031916600160a060020a0390911617825560209092019160019091019062000222565b50620002679291506200026b565b5090565b6200029291905b8082111562000267578054600160a060020a031916815560010162000272565b90565b612c9b80620002a56000396000f3006080604052600436106101535763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b81604581146101585780630d11f967146102255780631e482f821461029057806320ea8d861461030a57806327e1f7df146103225780632f0bcc341461034357806332be31001461037a578063392e53cd146103a5578063545d0e99146103ce57806358d65880146103f55780635badbe4c1461040a57806360b5bb3f1461041f5780636e417c6914610476578063704802751461048e578063715b208b146104af5780637408b0dc1461055d5780639ed5724a146105c1578063a2320f03146105e1578063a6b2c4371461064a578063b13fe92414610662578063b6cad6cd14610693578063b756393014610747578063c2c71c511461075c578063c3d5fd39146107d0578063c47afb3a146107e5578063fd7d4f6f146107fd575b600080fd5b34801561016457600080fd5b50610170600435610812565b60408051600160a060020a0389168152602080820189905260608201879052851515608083015284151560a083015283151560c083015260e0928201838152885193830193909352875191929161010084019189019080838360005b838110156101e45781810151838201526020016101cc565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561023157600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261028e95833595369560449491939091019190819084018382808284375094975050509235600160a060020a0316935061090992505050565b005b34801561029c57600080fd5b506102ba600435602435604435151560643515156084351515610c3d565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102f65781810151838201526020016102de565b505050509050019250505060405180910390f35b34801561031657600080fd5b5061028e600435610e1a565b34801561032e57600080fd5b5061028e600160a060020a0360043516611001565b34801561034f57600080fd5b5061028e600160a060020a0360043581169060243590604435811690606435811690608435166111a9565b34801561038657600080fd5b5061028e600160a060020a036004358116906024359060443516611229565b3480156103b157600080fd5b506103ba611297565b604080519115158252519081900360200190f35b3480156103da57600080fd5b506103e36112a0565b60408051918252519081900360200190f35b34801561040157600080fd5b506103e36112a6565b34801561041657600080fd5b506103e36112ab565b34801561042b57600080fd5b506040805160206004803580820135838102808601850190965280855261028e9536959394602494938501929182918501908490808284375094975050933594506112b19350505050565b34801561048257600080fd5b5061028e6004356114a1565b34801561049a57600080fd5b5061028e600160a060020a0360043516611689565b3480156104bb57600080fd5b506104c46117b8565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156105085781810151838201526020016104f0565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561054757818101518382015260200161052f565b5050505090500194505050505060405180910390f35b34801561056957600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261028e94369492936024939284019190819084018382808284375094975050509235600160a060020a03169350611c2392505050565b3480156105cd57600080fd5b5061028e6004803560248101910135611eed565b3480156105ed57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261028e948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061200d9650505050505050565b34801561065657600080fd5b5061028e60043561224a565b34801561066e57600080fd5b5061028e60048035600160a060020a03169060248035916044359182019101356123fd565b34801561069f57600080fd5b506106ab600435612497565b60405180806020018415151515815260200183600160a060020a0316600160a060020a03168152602001828103825285818151815260200191508051906020019080838360005b8381101561070a5781810151838201526020016106f2565b50505050905090810190601f1680156107375780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561075357600080fd5b506103e3612570565b34801561076857600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261028e95833595369560449491939091019190819084018382808284375094975050600160a060020a03853581169650602090950135909416935061257692505050565b3480156107dc57600080fd5b506102ba6128d1565b3480156107f157600080fd5b5061028e600435612934565b34801561080957600080fd5b506104c46129b3565b600081815260046020818152604080842080546001808301549583015460068401546002948501805487516101009582161586026000190190911696909604601f810189900489028701890190975286865289986060988a98899889988998600160a060020a0390911697949660ff80821695928204811694620100009092041692918791908301828280156108e95780601f106108be576101008083540402835291602001916108e9565b820191906000526020600020905b8154815290600101906020018083116108cc57829003601f168201915b505050505094509650965096509650965096509650919395979092949650565b80600160a060020a038116151561091f57600080fd5b600160a060020a038216600090815260056020526040902054829060ff16151561094857600080fd5b33301461095457600080fd5b60095460ff16151560011461096857600080fd5b600085815260076020526040902060010154600160a060020a0384811691161461099157600080fd5b836040516020018082805190602001908083835b602083106109c45780518252601f1990920191602091820191016109a5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310610a275780518252601f199092019160209182019101610a08565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600760008781526020019081526020016000206000016040516020018082805460018160011615610100020316600290048015610acc5780601f10610aaa576101008083540402835291820191610acc565b820191906000526020600020905b815481529060010190602001808311610ab8575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310610b0f5780518252601f199092019160209182019101610af0565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515610b4c57600080fd5b600160a060020a0383166000818152600560209081526040808320805460ff19169055888352600782529182902082518981529283019390935260609082018181528354600260001960018316156101000201909116049183018290527f67785cf16c29d07570d5093a10f1bf680274ff9ddb015bb801999c18cd558fa49389939092889290608083019085908015610c265780601f10610bfb57610100808354040283529160200191610c26565b820191906000526020600020905b815481529060010190602001808311610c0957829003601f168201915b505094505050505060405180910390a15050505050565b606060008082871580610c5257506002548810155b15610c5d5760025497505b600092508891505b87821015610d1257600082815260046020526040902054600160a060020a031615801590610caa575060008281526004602052604090206006015460ff161515871515145b8015610cd25750600082815260046020526040902060060154610100900460ff161515861515145b8015610cfb575060008281526004602052604090206006015462010000900460ff161515851515145b15610d07576001830192505b600190910190610c65565b82604051908082528060200260200182016040528015610d3c578160200160208202803883390190505b509050600092508891505b87821015610e0e57600082815260046020526040902054600160a060020a031615801590610d8c575060008281526004602052604090206006015460ff161515871515145b8015610db45750600082815260046020526040902060060154610100900460ff161515861515145b8015610ddd575060008281526004602052604090206006015462010000900460ff161515851515145b15610e0357818184815181101515610df157fe5b60209081029091010152600192909201915b600190910190610d47565b98975050505050505050565b3360008181526003602052604090205460ff161515610e3857600080fd5b60008281526004602090815260408083203380855260059091019092529091205483919060ff161515610e6a57600080fd5b6000848152600460205260409020600601548490610100900460ff1615610e9057600080fd5b600085815260046020526040902060060154859062010000900460ff1615610eb757600080fd5b6000868152600460208181526040808420338552600581018352908420805460ff19169055928990528190520154610ef690600163ffffffff612ac016565b6000878152600460208181526040928390209091019290925580514281529051339289927f0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17929081900390910190a3600154600087815260046020819052604090912001541015610f7e576000868152600460205260409020600601805460ff191660011790555b600086815260046020526040902060030154600160a060020a0316331415610ff957600086815260046020908152604091829020600601805462ff000019166201000017905581514281529151339289927f25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce192918290030190a35b505050505050565b600033301461100f57600080fd5b600160a060020a038216600090815260036020526040902054829060ff16151561103857600080fd5b60005461104c90600163ffffffff612ac016565b600154603282111580156110605750818111155b801561106b57508015155b801561107657508115155b151561108157600080fd5b600160a060020a0385166000908152600360205260408120805460ff1916905593505b6000546000190184101561115a5784600160a060020a03166000858154811015156110cb57fe5b600091825260209091200154600160a060020a0316141561114f576000805460001981019081106110f857fe5b60009182526020822001548154600160a060020a0390911691908690811061111c57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555061115a565b6001909301926110a4565b60008054600019019061116d9082612b13565b50604051600160a060020a038616907f1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc256522090600090a25050505050565b3360008181526005602052604090205460ff1615156111c757600080fd5b60408051600160a060020a038089168252602082018890528087168284015280861660608301528416608082015290517f43341da6506b6e80e576b49a91bffc0dd90c6f218b6b19d753caf865a9a5caf49181900360a00190a1505050505050565b3360008181526005602052604090205460ff16151561124757600080fd5b60408051600160a060020a0380871682526020820186905284168183015290517f58b09a47044d0872fa22b29a2c4d30639d1e6a48d8434efcb9f6994e1b3755e39181900360600190a150505050565b60095460ff1681565b60085481565b603281565b60025481565b6000825182603282111580156112c75750818111155b80156112d257508015155b80156112dd57508115155b15156112e857600080fd5b7395611200d726defd14cd1e3b29ed3048de363b4c331461130857600080fd5b60095460ff161561131857600080fd5b600092505b84518310156113e95760036000868581518110151561133857fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff1615801561138c5750848381518110151561137457fe5b90602001906020020151600160a060020a0316600014155b151561139757600080fd5b60016003600087868151811015156113ab57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff19169115159190911790556001929092019161131d565b84516113fc906000906020880190612b3c565b5060018481556009805460ff191690911790556040805160208101869052818152600080549282018390527ffa3e1e272694072320aad73a3fadd8876c4bf8f40899c6c7ce2fda9f4e652cfa9290918791819060608201908590801561148b57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161146d575b5050935050505060405180910390a15050505050565b3360008181526003602052604081205490919060ff1615156114c257600080fd5b600083815260046020526040902060060154839060ff16156114e357600080fd5b6000848152600460205260409020600601548490610100900460ff161561150957600080fd5b600085815260046020526040902060060154859062010000900460ff161561153057600080fd5b60008681526004602090815260409182902060068101805461010061ff001990911681179091558154600180840154600280860180548951948116159096026000190190951604601f8101879004870283018701909752868252939a506115fe95600160a060020a03909216949192909183908301828280156115f45780601f106115c9576101008083540402835291602001916115f4565b820191906000526020600020905b8154815290600101906020018083116115d757829003601f168201915b5050505050612ad7565b1561163f57604080514281529051339188917f55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee9181900360200190a3610ff9565b604080514281529051339188917f5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f79181900360200190a350505050600601805461ff001916905550565b33301461169557600080fd5b600160a060020a038116600090815260036020526040902054819060ff16156116bd57600080fd5b81600160a060020a03811615156116d357600080fd5b6000546116e790600163ffffffff612afa16565b600154603282111580156116fb5750818111155b801561170657508015155b801561171157508115155b151561171c57600080fd5b600160a060020a038516600081815260036020526040808220805460ff19166001908117909155825490810183558280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301805473ffffffffffffffffffffffffffffffffffffffff191684179055517fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba9190a25050505050565b606080600060606000806060806060806008546040519080825280602002602001820160405280156117f4578160200160208202803883390190505b509650600095505b60085486101561191057600086815260076020908152604080832060010154600160a060020a03168352600590915290205460ff16156119055760008681526007602090815260408083206001015481517fe024c2d00000000000000000000000000000000000000000000000000000000081529151600160a060020a039091169363e024c2d093600480850194919392918390030190829087803b1580156118a457600080fd5b505af11580156118b8573d6000803e3d6000fd5b505050506040513d60208110156118ce57600080fd5b505187518890889081106118de57fe5b6020908102909101015286518790879081106118f657fe5b90602001906020020151880197505b6001909501946117fc565b8760405190808252806020026020018201604052801561193a578160200160208202803883390190505b50935087604051908082528060200260200182016040528015611967578160200160208202803883390190505b509250600095505b600854861015611c1457868681518110151561198757fe5b6020908102909101015115611c095786868151811015156119a457fe5b906020019060200201516040519080825280602002602001820160405280156119d7578160200160208202803883390190505b50915086868151811015156119e857fe5b90602001906020020151604051908082528060200260200182016040528015611a1b578160200160208202803883390190505b506000878152600760205260408082206001015481517f715b208b0000000000000000000000000000000000000000000000000000000081529151939450600160a060020a03169263715b208b9260048084019391929182900301818387803b158015611a8757600080fd5b505af1158015611a9b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015611ac457600080fd5b810190808051640100000000811115611adc57600080fd5b82016020810184811115611aef57600080fd5b8151856020820283011164010000000082111715611b0c57600080fd5b50509291906020018051640100000000811115611b2857600080fd5b82016020810184811115611b3b57600080fd5b8151856020820283011164010000000082111715611b5857600080fd5b5060009a509496509450505050505b8686815181101515611b7557fe5b90602001906020020151851015611c09578185815181101515611b9457fe5b9060200190602002015184868801815181101515611bae57fe5b60ff9092166020928302909101909101528051819086908110611bcd57fe5b9060200190602002015183868801815181101515611be757fe5b600160a060020a03909216602092830290910190910152600190940193611b67565b60019095019461196f565b50919890975095505050505050565b600081600160a060020a0381161515611c3b57600080fd5b600160a060020a038316600090815260056020526040902054839060ff1615611c6357600080fd5b846006816040518082805190602001908083835b60208310611c965780518252601f199092019160209182019101611c77565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16159150611cd3905057600080fd5b333014611cdf57600080fd5b60095460ff161515600114611cf357600080fd5b8551600010611d0157600080fd5b600854604080518082018252888152600160a060020a038816602080830191909152600084815260078252929092208151805194985091939092611d49928492910190612bae565b5060208201518160010160006101000a815481600160a060020a030219169083600160a060020a0316021790555090505060016006876040518082805190602001908083835b60208310611dae5780518252601f199092019160209182019101611d8f565b51815160001960209485036101000a8101918216911992909216179091529390910195865260408051968790038201909620805497151560ff19988916179055600160a060020a038c16600090815260059091529490942080549095166001179094555050600854919091109050611e2557600080fd5b60088054600101905560408051858152600160a060020a038716918101919091526060602080830182815289519284019290925288517ffa9b2165fc71c1d6ffa03291c7f5d223ea363ec063d747eec9ce2d30d24855ef9388938b938b93608084019186019080838360005b83811015611ea9578181015183820152602001611e91565b50505050905090810190601f168015611ed65780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1505050505050565b81818080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506006816040518082805190602001908083835b60208310611f525780518252601f199092019160209182019101611f33565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff1615159150611f90905057600080fd5b3360008181526005602052604090205460ff161515611fae57600080fd5b6040805133602082018190528282529181018590527f933b0e6ba22c9fa6e54e9f516cf6cf46ff1498a763ae2aaee6a4d23425bc2e7791869186919080606081018585808284376040519201829003965090945050505050a150505050565b600083600160a060020a038116151561202557600080fd5b3360008181526003602052604090205460ff16151561204357600080fd5b600280546040805161010081018252600160a060020a038a8116825260208083018b81528385018b8152336060860152600060808601819052600160a0870181905260c0870182905260e08701829052888252600485529690208551815473ffffffffffffffffffffffffffffffffffffffff1916951694909417845590519483019490945592518051949850919490936120e5939185019290910190612bae565b50606082810151600383018054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff19909116179055608080850151600485015560a0808601516006909501805460c088015160e0909801511515620100000262ff0000199815156101000261ff001998151560ff19909316929092179790971617969096169490941790945560408051918b16825260208083018b9052429383018490529082018581528951958301959095528851339589957fd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb958e958e958e95929491939192918401919086019080838360005b838110156121f15781810151838201526020016121d9565b50505050905090810190601f16801561221e5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a360025461224290600163ffffffff612afa16565b600255610ff9835b3360008181526003602052604090205460ff16151561226857600080fd5b600082815260046020526040902060060154829060ff16151561228a57600080fd5b60008381526004602090815260408083203380855260059091019092529091205484919060ff16156122bb57600080fd5b6000858152600460205260409020600601548590610100900460ff16156122e157600080fd5b600086815260046020526040902060060154869062010000900460ff161561230857600080fd5b6000878152600460208181526040808420338552600581018352908420805460ff19166001908117909155938b905290829052015461234c9163ffffffff612afa16565b600088815260046020818152604092839020909101929092558051428152905133928a927f4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042929081900390910190a360015460008881526004602081905260409091200154106123d0576000878152600460205260409020600601805460ff191690555b60008781526004602052604090206006015460ff1615156123f4576123f4876114a1565b50505050505050565b3360008181526005602052604090205460ff16151561241b57600080fd5b7fc7b359b1e189b7d721be7f0765a8d745be718566b8e67cbd2728dae5d6fd64b6858585856040518085600160a060020a0316600160a060020a03168152602001848152602001806020018281038252848482818152602001925060200280828437604051920182900397509095505050505050a15050505050565b6000818152600760208181526040808420600180820154600160a060020a0316808752600585528387205488885295855282548451600261010094831615949094026000190190911692909204601f8101869004860283018601909452838252606096958695939460ff9091169391929185919083018282801561255c5780601f106125315761010080835404028352916020019161255c565b820191906000526020600020905b81548152906001019060200180831161253f57829003601f168201915b505050505092509250925092509193909250565b60015481565b80600160a060020a038116151561258c57600080fd5b600160a060020a038316600090815260056020526040902054839060ff1615156125b557600080fd5b3330146125c157600080fd5b60095460ff1615156001146125d557600080fd5b600086815260076020526040902060010154600160a060020a038581169116146125fe57600080fd5b846040516020018082805190602001908083835b602083106126315780518252601f199092019160209182019101612612565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106126945780518252601f199092019160209182019101612675565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166007600088815260200190815260200160002060000160405160200180828054600181600116156101000203166002900480156127395780601f10612717576101008083540402835291820191612739565b820191906000526020600020905b815481529060010190602001808311612725575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831061277c5780518252601f19909201916020918201910161275d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415156127b957600080fd5b826007600088815260200190815260200160002060010160006101000a815481600160a060020a030219169083600160a060020a031602179055507f6ebec3bc09570e3cf26482a73a6ff7af913480e4d50ccadf106ce6f33d560ddd86868686604051808581526020018060200184600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a03168152602001828103825285818151815260200191508051906020019080838360005b8381101561288c578181015183820152602001612874565b50505050905090810190601f1680156128b95780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050505050565b6060600080548060200260200160405190810160405280929190818152602001828054801561292957602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161290b575b505050505090505b90565b33301461294057600080fd5b60005481603282118015906129555750818111155b801561296057508015155b801561296b57508115155b151561297657600080fd5b60018390556040805184815290517f8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f9181900360200190a1505050565b60608060608060006008546040519080825280602002602001820160405280156129e7578160200160208202803883390190505b509250600854604051908082528060200260200182016040528015612a16578160200160208202803883390190505b509150600090505b600854811015612ab6576000818152600760205260409020600101548351600160a060020a0390911690849083908110612a5457fe5b600160a060020a039283166020918202909201810191909152600083815260078252604080822060010154909316815260059091522054825160ff90911690839083908110612a9f57fe5b911515602092830290910190910152600101612a1e565b5090939092509050565b60008083831115612ad057600080fd5b5050900390565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b600082820183811015612b0c57600080fd5b9392505050565b815481835581811115612b3757600083815260209020612b37918101908301612c24565b505050565b828054828255906000526020600020908101928215612b9e579160200282015b82811115612b9e578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178255602090920191600190910190612b5c565b50612baa929150612c3e565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612bef57805160ff1916838001178555612c1c565b82800160010185558215612c1c579182015b82811115612c1c578251825591602001919060010190612c01565b50612baa9291505b61293191905b80821115612baa5760008155600101612c2a565b61293191905b80821115612baa57805473ffffffffffffffffffffffffffffffffffffffff19168155600101612c445600a165627a7a7230582040b424a8b3811c2dcb3f0c38767effcb54531dd8fe216b18eeedcf7ff47875330029`

// DeployInitContract deploys a new klaytn contract, binding an instance of InitContract to it.
func DeployInitContract(auth *bind.TransactOpts, backend bind.ContractBackend, dummyArray []common.Address, dummyUint *big.Int) (common.Address, *types.Transaction, *InitContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InitContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(InitContractBin), backend, dummyArray, dummyUint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &InitContract{InitContractCaller: InitContractCaller{contract: contract}, InitContractTransactor: InitContractTransactor{contract: contract}, InitContractFilterer: InitContractFilterer{contract: contract}}, nil
}

// InitContract is an auto generated Go binding around a klaytn contract.
type InitContract struct {
	InitContractCaller     // Read-only binding to the contract
	InitContractTransactor // Write-only binding to the contract
	InitContractFilterer   // Log filterer for contract events
}

// InitContractCaller is an auto generated read-only Go binding around a klaytn contract.
type InitContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitContractTransactor is an auto generated write-only Go binding around a klaytn contract.
type InitContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitContractFilterer is an auto generated log filtering Go binding around a klaytn contract events.
type InitContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitContractSession is an auto generated Go binding around a klaytn contract,
// with pre-set call and transact options.
type InitContractSession struct {
	Contract     *InitContract     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// InitContractCallerSession is an auto generated read-only Go binding around a klaytn contract,
// with pre-set call options.
type InitContractCallerSession struct {
	Contract *InitContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// InitContractTransactorSession is an auto generated write-only Go binding around a klaytn contract,
// with pre-set transact options.
type InitContractTransactorSession struct {
	Contract     *InitContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// InitContractRaw is an auto generated low-level Go binding around a klaytn contract.
type InitContractRaw struct {
	Contract *InitContract // Generic contract binding to access the raw methods on
}

// InitContractCallerRaw is an auto generated low-level read-only Go binding around a klaytn contract.
type InitContractCallerRaw struct {
	Contract *InitContractCaller // Generic read-only contract binding to access the raw methods on
}

// InitContractTransactorRaw is an auto generated low-level write-only Go binding around a klaytn contract.
type InitContractTransactorRaw struct {
	Contract *InitContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInitContract creates a new instance of InitContract, bound to a specific deployed contract.
func NewInitContract(address common.Address, backend bind.ContractBackend) (*InitContract, error) {
	contract, err := bindInitContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &InitContract{InitContractCaller: InitContractCaller{contract: contract}, InitContractTransactor: InitContractTransactor{contract: contract}, InitContractFilterer: InitContractFilterer{contract: contract}}, nil
}

// NewInitContractCaller creates a new read-only instance of InitContract, bound to a specific deployed contract.
func NewInitContractCaller(address common.Address, caller bind.ContractCaller) (*InitContractCaller, error) {
	contract, err := bindInitContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InitContractCaller{contract: contract}, nil
}

// NewInitContractTransactor creates a new write-only instance of InitContract, bound to a specific deployed contract.
func NewInitContractTransactor(address common.Address, transactor bind.ContractTransactor) (*InitContractTransactor, error) {
	contract, err := bindInitContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InitContractTransactor{contract: contract}, nil
}

// NewInitContractFilterer creates a new log filterer instance of InitContract, bound to a specific deployed contract.
func NewInitContractFilterer(address common.Address, filterer bind.ContractFilterer) (*InitContractFilterer, error) {
	contract, err := bindInitContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InitContractFilterer{contract: contract}, nil
}

// bindInitContract binds a generic wrapper to an already deployed contract.
func bindInitContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InitContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitContract *InitContractRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _InitContract.Contract.InitContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitContract *InitContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitContract.Contract.InitContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitContract *InitContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitContract.Contract.InitContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitContract *InitContractCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _InitContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitContract *InitContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitContract *InitContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitContract.Contract.contract.Transact(opts, method, params...)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() constant returns(uint256)
func (_InitContract *InitContractCaller) MAXADMIN(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "MAX_ADMIN")
	return *ret0, err
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() constant returns(uint256)
func (_InitContract *InitContractSession) MAXADMIN() (*big.Int, error) {
	return _InitContract.Contract.MAXADMIN(&_InitContract.CallOpts)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() constant returns(uint256)
func (_InitContract *InitContractCallerSession) MAXADMIN() (*big.Int, error) {
	return _InitContract.Contract.MAXADMIN(&_InitContract.CallOpts)
}

// BranchContractCount is a free data retrieval call binding the contract method 0x545d0e99.
//
// Solidity: function branchContractCount() constant returns(uint256)
func (_InitContract *InitContractCaller) BranchContractCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "branchContractCount")
	return *ret0, err
}

// BranchContractCount is a free data retrieval call binding the contract method 0x545d0e99.
//
// Solidity: function branchContractCount() constant returns(uint256)
func (_InitContract *InitContractSession) BranchContractCount() (*big.Int, error) {
	return _InitContract.Contract.BranchContractCount(&_InitContract.CallOpts)
}

// BranchContractCount is a free data retrieval call binding the contract method 0x545d0e99.
//
// Solidity: function branchContractCount() constant returns(uint256)
func (_InitContract *InitContractCallerSession) BranchContractCount() (*big.Int, error) {
	return _InitContract.Contract.BranchContractCount(&_InitContract.CallOpts)
}

// GetAdminInfo is a free data retrieval call binding the contract method 0xc3d5fd39.
//
// Solidity: function getAdminInfo() constant returns(address[])
func (_InitContract *InitContractCaller) GetAdminInfo(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "getAdminInfo")
	return *ret0, err
}

// GetAdminInfo is a free data retrieval call binding the contract method 0xc3d5fd39.
//
// Solidity: function getAdminInfo() constant returns(address[])
func (_InitContract *InitContractSession) GetAdminInfo() ([]common.Address, error) {
	return _InitContract.Contract.GetAdminInfo(&_InitContract.CallOpts)
}

// GetAdminInfo is a free data retrieval call binding the contract method 0xc3d5fd39.
//
// Solidity: function getAdminInfo() constant returns(address[])
func (_InitContract *InitContractCallerSession) GetAdminInfo() ([]common.Address, error) {
	return _InitContract.Contract.GetAdminInfo(&_InitContract.CallOpts)
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() constant returns(uint8[], address[])
func (_InitContract *InitContractCaller) GetAllAddress(opts *bind.CallOpts) ([]uint8, []common.Address, error) {
	var (
		ret0 = new([]uint8)
		ret1 = new([]common.Address)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _InitContract.contract.Call(opts, out, "getAllAddress")
	return *ret0, *ret1, err
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() constant returns(uint8[], address[])
func (_InitContract *InitContractSession) GetAllAddress() ([]uint8, []common.Address, error) {
	return _InitContract.Contract.GetAllAddress(&_InitContract.CallOpts)
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() constant returns(uint8[], address[])
func (_InitContract *InitContractCallerSession) GetAllAddress() ([]uint8, []common.Address, error) {
	return _InitContract.Contract.GetAllAddress(&_InitContract.CallOpts)
}

// GetAllBranchAddress is a free data retrieval call binding the contract method 0xfd7d4f6f.
//
// Solidity: function getAllBranchAddress() constant returns(address[], bool[])
func (_InitContract *InitContractCaller) GetAllBranchAddress(opts *bind.CallOpts) ([]common.Address, []bool, error) {
	var (
		ret0 = new([]common.Address)
		ret1 = new([]bool)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _InitContract.contract.Call(opts, out, "getAllBranchAddress")
	return *ret0, *ret1, err
}

// GetAllBranchAddress is a free data retrieval call binding the contract method 0xfd7d4f6f.
//
// Solidity: function getAllBranchAddress() constant returns(address[], bool[])
func (_InitContract *InitContractSession) GetAllBranchAddress() ([]common.Address, []bool, error) {
	return _InitContract.Contract.GetAllBranchAddress(&_InitContract.CallOpts)
}

// GetAllBranchAddress is a free data retrieval call binding the contract method 0xfd7d4f6f.
//
// Solidity: function getAllBranchAddress() constant returns(address[], bool[])
func (_InitContract *InitContractCallerSession) GetAllBranchAddress() ([]common.Address, []bool, error) {
	return _InitContract.Contract.GetAllBranchAddress(&_InitContract.CallOpts)
}

// GetBranchInfo is a free data retrieval call binding the contract method 0xb6cad6cd.
//
// Solidity: function getBranchInfo(_index uint256) constant returns(string, bool, address)
func (_InitContract *InitContractCaller) GetBranchInfo(opts *bind.CallOpts, _index *big.Int) (string, bool, common.Address, error) {
	var (
		ret0 = new(string)
		ret1 = new(bool)
		ret2 = new(common.Address)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _InitContract.contract.Call(opts, out, "getBranchInfo", _index)
	return *ret0, *ret1, *ret2, err
}

// GetBranchInfo is a free data retrieval call binding the contract method 0xb6cad6cd.
//
// Solidity: function getBranchInfo(_index uint256) constant returns(string, bool, address)
func (_InitContract *InitContractSession) GetBranchInfo(_index *big.Int) (string, bool, common.Address, error) {
	return _InitContract.Contract.GetBranchInfo(&_InitContract.CallOpts, _index)
}

// GetBranchInfo is a free data retrieval call binding the contract method 0xb6cad6cd.
//
// Solidity: function getBranchInfo(_index uint256) constant returns(string, bool, address)
func (_InitContract *InitContractCallerSession) GetBranchInfo(_index *big.Int) (string, bool, common.Address, error) {
	return _InitContract.Contract.GetBranchInfo(&_InitContract.CallOpts, _index)
}

// GetRequestIndexes is a free data retrieval call binding the contract method 0x1e482f82.
//
// Solidity: function getRequestIndexes(_from uint256, _to uint256, _pending bool, _executed bool, _canceled bool) constant returns(uint256[])
func (_InitContract *InitContractCaller) GetRequestIndexes(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _pending bool, _executed bool, _canceled bool) ([]*big.Int, error) {
	var (
		ret0 = new([]*big.Int)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "getRequestIndexes", _from, _to, _pending, _executed, _canceled)
	return *ret0, err
}

// GetRequestIndexes is a free data retrieval call binding the contract method 0x1e482f82.
//
// Solidity: function getRequestIndexes(_from uint256, _to uint256, _pending bool, _executed bool, _canceled bool) constant returns(uint256[])
func (_InitContract *InitContractSession) GetRequestIndexes(_from *big.Int, _to *big.Int, _pending bool, _executed bool, _canceled bool) ([]*big.Int, error) {
	return _InitContract.Contract.GetRequestIndexes(&_InitContract.CallOpts, _from, _to, _pending, _executed, _canceled)
}

// GetRequestIndexes is a free data retrieval call binding the contract method 0x1e482f82.
//
// Solidity: function getRequestIndexes(_from uint256, _to uint256, _pending bool, _executed bool, _canceled bool) constant returns(uint256[])
func (_InitContract *InitContractCallerSession) GetRequestIndexes(_from *big.Int, _to *big.Int, _pending bool, _executed bool, _canceled bool) ([]*big.Int, error) {
	return _InitContract.Contract.GetRequestIndexes(&_InitContract.CallOpts, _from, _to, _pending, _executed, _canceled)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(_index uint256) constant returns(address, uint256, bytes, uint256, bool, bool, bool)
func (_InitContract *InitContractCaller) GetRequestInfo(opts *bind.CallOpts, _index *big.Int) (common.Address, *big.Int, []byte, *big.Int, bool, bool, bool, error) {
	var (
		ret0 = new(common.Address)
		ret1 = new(*big.Int)
		ret2 = new([]byte)
		ret3 = new(*big.Int)
		ret4 = new(bool)
		ret5 = new(bool)
		ret6 = new(bool)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
		ret5,
		ret6,
	}
	err := _InitContract.contract.Call(opts, out, "getRequestInfo", _index)
	return *ret0, *ret1, *ret2, *ret3, *ret4, *ret5, *ret6, err
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(_index uint256) constant returns(address, uint256, bytes, uint256, bool, bool, bool)
func (_InitContract *InitContractSession) GetRequestInfo(_index *big.Int) (common.Address, *big.Int, []byte, *big.Int, bool, bool, bool, error) {
	return _InitContract.Contract.GetRequestInfo(&_InitContract.CallOpts, _index)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(_index uint256) constant returns(address, uint256, bytes, uint256, bool, bool, bool)
func (_InitContract *InitContractCallerSession) GetRequestInfo(_index *big.Int) (common.Address, *big.Int, []byte, *big.Int, bool, bool, bool, error) {
	return _InitContract.Contract.GetRequestInfo(&_InitContract.CallOpts, _index)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() constant returns(bool)
func (_InitContract *InitContractCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "isInitialized")
	return *ret0, err
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() constant returns(bool)
func (_InitContract *InitContractSession) IsInitialized() (bool, error) {
	return _InitContract.Contract.IsInitialized(&_InitContract.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() constant returns(bool)
func (_InitContract *InitContractCallerSession) IsInitialized() (bool, error) {
	return _InitContract.Contract.IsInitialized(&_InitContract.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() constant returns(uint256)
func (_InitContract *InitContractCaller) RequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "requestCount")
	return *ret0, err
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() constant returns(uint256)
func (_InitContract *InitContractSession) RequestCount() (*big.Int, error) {
	return _InitContract.Contract.RequestCount(&_InitContract.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() constant returns(uint256)
func (_InitContract *InitContractCallerSession) RequestCount() (*big.Int, error) {
	return _InitContract.Contract.RequestCount(&_InitContract.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() constant returns(uint256)
func (_InitContract *InitContractCaller) Requirement(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "requirement")
	return *ret0, err
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() constant returns(uint256)
func (_InitContract *InitContractSession) Requirement() (*big.Int, error) {
	return _InitContract.Contract.Requirement(&_InitContract.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() constant returns(uint256)
func (_InitContract *InitContractCallerSession) Requirement() (*big.Int, error) {
	return _InitContract.Contract.Requirement(&_InitContract.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(_admin address) returns()
func (_InitContract *InitContractTransactor) AddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "addAdmin", _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(_admin address) returns()
func (_InitContract *InitContractSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.AddAdmin(&_InitContract.TransactOpts, _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(_admin address) returns()
func (_InitContract *InitContractTransactorSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.AddAdmin(&_InitContract.TransactOpts, _admin)
}

// CompleteInitialization is a paid mutator transaction binding the contract method 0x9ed5724a.
//
// Solidity: function completeInitialization(_branchName string) returns()
func (_InitContract *InitContractTransactor) CompleteInitialization(opts *bind.TransactOpts, _branchName string) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "completeInitialization", _branchName)
}

// CompleteInitialization is a paid mutator transaction binding the contract method 0x9ed5724a.
//
// Solidity: function completeInitialization(_branchName string) returns()
func (_InitContract *InitContractSession) CompleteInitialization(_branchName string) (*types.Transaction, error) {
	return _InitContract.Contract.CompleteInitialization(&_InitContract.TransactOpts, _branchName)
}

// CompleteInitialization is a paid mutator transaction binding the contract method 0x9ed5724a.
//
// Solidity: function completeInitialization(_branchName string) returns()
func (_InitContract *InitContractTransactorSession) CompleteInitialization(_branchName string) (*types.Transaction, error) {
	return _InitContract.Contract.CompleteInitialization(&_InitContract.TransactOpts, _branchName)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0xa6b2c437.
//
// Solidity: function confirmRequest(_index uint256) returns()
func (_InitContract *InitContractTransactor) ConfirmRequest(opts *bind.TransactOpts, _index *big.Int) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "confirmRequest", _index)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0xa6b2c437.
//
// Solidity: function confirmRequest(_index uint256) returns()
func (_InitContract *InitContractSession) ConfirmRequest(_index *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.ConfirmRequest(&_InitContract.TransactOpts, _index)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0xa6b2c437.
//
// Solidity: function confirmRequest(_index uint256) returns()
func (_InitContract *InitContractTransactorSession) ConfirmRequest(_index *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.ConfirmRequest(&_InitContract.TransactOpts, _index)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(_admin address) returns()
func (_InitContract *InitContractTransactor) DeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "deleteAdmin", _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(_admin address) returns()
func (_InitContract *InitContractSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.DeleteAdmin(&_InitContract.TransactOpts, _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(_admin address) returns()
func (_InitContract *InitContractTransactorSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.DeleteAdmin(&_InitContract.TransactOpts, _admin)
}

// ExecuteRequest is a paid mutator transaction binding the contract method 0x6e417c69.
//
// Solidity: function executeRequest(_index uint256) returns()
func (_InitContract *InitContractTransactor) ExecuteRequest(opts *bind.TransactOpts, _index *big.Int) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "executeRequest", _index)
}

// ExecuteRequest is a paid mutator transaction binding the contract method 0x6e417c69.
//
// Solidity: function executeRequest(_index uint256) returns()
func (_InitContract *InitContractSession) ExecuteRequest(_index *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.ExecuteRequest(&_InitContract.TransactOpts, _index)
}

// ExecuteRequest is a paid mutator transaction binding the contract method 0x6e417c69.
//
// Solidity: function executeRequest(_index uint256) returns()
func (_InitContract *InitContractTransactorSession) ExecuteRequest(_index *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.ExecuteRequest(&_InitContract.TransactOpts, _index)
}

// Initialize is a paid mutator transaction binding the contract method 0x60b5bb3f.
//
// Solidity: function initialize(_adminList address[], _requirement uint256) returns()
func (_InitContract *InitContractTransactor) Initialize(opts *bind.TransactOpts, _adminList []common.Address, _requirement *big.Int) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "initialize", _adminList, _requirement)
}

// Initialize is a paid mutator transaction binding the contract method 0x60b5bb3f.
//
// Solidity: function initialize(_adminList address[], _requirement uint256) returns()
func (_InitContract *InitContractSession) Initialize(_adminList []common.Address, _requirement *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.Initialize(&_InitContract.TransactOpts, _adminList, _requirement)
}

// Initialize is a paid mutator transaction binding the contract method 0x60b5bb3f.
//
// Solidity: function initialize(_adminList address[], _requirement uint256) returns()
func (_InitContract *InitContractTransactorSession) Initialize(_adminList []common.Address, _requirement *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.Initialize(&_InitContract.TransactOpts, _adminList, _requirement)
}

// RegisterBranchContract is a paid mutator transaction binding the contract method 0x7408b0dc.
//
// Solidity: function registerBranchContract(_branchName string, _contractAddress address) returns()
func (_InitContract *InitContractTransactor) RegisterBranchContract(opts *bind.TransactOpts, _branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "registerBranchContract", _branchName, _contractAddress)
}

// RegisterBranchContract is a paid mutator transaction binding the contract method 0x7408b0dc.
//
// Solidity: function registerBranchContract(_branchName string, _contractAddress address) returns()
func (_InitContract *InitContractSession) RegisterBranchContract(_branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.RegisterBranchContract(&_InitContract.TransactOpts, _branchName, _contractAddress)
}

// RegisterBranchContract is a paid mutator transaction binding the contract method 0x7408b0dc.
//
// Solidity: function registerBranchContract(_branchName string, _contractAddress address) returns()
func (_InitContract *InitContractTransactorSession) RegisterBranchContract(_branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.RegisterBranchContract(&_InitContract.TransactOpts, _branchName, _contractAddress)
}

// RegisterLeafContract is a paid mutator transaction binding the contract method 0xb13fe924.
//
// Solidity: function registerLeafContract(_branchAddress address, _addressType uint256, _leafAddress address[]) returns()
func (_InitContract *InitContractTransactor) RegisterLeafContract(opts *bind.TransactOpts, _branchAddress common.Address, _addressType *big.Int, _leafAddress []common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "registerLeafContract", _branchAddress, _addressType, _leafAddress)
}

// RegisterLeafContract is a paid mutator transaction binding the contract method 0xb13fe924.
//
// Solidity: function registerLeafContract(_branchAddress address, _addressType uint256, _leafAddress address[]) returns()
func (_InitContract *InitContractSession) RegisterLeafContract(_branchAddress common.Address, _addressType *big.Int, _leafAddress []common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.RegisterLeafContract(&_InitContract.TransactOpts, _branchAddress, _addressType, _leafAddress)
}

// RegisterLeafContract is a paid mutator transaction binding the contract method 0xb13fe924.
//
// Solidity: function registerLeafContract(_branchAddress address, _addressType uint256, _leafAddress address[]) returns()
func (_InitContract *InitContractTransactorSession) RegisterLeafContract(_branchAddress common.Address, _addressType *big.Int, _leafAddress []common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.RegisterLeafContract(&_InitContract.TransactOpts, _branchAddress, _addressType, _leafAddress)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(_index uint256) returns()
func (_InitContract *InitContractTransactor) RevokeConfirmation(opts *bind.TransactOpts, _index *big.Int) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "revokeConfirmation", _index)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(_index uint256) returns()
func (_InitContract *InitContractSession) RevokeConfirmation(_index *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.RevokeConfirmation(&_InitContract.TransactOpts, _index)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(_index uint256) returns()
func (_InitContract *InitContractTransactorSession) RevokeConfirmation(_index *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.RevokeConfirmation(&_InitContract.TransactOpts, _index)
}

// SubmitRequest is a paid mutator transaction binding the contract method 0xa2320f03.
//
// Solidity: function submitRequest(_to address, _value uint256, _data bytes) returns()
func (_InitContract *InitContractTransactor) SubmitRequest(opts *bind.TransactOpts, _to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "submitRequest", _to, _value, _data)
}

// SubmitRequest is a paid mutator transaction binding the contract method 0xa2320f03.
//
// Solidity: function submitRequest(_to address, _value uint256, _data bytes) returns()
func (_InitContract *InitContractSession) SubmitRequest(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _InitContract.Contract.SubmitRequest(&_InitContract.TransactOpts, _to, _value, _data)
}

// SubmitRequest is a paid mutator transaction binding the contract method 0xa2320f03.
//
// Solidity: function submitRequest(_to address, _value uint256, _data bytes) returns()
func (_InitContract *InitContractTransactorSession) SubmitRequest(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _InitContract.Contract.SubmitRequest(&_InitContract.TransactOpts, _to, _value, _data)
}

// UnregisterBranchContract is a paid mutator transaction binding the contract method 0x0d11f967.
//
// Solidity: function unregisterBranchContract(_index uint256, _branchName string, _contractAddress address) returns()
func (_InitContract *InitContractTransactor) UnregisterBranchContract(opts *bind.TransactOpts, _index *big.Int, _branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "unregisterBranchContract", _index, _branchName, _contractAddress)
}

// UnregisterBranchContract is a paid mutator transaction binding the contract method 0x0d11f967.
//
// Solidity: function unregisterBranchContract(_index uint256, _branchName string, _contractAddress address) returns()
func (_InitContract *InitContractSession) UnregisterBranchContract(_index *big.Int, _branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UnregisterBranchContract(&_InitContract.TransactOpts, _index, _branchName, _contractAddress)
}

// UnregisterBranchContract is a paid mutator transaction binding the contract method 0x0d11f967.
//
// Solidity: function unregisterBranchContract(_index uint256, _branchName string, _contractAddress address) returns()
func (_InitContract *InitContractTransactorSession) UnregisterBranchContract(_index *big.Int, _branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UnregisterBranchContract(&_InitContract.TransactOpts, _index, _branchName, _contractAddress)
}

// UnregisterLeafContract is a paid mutator transaction binding the contract method 0x32be3100.
//
// Solidity: function unregisterLeafContract(_branchAddress address, _addressType uint256, _leafAddress address) returns()
func (_InitContract *InitContractTransactor) UnregisterLeafContract(opts *bind.TransactOpts, _branchAddress common.Address, _addressType *big.Int, _leafAddress common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "unregisterLeafContract", _branchAddress, _addressType, _leafAddress)
}

// UnregisterLeafContract is a paid mutator transaction binding the contract method 0x32be3100.
//
// Solidity: function unregisterLeafContract(_branchAddress address, _addressType uint256, _leafAddress address) returns()
func (_InitContract *InitContractSession) UnregisterLeafContract(_branchAddress common.Address, _addressType *big.Int, _leafAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UnregisterLeafContract(&_InitContract.TransactOpts, _branchAddress, _addressType, _leafAddress)
}

// UnregisterLeafContract is a paid mutator transaction binding the contract method 0x32be3100.
//
// Solidity: function unregisterLeafContract(_branchAddress address, _addressType uint256, _leafAddress address) returns()
func (_InitContract *InitContractTransactorSession) UnregisterLeafContract(_branchAddress common.Address, _addressType *big.Int, _leafAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UnregisterLeafContract(&_InitContract.TransactOpts, _branchAddress, _addressType, _leafAddress)
}

// UpdateBranchContract is a paid mutator transaction binding the contract method 0xc2c71c51.
//
// Solidity: function updateBranchContract(_index uint256, _branchName string, _prevAddress address, _newAddress address) returns()
func (_InitContract *InitContractTransactor) UpdateBranchContract(opts *bind.TransactOpts, _index *big.Int, _branchName string, _prevAddress common.Address, _newAddress common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "updateBranchContract", _index, _branchName, _prevAddress, _newAddress)
}

// UpdateBranchContract is a paid mutator transaction binding the contract method 0xc2c71c51.
//
// Solidity: function updateBranchContract(_index uint256, _branchName string, _prevAddress address, _newAddress address) returns()
func (_InitContract *InitContractSession) UpdateBranchContract(_index *big.Int, _branchName string, _prevAddress common.Address, _newAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UpdateBranchContract(&_InitContract.TransactOpts, _index, _branchName, _prevAddress, _newAddress)
}

// UpdateBranchContract is a paid mutator transaction binding the contract method 0xc2c71c51.
//
// Solidity: function updateBranchContract(_index uint256, _branchName string, _prevAddress address, _newAddress address) returns()
func (_InitContract *InitContractTransactorSession) UpdateBranchContract(_index *big.Int, _branchName string, _prevAddress common.Address, _newAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UpdateBranchContract(&_InitContract.TransactOpts, _index, _branchName, _prevAddress, _newAddress)
}

// UpdateLeafContract is a paid mutator transaction binding the contract method 0x2f0bcc34.
//
// Solidity: function updateLeafContract(_branchAddress address, _addressType uint256, _prevLeafAddress address, _curLeafAddress address, _extraLeafAddress address) returns()
func (_InitContract *InitContractTransactor) UpdateLeafContract(opts *bind.TransactOpts, _branchAddress common.Address, _addressType *big.Int, _prevLeafAddress common.Address, _curLeafAddress common.Address, _extraLeafAddress common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "updateLeafContract", _branchAddress, _addressType, _prevLeafAddress, _curLeafAddress, _extraLeafAddress)
}

// UpdateLeafContract is a paid mutator transaction binding the contract method 0x2f0bcc34.
//
// Solidity: function updateLeafContract(_branchAddress address, _addressType uint256, _prevLeafAddress address, _curLeafAddress address, _extraLeafAddress address) returns()
func (_InitContract *InitContractSession) UpdateLeafContract(_branchAddress common.Address, _addressType *big.Int, _prevLeafAddress common.Address, _curLeafAddress common.Address, _extraLeafAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UpdateLeafContract(&_InitContract.TransactOpts, _branchAddress, _addressType, _prevLeafAddress, _curLeafAddress, _extraLeafAddress)
}

// UpdateLeafContract is a paid mutator transaction binding the contract method 0x2f0bcc34.
//
// Solidity: function updateLeafContract(_branchAddress address, _addressType uint256, _prevLeafAddress address, _curLeafAddress address, _extraLeafAddress address) returns()
func (_InitContract *InitContractTransactorSession) UpdateLeafContract(_branchAddress common.Address, _addressType *big.Int, _prevLeafAddress common.Address, _curLeafAddress common.Address, _extraLeafAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UpdateLeafContract(&_InitContract.TransactOpts, _branchAddress, _addressType, _prevLeafAddress, _curLeafAddress, _extraLeafAddress)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(_requirement uint256) returns()
func (_InitContract *InitContractTransactor) UpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "updateRequirement", _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(_requirement uint256) returns()
func (_InitContract *InitContractSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.UpdateRequirement(&_InitContract.TransactOpts, _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(_requirement uint256) returns()
func (_InitContract *InitContractTransactorSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.UpdateRequirement(&_InitContract.TransactOpts, _requirement)
}

// InitContractAddAdminIterator is returned from FilterAddAdmin and is used to iterate over the raw logs and unpacked data for AddAdmin events raised by the InitContract contract.
type InitContractAddAdminIterator struct {
	Event *InitContractAddAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractAddAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractAddAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractAddAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractAddAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractAddAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractAddAdmin represents a AddAdmin event raised by the InitContract contract.
type InitContractAddAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddAdmin is a free log retrieval operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: e AddAdmin(admin indexed address)
func (_InitContract *InitContractFilterer) FilterAddAdmin(opts *bind.FilterOpts, admin []common.Address) (*InitContractAddAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &InitContractAddAdminIterator{contract: _InitContract.contract, event: "AddAdmin", logs: logs, sub: sub}, nil
}

// WatchAddAdmin is a free log subscription operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: e AddAdmin(admin indexed address)
func (_InitContract *InitContractFilterer) WatchAddAdmin(opts *bind.WatchOpts, sink chan<- *InitContractAddAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractAddAdmin)
				if err := _InitContract.contract.UnpackLog(event, "AddAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractCancelRequestIterator is returned from FilterCancelRequest and is used to iterate over the raw logs and unpacked data for CancelRequest events raised by the InitContract contract.
type InitContractCancelRequestIterator struct {
	Event *InitContractCancelRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractCancelRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractCancelRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractCancelRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractCancelRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractCancelRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractCancelRequest represents a CancelRequest event raised by the InitContract contract.
type InitContractCancelRequest struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCancelRequest is a free log retrieval operation binding the contract event 0x25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce1.
//
// Solidity: e CancelRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) FilterCancelRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*InitContractCancelRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "CancelRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &InitContractCancelRequestIterator{contract: _InitContract.contract, event: "CancelRequest", logs: logs, sub: sub}, nil
}

// WatchCancelRequest is a free log subscription operation binding the contract event 0x25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce1.
//
// Solidity: e CancelRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) WatchCancelRequest(opts *bind.WatchOpts, sink chan<- *InitContractCancelRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "CancelRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractCancelRequest)
				if err := _InitContract.contract.UnpackLog(event, "CancelRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractCompleteInitializationIterator is returned from FilterCompleteInitialization and is used to iterate over the raw logs and unpacked data for CompleteInitialization events raised by the InitContract contract.
type InitContractCompleteInitializationIterator struct {
	Event *InitContractCompleteInitialization // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractCompleteInitializationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractCompleteInitialization)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractCompleteInitialization)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractCompleteInitializationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractCompleteInitializationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractCompleteInitialization represents a CompleteInitialization event raised by the InitContract contract.
type InitContractCompleteInitialization struct {
	BranchName      string
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterCompleteInitialization is a free log retrieval operation binding the contract event 0x933b0e6ba22c9fa6e54e9f516cf6cf46ff1498a763ae2aaee6a4d23425bc2e77.
//
// Solidity: e CompleteInitialization(branchName string, contractAddress address)
func (_InitContract *InitContractFilterer) FilterCompleteInitialization(opts *bind.FilterOpts) (*InitContractCompleteInitializationIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "CompleteInitialization")
	if err != nil {
		return nil, err
	}
	return &InitContractCompleteInitializationIterator{contract: _InitContract.contract, event: "CompleteInitialization", logs: logs, sub: sub}, nil
}

// WatchCompleteInitialization is a free log subscription operation binding the contract event 0x933b0e6ba22c9fa6e54e9f516cf6cf46ff1498a763ae2aaee6a4d23425bc2e77.
//
// Solidity: e CompleteInitialization(branchName string, contractAddress address)
func (_InitContract *InitContractFilterer) WatchCompleteInitialization(opts *bind.WatchOpts, sink chan<- *InitContractCompleteInitialization) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "CompleteInitialization")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractCompleteInitialization)
				if err := _InitContract.contract.UnpackLog(event, "CompleteInitialization", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractConfirmRequestIterator is returned from FilterConfirmRequest and is used to iterate over the raw logs and unpacked data for ConfirmRequest events raised by the InitContract contract.
type InitContractConfirmRequestIterator struct {
	Event *InitContractConfirmRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractConfirmRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractConfirmRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractConfirmRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractConfirmRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractConfirmRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractConfirmRequest represents a ConfirmRequest event raised by the InitContract contract.
type InitContractConfirmRequest struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterConfirmRequest is a free log retrieval operation binding the contract event 0x4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042.
//
// Solidity: e ConfirmRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) FilterConfirmRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*InitContractConfirmRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "ConfirmRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &InitContractConfirmRequestIterator{contract: _InitContract.contract, event: "ConfirmRequest", logs: logs, sub: sub}, nil
}

// WatchConfirmRequest is a free log subscription operation binding the contract event 0x4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042.
//
// Solidity: e ConfirmRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) WatchConfirmRequest(opts *bind.WatchOpts, sink chan<- *InitContractConfirmRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "ConfirmRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractConfirmRequest)
				if err := _InitContract.contract.UnpackLog(event, "ConfirmRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractDeleteAdminIterator is returned from FilterDeleteAdmin and is used to iterate over the raw logs and unpacked data for DeleteAdmin events raised by the InitContract contract.
type InitContractDeleteAdminIterator struct {
	Event *InitContractDeleteAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractDeleteAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractDeleteAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractDeleteAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractDeleteAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractDeleteAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractDeleteAdmin represents a DeleteAdmin event raised by the InitContract contract.
type InitContractDeleteAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDeleteAdmin is a free log retrieval operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: e DeleteAdmin(admin indexed address)
func (_InitContract *InitContractFilterer) FilterDeleteAdmin(opts *bind.FilterOpts, admin []common.Address) (*InitContractDeleteAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &InitContractDeleteAdminIterator{contract: _InitContract.contract, event: "DeleteAdmin", logs: logs, sub: sub}, nil
}

// WatchDeleteAdmin is a free log subscription operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: e DeleteAdmin(admin indexed address)
func (_InitContract *InitContractFilterer) WatchDeleteAdmin(opts *bind.WatchOpts, sink chan<- *InitContractDeleteAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractDeleteAdmin)
				if err := _InitContract.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractDeployMultisigContractIterator is returned from FilterDeployMultisigContract and is used to iterate over the raw logs and unpacked data for DeployMultisigContract events raised by the InitContract contract.
type InitContractDeployMultisigContractIterator struct {
	Event *InitContractDeployMultisigContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractDeployMultisigContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractDeployMultisigContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractDeployMultisigContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractDeployMultisigContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractDeployMultisigContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractDeployMultisigContract represents a DeployMultisigContract event raised by the InitContract contract.
type InitContractDeployMultisigContract struct {
	AdminList   []common.Address
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDeployMultisigContract is a free log retrieval operation binding the contract event 0x14aa44bb5ce6609639302921fc20d0c5c26dc52d8fbea76c78a2e7d6d8b047f5.
//
// Solidity: e DeployMultisigContract(adminList address[], requirement uint256)
func (_InitContract *InitContractFilterer) FilterDeployMultisigContract(opts *bind.FilterOpts) (*InitContractDeployMultisigContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "DeployMultisigContract")
	if err != nil {
		return nil, err
	}
	return &InitContractDeployMultisigContractIterator{contract: _InitContract.contract, event: "DeployMultisigContract", logs: logs, sub: sub}, nil
}

// WatchDeployMultisigContract is a free log subscription operation binding the contract event 0x14aa44bb5ce6609639302921fc20d0c5c26dc52d8fbea76c78a2e7d6d8b047f5.
//
// Solidity: e DeployMultisigContract(adminList address[], requirement uint256)
func (_InitContract *InitContractFilterer) WatchDeployMultisigContract(opts *bind.WatchOpts, sink chan<- *InitContractDeployMultisigContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "DeployMultisigContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractDeployMultisigContract)
				if err := _InitContract.contract.UnpackLog(event, "DeployMultisigContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractExecuteRequestIterator is returned from FilterExecuteRequest and is used to iterate over the raw logs and unpacked data for ExecuteRequest events raised by the InitContract contract.
type InitContractExecuteRequestIterator struct {
	Event *InitContractExecuteRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractExecuteRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractExecuteRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractExecuteRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractExecuteRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractExecuteRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractExecuteRequest represents a ExecuteRequest event raised by the InitContract contract.
type InitContractExecuteRequest struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequest is a free log retrieval operation binding the contract event 0x55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee.
//
// Solidity: e ExecuteRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) FilterExecuteRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*InitContractExecuteRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "ExecuteRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &InitContractExecuteRequestIterator{contract: _InitContract.contract, event: "ExecuteRequest", logs: logs, sub: sub}, nil
}

// WatchExecuteRequest is a free log subscription operation binding the contract event 0x55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee.
//
// Solidity: e ExecuteRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) WatchExecuteRequest(opts *bind.WatchOpts, sink chan<- *InitContractExecuteRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "ExecuteRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractExecuteRequest)
				if err := _InitContract.contract.UnpackLog(event, "ExecuteRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractExecuteRequestFailureIterator is returned from FilterExecuteRequestFailure and is used to iterate over the raw logs and unpacked data for ExecuteRequestFailure events raised by the InitContract contract.
type InitContractExecuteRequestFailureIterator struct {
	Event *InitContractExecuteRequestFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractExecuteRequestFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractExecuteRequestFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractExecuteRequestFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractExecuteRequestFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractExecuteRequestFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractExecuteRequestFailure represents a ExecuteRequestFailure event raised by the InitContract contract.
type InitContractExecuteRequestFailure struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestFailure is a free log retrieval operation binding the contract event 0x5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f7.
//
// Solidity: e ExecuteRequestFailure(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) FilterExecuteRequestFailure(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*InitContractExecuteRequestFailureIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "ExecuteRequestFailure", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &InitContractExecuteRequestFailureIterator{contract: _InitContract.contract, event: "ExecuteRequestFailure", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestFailure is a free log subscription operation binding the contract event 0x5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f7.
//
// Solidity: e ExecuteRequestFailure(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) WatchExecuteRequestFailure(opts *bind.WatchOpts, sink chan<- *InitContractExecuteRequestFailure, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "ExecuteRequestFailure", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractExecuteRequestFailure)
				if err := _InitContract.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractInitializeIterator is returned from FilterInitialize and is used to iterate over the raw logs and unpacked data for Initialize events raised by the InitContract contract.
type InitContractInitializeIterator struct {
	Event *InitContractInitialize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractInitializeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractInitialize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractInitialize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractInitializeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractInitializeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractInitialize represents a Initialize event raised by the InitContract contract.
type InitContractInitialize struct {
	AdminList   []common.Address
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterInitialize is a free log retrieval operation binding the contract event 0xfa3e1e272694072320aad73a3fadd8876c4bf8f40899c6c7ce2fda9f4e652cfa.
//
// Solidity: e Initialize(adminList address[], requirement uint256)
func (_InitContract *InitContractFilterer) FilterInitialize(opts *bind.FilterOpts) (*InitContractInitializeIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "Initialize")
	if err != nil {
		return nil, err
	}
	return &InitContractInitializeIterator{contract: _InitContract.contract, event: "Initialize", logs: logs, sub: sub}, nil
}

// WatchInitialize is a free log subscription operation binding the contract event 0xfa3e1e272694072320aad73a3fadd8876c4bf8f40899c6c7ce2fda9f4e652cfa.
//
// Solidity: e Initialize(adminList address[], requirement uint256)
func (_InitContract *InitContractFilterer) WatchInitialize(opts *bind.WatchOpts, sink chan<- *InitContractInitialize) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "Initialize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractInitialize)
				if err := _InitContract.contract.UnpackLog(event, "Initialize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractRegisterBranchContractIterator is returned from FilterRegisterBranchContract and is used to iterate over the raw logs and unpacked data for RegisterBranchContract events raised by the InitContract contract.
type InitContractRegisterBranchContractIterator struct {
	Event *InitContractRegisterBranchContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractRegisterBranchContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractRegisterBranchContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractRegisterBranchContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractRegisterBranchContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractRegisterBranchContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractRegisterBranchContract represents a RegisterBranchContract event raised by the InitContract contract.
type InitContractRegisterBranchContract struct {
	Index           *big.Int
	BranchName      string
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterRegisterBranchContract is a free log retrieval operation binding the contract event 0xfa9b2165fc71c1d6ffa03291c7f5d223ea363ec063d747eec9ce2d30d24855ef.
//
// Solidity: e RegisterBranchContract(index uint256, branchName string, contractAddress address)
func (_InitContract *InitContractFilterer) FilterRegisterBranchContract(opts *bind.FilterOpts) (*InitContractRegisterBranchContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "RegisterBranchContract")
	if err != nil {
		return nil, err
	}
	return &InitContractRegisterBranchContractIterator{contract: _InitContract.contract, event: "RegisterBranchContract", logs: logs, sub: sub}, nil
}

// WatchRegisterBranchContract is a free log subscription operation binding the contract event 0xfa9b2165fc71c1d6ffa03291c7f5d223ea363ec063d747eec9ce2d30d24855ef.
//
// Solidity: e RegisterBranchContract(index uint256, branchName string, contractAddress address)
func (_InitContract *InitContractFilterer) WatchRegisterBranchContract(opts *bind.WatchOpts, sink chan<- *InitContractRegisterBranchContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "RegisterBranchContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractRegisterBranchContract)
				if err := _InitContract.contract.UnpackLog(event, "RegisterBranchContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractRegisterLeafContractIterator is returned from FilterRegisterLeafContract and is used to iterate over the raw logs and unpacked data for RegisterLeafContract events raised by the InitContract contract.
type InitContractRegisterLeafContractIterator struct {
	Event *InitContractRegisterLeafContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractRegisterLeafContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractRegisterLeafContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractRegisterLeafContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractRegisterLeafContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractRegisterLeafContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractRegisterLeafContract represents a RegisterLeafContract event raised by the InitContract contract.
type InitContractRegisterLeafContract struct {
	BranchAddress common.Address
	AddressType   *big.Int
	LeafAddress   []common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRegisterLeafContract is a free log retrieval operation binding the contract event 0xc7b359b1e189b7d721be7f0765a8d745be718566b8e67cbd2728dae5d6fd64b6.
//
// Solidity: e RegisterLeafContract(branchAddress address, addressType uint256, leafAddress address[])
func (_InitContract *InitContractFilterer) FilterRegisterLeafContract(opts *bind.FilterOpts) (*InitContractRegisterLeafContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "RegisterLeafContract")
	if err != nil {
		return nil, err
	}
	return &InitContractRegisterLeafContractIterator{contract: _InitContract.contract, event: "RegisterLeafContract", logs: logs, sub: sub}, nil
}

// WatchRegisterLeafContract is a free log subscription operation binding the contract event 0xc7b359b1e189b7d721be7f0765a8d745be718566b8e67cbd2728dae5d6fd64b6.
//
// Solidity: e RegisterLeafContract(branchAddress address, addressType uint256, leafAddress address[])
func (_InitContract *InitContractFilterer) WatchRegisterLeafContract(opts *bind.WatchOpts, sink chan<- *InitContractRegisterLeafContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "RegisterLeafContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractRegisterLeafContract)
				if err := _InitContract.contract.UnpackLog(event, "RegisterLeafContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractRevokeConfirmationIterator is returned from FilterRevokeConfirmation and is used to iterate over the raw logs and unpacked data for RevokeConfirmation events raised by the InitContract contract.
type InitContractRevokeConfirmationIterator struct {
	Event *InitContractRevokeConfirmation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractRevokeConfirmationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractRevokeConfirmation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractRevokeConfirmation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractRevokeConfirmationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractRevokeConfirmationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractRevokeConfirmation represents a RevokeConfirmation event raised by the InitContract contract.
type InitContractRevokeConfirmation struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRevokeConfirmation is a free log retrieval operation binding the contract event 0x0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17.
//
// Solidity: e RevokeConfirmation(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) FilterRevokeConfirmation(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*InitContractRevokeConfirmationIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "RevokeConfirmation", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &InitContractRevokeConfirmationIterator{contract: _InitContract.contract, event: "RevokeConfirmation", logs: logs, sub: sub}, nil
}

// WatchRevokeConfirmation is a free log subscription operation binding the contract event 0x0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17.
//
// Solidity: e RevokeConfirmation(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) WatchRevokeConfirmation(opts *bind.WatchOpts, sink chan<- *InitContractRevokeConfirmation, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "RevokeConfirmation", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractRevokeConfirmation)
				if err := _InitContract.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractSubmitRequestIterator is returned from FilterSubmitRequest and is used to iterate over the raw logs and unpacked data for SubmitRequest events raised by the InitContract contract.
type InitContractSubmitRequestIterator struct {
	Event *InitContractSubmitRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractSubmitRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractSubmitRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractSubmitRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractSubmitRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractSubmitRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractSubmitRequest represents a SubmitRequest event raised by the InitContract contract.
type InitContractSubmitRequest struct {
	Index     *big.Int
	From      common.Address
	To        common.Address
	Value     *big.Int
	Data      []byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSubmitRequest is a free log retrieval operation binding the contract event 0xd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb.
//
// Solidity: e SubmitRequest(index indexed uint256, from indexed address, to address, value uint256, data bytes, timestamp uint256)
func (_InitContract *InitContractFilterer) FilterSubmitRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*InitContractSubmitRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "SubmitRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &InitContractSubmitRequestIterator{contract: _InitContract.contract, event: "SubmitRequest", logs: logs, sub: sub}, nil
}

// WatchSubmitRequest is a free log subscription operation binding the contract event 0xd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb.
//
// Solidity: e SubmitRequest(index indexed uint256, from indexed address, to address, value uint256, data bytes, timestamp uint256)
func (_InitContract *InitContractFilterer) WatchSubmitRequest(opts *bind.WatchOpts, sink chan<- *InitContractSubmitRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "SubmitRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractSubmitRequest)
				if err := _InitContract.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractUnregisterBranchContractIterator is returned from FilterUnregisterBranchContract and is used to iterate over the raw logs and unpacked data for UnregisterBranchContract events raised by the InitContract contract.
type InitContractUnregisterBranchContractIterator struct {
	Event *InitContractUnregisterBranchContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractUnregisterBranchContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractUnregisterBranchContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractUnregisterBranchContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractUnregisterBranchContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractUnregisterBranchContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractUnregisterBranchContract represents a UnregisterBranchContract event raised by the InitContract contract.
type InitContractUnregisterBranchContract struct {
	Index           *big.Int
	BranchName      string
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnregisterBranchContract is a free log retrieval operation binding the contract event 0x67785cf16c29d07570d5093a10f1bf680274ff9ddb015bb801999c18cd558fa4.
//
// Solidity: e UnregisterBranchContract(index uint256, branchName string, contractAddress address)
func (_InitContract *InitContractFilterer) FilterUnregisterBranchContract(opts *bind.FilterOpts) (*InitContractUnregisterBranchContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "UnregisterBranchContract")
	if err != nil {
		return nil, err
	}
	return &InitContractUnregisterBranchContractIterator{contract: _InitContract.contract, event: "UnregisterBranchContract", logs: logs, sub: sub}, nil
}

// WatchUnregisterBranchContract is a free log subscription operation binding the contract event 0x67785cf16c29d07570d5093a10f1bf680274ff9ddb015bb801999c18cd558fa4.
//
// Solidity: e UnregisterBranchContract(index uint256, branchName string, contractAddress address)
func (_InitContract *InitContractFilterer) WatchUnregisterBranchContract(opts *bind.WatchOpts, sink chan<- *InitContractUnregisterBranchContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "UnregisterBranchContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractUnregisterBranchContract)
				if err := _InitContract.contract.UnpackLog(event, "UnregisterBranchContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractUnregisterLeafContractIterator is returned from FilterUnregisterLeafContract and is used to iterate over the raw logs and unpacked data for UnregisterLeafContract events raised by the InitContract contract.
type InitContractUnregisterLeafContractIterator struct {
	Event *InitContractUnregisterLeafContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractUnregisterLeafContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractUnregisterLeafContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractUnregisterLeafContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractUnregisterLeafContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractUnregisterLeafContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractUnregisterLeafContract represents a UnregisterLeafContract event raised by the InitContract contract.
type InitContractUnregisterLeafContract struct {
	BranchAddress common.Address
	AddressType   *big.Int
	LeafAddress   common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUnregisterLeafContract is a free log retrieval operation binding the contract event 0x58b09a47044d0872fa22b29a2c4d30639d1e6a48d8434efcb9f6994e1b3755e3.
//
// Solidity: e UnregisterLeafContract(branchAddress address, addressType uint256, leafAddress address)
func (_InitContract *InitContractFilterer) FilterUnregisterLeafContract(opts *bind.FilterOpts) (*InitContractUnregisterLeafContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "UnregisterLeafContract")
	if err != nil {
		return nil, err
	}
	return &InitContractUnregisterLeafContractIterator{contract: _InitContract.contract, event: "UnregisterLeafContract", logs: logs, sub: sub}, nil
}

// WatchUnregisterLeafContract is a free log subscription operation binding the contract event 0x58b09a47044d0872fa22b29a2c4d30639d1e6a48d8434efcb9f6994e1b3755e3.
//
// Solidity: e UnregisterLeafContract(branchAddress address, addressType uint256, leafAddress address)
func (_InitContract *InitContractFilterer) WatchUnregisterLeafContract(opts *bind.WatchOpts, sink chan<- *InitContractUnregisterLeafContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "UnregisterLeafContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractUnregisterLeafContract)
				if err := _InitContract.contract.UnpackLog(event, "UnregisterLeafContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractUpdateBranchContractIterator is returned from FilterUpdateBranchContract and is used to iterate over the raw logs and unpacked data for UpdateBranchContract events raised by the InitContract contract.
type InitContractUpdateBranchContractIterator struct {
	Event *InitContractUpdateBranchContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractUpdateBranchContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractUpdateBranchContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractUpdateBranchContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractUpdateBranchContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractUpdateBranchContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractUpdateBranchContract represents a UpdateBranchContract event raised by the InitContract contract.
type InitContractUpdateBranchContract struct {
	Index       *big.Int
	BranchName  string
	PrevAddress common.Address
	CurAddress  common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateBranchContract is a free log retrieval operation binding the contract event 0x6ebec3bc09570e3cf26482a73a6ff7af913480e4d50ccadf106ce6f33d560ddd.
//
// Solidity: e UpdateBranchContract(index uint256, branchName string, prevAddress address, curAddress address)
func (_InitContract *InitContractFilterer) FilterUpdateBranchContract(opts *bind.FilterOpts) (*InitContractUpdateBranchContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "UpdateBranchContract")
	if err != nil {
		return nil, err
	}
	return &InitContractUpdateBranchContractIterator{contract: _InitContract.contract, event: "UpdateBranchContract", logs: logs, sub: sub}, nil
}

// WatchUpdateBranchContract is a free log subscription operation binding the contract event 0x6ebec3bc09570e3cf26482a73a6ff7af913480e4d50ccadf106ce6f33d560ddd.
//
// Solidity: e UpdateBranchContract(index uint256, branchName string, prevAddress address, curAddress address)
func (_InitContract *InitContractFilterer) WatchUpdateBranchContract(opts *bind.WatchOpts, sink chan<- *InitContractUpdateBranchContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "UpdateBranchContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractUpdateBranchContract)
				if err := _InitContract.contract.UnpackLog(event, "UpdateBranchContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractUpdateLeafContractIterator is returned from FilterUpdateLeafContract and is used to iterate over the raw logs and unpacked data for UpdateLeafContract events raised by the InitContract contract.
type InitContractUpdateLeafContractIterator struct {
	Event *InitContractUpdateLeafContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractUpdateLeafContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractUpdateLeafContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractUpdateLeafContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractUpdateLeafContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractUpdateLeafContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractUpdateLeafContract represents a UpdateLeafContract event raised by the InitContract contract.
type InitContractUpdateLeafContract struct {
	BranchAddress    common.Address
	AddressType      *big.Int
	PrevLeafAddress  common.Address
	CurLeafAddress   common.Address
	ExtraLeafAddress common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterUpdateLeafContract is a free log retrieval operation binding the contract event 0x43341da6506b6e80e576b49a91bffc0dd90c6f218b6b19d753caf865a9a5caf4.
//
// Solidity: e UpdateLeafContract(branchAddress address, addressType uint256, prevLeafAddress address, curLeafAddress address, extraLeafAddress address)
func (_InitContract *InitContractFilterer) FilterUpdateLeafContract(opts *bind.FilterOpts) (*InitContractUpdateLeafContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "UpdateLeafContract")
	if err != nil {
		return nil, err
	}
	return &InitContractUpdateLeafContractIterator{contract: _InitContract.contract, event: "UpdateLeafContract", logs: logs, sub: sub}, nil
}

// WatchUpdateLeafContract is a free log subscription operation binding the contract event 0x43341da6506b6e80e576b49a91bffc0dd90c6f218b6b19d753caf865a9a5caf4.
//
// Solidity: e UpdateLeafContract(branchAddress address, addressType uint256, prevLeafAddress address, curLeafAddress address, extraLeafAddress address)
func (_InitContract *InitContractFilterer) WatchUpdateLeafContract(opts *bind.WatchOpts, sink chan<- *InitContractUpdateLeafContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "UpdateLeafContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractUpdateLeafContract)
				if err := _InitContract.contract.UnpackLog(event, "UpdateLeafContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractUpdateRequirementIterator is returned from FilterUpdateRequirement and is used to iterate over the raw logs and unpacked data for UpdateRequirement events raised by the InitContract contract.
type InitContractUpdateRequirementIterator struct {
	Event *InitContractUpdateRequirement // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractUpdateRequirementIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractUpdateRequirement)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractUpdateRequirement)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractUpdateRequirementIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractUpdateRequirementIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractUpdateRequirement represents a UpdateRequirement event raised by the InitContract contract.
type InitContractUpdateRequirement struct {
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequirement is a free log retrieval operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: e UpdateRequirement(requirement uint256)
func (_InitContract *InitContractFilterer) FilterUpdateRequirement(opts *bind.FilterOpts) (*InitContractUpdateRequirementIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return &InitContractUpdateRequirementIterator{contract: _InitContract.contract, event: "UpdateRequirement", logs: logs, sub: sub}, nil
}

// WatchUpdateRequirement is a free log subscription operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: e UpdateRequirement(requirement uint256)
func (_InitContract *InitContractFilterer) WatchUpdateRequirement(opts *bind.WatchOpts, sink chan<- *InitContractUpdateRequirement) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractUpdateRequirement)
				if err := _InitContract.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseABI is the input ABI used to generate the binding from.
const MultisigBaseABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"},{\"name\":\"_pending\",\"type\":\"bool\"},{\"name\":\"_executed\",\"type\":\"bool\"},{\"name\":\"_canceled\",\"type\":\"bool\"}],\"name\":\"getRequestIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"deleteAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"executeRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"confirmRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"updateRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_adminList\",\"type\":\"address[]\"},{\"name\":\"_requirement\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adminList\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"DeployMultisigContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"DeleteAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"UpdateRequirement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SubmitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ConfirmRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CancelRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExecuteRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExecuteRequestFailure\",\"type\":\"event\"}]"

// MultisigBaseBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const MultisigBaseBinRuntime = `0x6080604052600436106100c45763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b81604581146100c95780631e482f821461019657806320ea8d861461021057806327e1f7df1461022a57806358d658801461024b5780635badbe4c146102725780636e417c6914610287578063704802751461029f578063a2320f03146102c0578063a6b2c43714610329578063b756393014610341578063c3d5fd3914610356578063c47afb3a1461036b575b600080fd5b3480156100d557600080fd5b506100e1600435610383565b60408051600160a060020a0389168152602080820189905260608201879052851515608083015284151560a083015283151560c083015260e0928201838152885193830193909352875191929161010084019189019080838360005b8381101561015557818101518382015260200161013d565b50505050905090810190601f1680156101825780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156101a257600080fd5b506101c060043560243560443515156064351515608435151561047a565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101fc5781810151838201526020016101e4565b505050509050019250505060405180910390f35b34801561021c57600080fd5b50610228600435610657565b005b34801561023657600080fd5b50610228600160a060020a036004351661083e565b34801561025757600080fd5b506102606109e6565b60408051918252519081900360200190f35b34801561027e57600080fd5b506102606109eb565b34801561029357600080fd5b506102286004356109f1565b3480156102ab57600080fd5b50610228600160a060020a0360043516610bd9565b3480156102cc57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610228948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610d089650505050505050565b34801561033557600080fd5b50610228600435610f45565b34801561034d57600080fd5b506102606110f8565b34801561036257600080fd5b506101c06110fe565b34801561037757600080fd5b50610228600435611161565b600081815260046020818152604080842080546001808301549583015460068401546002948501805487516101009582161586026000190190911696909604601f810189900489028701890190975286865289986060988a98899889988998600160a060020a0390911697949660ff808216959282048116946201000090920416929187919083018282801561045a5780601f1061042f5761010080835404028352916020019161045a565b820191906000526020600020905b81548152906001019060200180831161043d57829003601f168201915b505050505094509650965096509650965096509650919395979092949650565b60606000808287158061048f57506002548810155b1561049a5760025497505b600092508891505b8782101561054f57600082815260046020526040902054600160a060020a0316158015906104e7575060008281526004602052604090206006015460ff161515871515145b801561050f5750600082815260046020526040902060060154610100900460ff161515861515145b8015610538575060008281526004602052604090206006015462010000900460ff161515851515145b15610544576001830192505b6001909101906104a2565b82604051908082528060200260200182016040528015610579578160200160208202803883390190505b509050600092508891505b8782101561064b57600082815260046020526040902054600160a060020a0316158015906105c9575060008281526004602052604090206006015460ff161515871515145b80156105f15750600082815260046020526040902060060154610100900460ff161515861515145b801561061a575060008281526004602052604090206006015462010000900460ff161515851515145b156106405781818481518110151561062e57fe5b60209081029091010152600192909201915b600190910190610584565b98975050505050505050565b3360008181526003602052604090205460ff16151561067557600080fd5b60008281526004602090815260408083203380855260059091019092529091205483919060ff1615156106a757600080fd5b6000848152600460205260409020600601548490610100900460ff16156106cd57600080fd5b600085815260046020526040902060060154859062010000900460ff16156106f457600080fd5b6000868152600460208181526040808420338552600581018352908420805460ff1916905592899052819052015461073390600163ffffffff6111e016565b6000878152600460208181526040928390209091019290925580514281529051339289927f0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17929081900390910190a36001546000878152600460208190526040909120015410156107bb576000868152600460205260409020600601805460ff191660011790555b600086815260046020526040902060030154600160a060020a031633141561083657600086815260046020908152604091829020600601805462ff000019166201000017905581514281529151339289927f25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce192918290030190a35b505050505050565b600033301461084c57600080fd5b600160a060020a038216600090815260036020526040902054829060ff16151561087557600080fd5b60005461088990600163ffffffff6111e016565b6001546032821115801561089d5750818111155b80156108a857508015155b80156108b357508115155b15156108be57600080fd5b600160a060020a0385166000908152600360205260408120805460ff1916905593505b600054600019018410156109975784600160a060020a031660008581548110151561090857fe5b600091825260209091200154600160a060020a0316141561098c5760008054600019810190811061093557fe5b60009182526020822001548154600160a060020a0390911691908690811061095957fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550610997565b6001909301926108e1565b6000805460001901906109aa9082611233565b50604051600160a060020a038616907f1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc256522090600090a25050505050565b603281565b60025481565b3360008181526003602052604081205490919060ff161515610a1257600080fd5b600083815260046020526040902060060154839060ff1615610a3357600080fd5b6000848152600460205260409020600601548490610100900460ff1615610a5957600080fd5b600085815260046020526040902060060154859062010000900460ff1615610a8057600080fd5b60008681526004602090815260409182902060068101805461010061ff001990911681179091558154600180840154600280860180548951948116159096026000190190951604601f8101879004870283018701909752868252939a50610b4e95600160a060020a0390921694919290918390830182828015610b445780601f10610b1957610100808354040283529160200191610b44565b820191906000526020600020905b815481529060010190602001808311610b2757829003601f168201915b50505050506111f7565b15610b8f57604080514281529051339188917f55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee9181900360200190a3610836565b604080514281529051339188917f5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f79181900360200190a350505050600601805461ff001916905550565b333014610be557600080fd5b600160a060020a038116600090815260036020526040902054819060ff1615610c0d57600080fd5b81600160a060020a0381161515610c2357600080fd5b600054610c3790600163ffffffff61121a16565b60015460328211158015610c4b5750818111155b8015610c5657508015155b8015610c6157508115155b1515610c6c57600080fd5b600160a060020a038516600081815260036020526040808220805460ff19166001908117909155825490810183558280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301805473ffffffffffffffffffffffffffffffffffffffff191684179055517fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba9190a25050505050565b600083600160a060020a0381161515610d2057600080fd5b3360008181526003602052604090205460ff161515610d3e57600080fd5b600280546040805161010081018252600160a060020a038a8116825260208083018b81528385018b8152336060860152600060808601819052600160a0870181905260c0870182905260e08701829052888252600485529690208551815473ffffffffffffffffffffffffffffffffffffffff191695169490941784559051948301949094559251805194985091949093610de093918501929091019061125c565b50606082810151600383018054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff19909116179055608080850151600485015560a0808601516006909501805460c088015160e0909801511515620100000262ff0000199815156101000261ff001998151560ff19909316929092179790971617969096169490941790945560408051918b16825260208083018b9052429383018490529082018581528951958301959095528851339589957fd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb958e958e958e95929491939192918401919086019080838360005b83811015610eec578181015183820152602001610ed4565b50505050905090810190601f168015610f195780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a3600254610f3d90600163ffffffff61121a16565b600255610836835b3360008181526003602052604090205460ff161515610f6357600080fd5b600082815260046020526040902060060154829060ff161515610f8557600080fd5b60008381526004602090815260408083203380855260059091019092529091205484919060ff1615610fb657600080fd5b6000858152600460205260409020600601548590610100900460ff1615610fdc57600080fd5b600086815260046020526040902060060154869062010000900460ff161561100357600080fd5b6000878152600460208181526040808420338552600581018352908420805460ff19166001908117909155938b90529082905201546110479163ffffffff61121a16565b600088815260046020818152604092839020909101929092558051428152905133928a927f4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042929081900390910190a360015460008881526004602081905260409091200154106110cb576000878152600460205260409020600601805460ff191690555b60008781526004602052604090206006015460ff1615156110ef576110ef876109f1565b50505050505050565b60015481565b6060600080548060200260200160405190810160405280929190818152602001828054801561115657602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611138575b505050505090505b90565b33301461116d57600080fd5b60005481603282118015906111825750818111155b801561118d57508015155b801561119857508115155b15156111a357600080fd5b60018390556040805184815290517f8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f9181900360200190a1505050565b600080838311156111f057600080fd5b5050900390565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b60008282018381101561122c57600080fd5b9392505050565b815481835581811115611257576000838152602090206112579181019083016112da565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061129d57805160ff19168380011785556112ca565b828001600101855582156112ca579182015b828111156112ca5782518255916020019190600101906112af565b506112d69291506112da565b5090565b61115e91905b808211156112d657600081556001016112e05600a165627a7a72305820d17871a803e46548e2fb31f8ac31a5bc396758d4d7ed892ab25970e8c3ed84b40029`

// MultisigBaseBin is the compiled bytecode used for deploying new contracts.
const MultisigBaseBin = `0x60806040523480156200001157600080fd5b50604051620015bf380380620015bf83398101604052805160208201519101805190919060009082603282118015906200004b5750818111155b80156200005757508015155b80156200006357508115155b15156200006f57600080fd5b600092505b845183101562000147576003600086858151811015156200009157fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff16158015620000e757508483815181101515620000cf57fe5b90602001906020020151600160a060020a0316600014155b1515620000f357600080fd5b60016003600087868151811015156200010857fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff19169115159190911790556001929092019162000074565b84516200015c906000906020880190620001fb565b50836001819055507f14aa44bb5ce6609639302921fc20d0c5c26dc52d8fbea76c78a2e7d6d8b047f5600060015460405180806020018381526020018281038252848181548152602001915080548015620001e157602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311620001c2575b5050935050505060405180910390a150505050506200028f565b82805482825590600052602060002090810192821562000253579160200282015b82811115620002535782518254600160a060020a031916600160a060020a039091161782556020909201916001909101906200021c565b506200026192915062000265565b5090565b6200028c91905b8082111562000261578054600160a060020a03191681556001016200026c565b90565b611320806200029f6000396000f3006080604052600436106100c45763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b81604581146100c95780631e482f821461019657806320ea8d861461021057806327e1f7df1461022a57806358d658801461024b5780635badbe4c146102725780636e417c6914610287578063704802751461029f578063a2320f03146102c0578063a6b2c43714610329578063b756393014610341578063c3d5fd3914610356578063c47afb3a1461036b575b600080fd5b3480156100d557600080fd5b506100e1600435610383565b60408051600160a060020a0389168152602080820189905260608201879052851515608083015284151560a083015283151560c083015260e0928201838152885193830193909352875191929161010084019189019080838360005b8381101561015557818101518382015260200161013d565b50505050905090810190601f1680156101825780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156101a257600080fd5b506101c060043560243560443515156064351515608435151561047a565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101fc5781810151838201526020016101e4565b505050509050019250505060405180910390f35b34801561021c57600080fd5b50610228600435610657565b005b34801561023657600080fd5b50610228600160a060020a036004351661083e565b34801561025757600080fd5b506102606109e6565b60408051918252519081900360200190f35b34801561027e57600080fd5b506102606109eb565b34801561029357600080fd5b506102286004356109f1565b3480156102ab57600080fd5b50610228600160a060020a0360043516610bd9565b3480156102cc57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610228948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610d089650505050505050565b34801561033557600080fd5b50610228600435610f45565b34801561034d57600080fd5b506102606110f8565b34801561036257600080fd5b506101c06110fe565b34801561037757600080fd5b50610228600435611161565b600081815260046020818152604080842080546001808301549583015460068401546002948501805487516101009582161586026000190190911696909604601f810189900489028701890190975286865289986060988a98899889988998600160a060020a0390911697949660ff808216959282048116946201000090920416929187919083018282801561045a5780601f1061042f5761010080835404028352916020019161045a565b820191906000526020600020905b81548152906001019060200180831161043d57829003601f168201915b505050505094509650965096509650965096509650919395979092949650565b60606000808287158061048f57506002548810155b1561049a5760025497505b600092508891505b8782101561054f57600082815260046020526040902054600160a060020a0316158015906104e7575060008281526004602052604090206006015460ff161515871515145b801561050f5750600082815260046020526040902060060154610100900460ff161515861515145b8015610538575060008281526004602052604090206006015462010000900460ff161515851515145b15610544576001830192505b6001909101906104a2565b82604051908082528060200260200182016040528015610579578160200160208202803883390190505b509050600092508891505b8782101561064b57600082815260046020526040902054600160a060020a0316158015906105c9575060008281526004602052604090206006015460ff161515871515145b80156105f15750600082815260046020526040902060060154610100900460ff161515861515145b801561061a575060008281526004602052604090206006015462010000900460ff161515851515145b156106405781818481518110151561062e57fe5b60209081029091010152600192909201915b600190910190610584565b98975050505050505050565b3360008181526003602052604090205460ff16151561067557600080fd5b60008281526004602090815260408083203380855260059091019092529091205483919060ff1615156106a757600080fd5b6000848152600460205260409020600601548490610100900460ff16156106cd57600080fd5b600085815260046020526040902060060154859062010000900460ff16156106f457600080fd5b6000868152600460208181526040808420338552600581018352908420805460ff1916905592899052819052015461073390600163ffffffff6111e016565b6000878152600460208181526040928390209091019290925580514281529051339289927f0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17929081900390910190a36001546000878152600460208190526040909120015410156107bb576000868152600460205260409020600601805460ff191660011790555b600086815260046020526040902060030154600160a060020a031633141561083657600086815260046020908152604091829020600601805462ff000019166201000017905581514281529151339289927f25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce192918290030190a35b505050505050565b600033301461084c57600080fd5b600160a060020a038216600090815260036020526040902054829060ff16151561087557600080fd5b60005461088990600163ffffffff6111e016565b6001546032821115801561089d5750818111155b80156108a857508015155b80156108b357508115155b15156108be57600080fd5b600160a060020a0385166000908152600360205260408120805460ff1916905593505b600054600019018410156109975784600160a060020a031660008581548110151561090857fe5b600091825260209091200154600160a060020a0316141561098c5760008054600019810190811061093557fe5b60009182526020822001548154600160a060020a0390911691908690811061095957fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550610997565b6001909301926108e1565b6000805460001901906109aa9082611233565b50604051600160a060020a038616907f1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc256522090600090a25050505050565b603281565b60025481565b3360008181526003602052604081205490919060ff161515610a1257600080fd5b600083815260046020526040902060060154839060ff1615610a3357600080fd5b6000848152600460205260409020600601548490610100900460ff1615610a5957600080fd5b600085815260046020526040902060060154859062010000900460ff1615610a8057600080fd5b60008681526004602090815260409182902060068101805461010061ff001990911681179091558154600180840154600280860180548951948116159096026000190190951604601f8101879004870283018701909752868252939a50610b4e95600160a060020a0390921694919290918390830182828015610b445780601f10610b1957610100808354040283529160200191610b44565b820191906000526020600020905b815481529060010190602001808311610b2757829003601f168201915b50505050506111f7565b15610b8f57604080514281529051339188917f55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee9181900360200190a3610836565b604080514281529051339188917f5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f79181900360200190a350505050600601805461ff001916905550565b333014610be557600080fd5b600160a060020a038116600090815260036020526040902054819060ff1615610c0d57600080fd5b81600160a060020a0381161515610c2357600080fd5b600054610c3790600163ffffffff61121a16565b60015460328211158015610c4b5750818111155b8015610c5657508015155b8015610c6157508115155b1515610c6c57600080fd5b600160a060020a038516600081815260036020526040808220805460ff19166001908117909155825490810183558280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301805473ffffffffffffffffffffffffffffffffffffffff191684179055517fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba9190a25050505050565b600083600160a060020a0381161515610d2057600080fd5b3360008181526003602052604090205460ff161515610d3e57600080fd5b600280546040805161010081018252600160a060020a038a8116825260208083018b81528385018b8152336060860152600060808601819052600160a0870181905260c0870182905260e08701829052888252600485529690208551815473ffffffffffffffffffffffffffffffffffffffff191695169490941784559051948301949094559251805194985091949093610de093918501929091019061125c565b50606082810151600383018054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff19909116179055608080850151600485015560a0808601516006909501805460c088015160e0909801511515620100000262ff0000199815156101000261ff001998151560ff19909316929092179790971617969096169490941790945560408051918b16825260208083018b9052429383018490529082018581528951958301959095528851339589957fd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb958e958e958e95929491939192918401919086019080838360005b83811015610eec578181015183820152602001610ed4565b50505050905090810190601f168015610f195780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a3600254610f3d90600163ffffffff61121a16565b600255610836835b3360008181526003602052604090205460ff161515610f6357600080fd5b600082815260046020526040902060060154829060ff161515610f8557600080fd5b60008381526004602090815260408083203380855260059091019092529091205484919060ff1615610fb657600080fd5b6000858152600460205260409020600601548590610100900460ff1615610fdc57600080fd5b600086815260046020526040902060060154869062010000900460ff161561100357600080fd5b6000878152600460208181526040808420338552600581018352908420805460ff19166001908117909155938b90529082905201546110479163ffffffff61121a16565b600088815260046020818152604092839020909101929092558051428152905133928a927f4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042929081900390910190a360015460008881526004602081905260409091200154106110cb576000878152600460205260409020600601805460ff191690555b60008781526004602052604090206006015460ff1615156110ef576110ef876109f1565b50505050505050565b60015481565b6060600080548060200260200160405190810160405280929190818152602001828054801561115657602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611138575b505050505090505b90565b33301461116d57600080fd5b60005481603282118015906111825750818111155b801561118d57508015155b801561119857508115155b15156111a357600080fd5b60018390556040805184815290517f8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f9181900360200190a1505050565b600080838311156111f057600080fd5b5050900390565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b60008282018381101561122c57600080fd5b9392505050565b815481835581811115611257576000838152602090206112579181019083016112da565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061129d57805160ff19168380011785556112ca565b828001600101855582156112ca579182015b828111156112ca5782518255916020019190600101906112af565b506112d69291506112da565b5090565b61115e91905b808211156112d657600081556001016112e05600a165627a7a72305820d17871a803e46548e2fb31f8ac31a5bc396758d4d7ed892ab25970e8c3ed84b40029`

// DeployMultisigBase deploys a new klaytn contract, binding an instance of MultisigBase to it.
func DeployMultisigBase(auth *bind.TransactOpts, backend bind.ContractBackend, _adminList []common.Address, _requirement *big.Int) (common.Address, *types.Transaction, *MultisigBase, error) {
	parsed, err := abi.JSON(strings.NewReader(MultisigBaseABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MultisigBaseBin), backend, _adminList, _requirement)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MultisigBase{MultisigBaseCaller: MultisigBaseCaller{contract: contract}, MultisigBaseTransactor: MultisigBaseTransactor{contract: contract}, MultisigBaseFilterer: MultisigBaseFilterer{contract: contract}}, nil
}

// MultisigBase is an auto generated Go binding around a klaytn contract.
type MultisigBase struct {
	MultisigBaseCaller     // Read-only binding to the contract
	MultisigBaseTransactor // Write-only binding to the contract
	MultisigBaseFilterer   // Log filterer for contract events
}

// MultisigBaseCaller is an auto generated read-only Go binding around a klaytn contract.
type MultisigBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultisigBaseTransactor is an auto generated write-only Go binding around a klaytn contract.
type MultisigBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultisigBaseFilterer is an auto generated log filtering Go binding around a klaytn contract events.
type MultisigBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultisigBaseSession is an auto generated Go binding around a klaytn contract,
// with pre-set call and transact options.
type MultisigBaseSession struct {
	Contract     *MultisigBase     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MultisigBaseCallerSession is an auto generated read-only Go binding around a klaytn contract,
// with pre-set call options.
type MultisigBaseCallerSession struct {
	Contract *MultisigBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// MultisigBaseTransactorSession is an auto generated write-only Go binding around a klaytn contract,
// with pre-set transact options.
type MultisigBaseTransactorSession struct {
	Contract     *MultisigBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// MultisigBaseRaw is an auto generated low-level Go binding around a klaytn contract.
type MultisigBaseRaw struct {
	Contract *MultisigBase // Generic contract binding to access the raw methods on
}

// MultisigBaseCallerRaw is an auto generated low-level read-only Go binding around a klaytn contract.
type MultisigBaseCallerRaw struct {
	Contract *MultisigBaseCaller // Generic read-only contract binding to access the raw methods on
}

// MultisigBaseTransactorRaw is an auto generated low-level write-only Go binding around a klaytn contract.
type MultisigBaseTransactorRaw struct {
	Contract *MultisigBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMultisigBase creates a new instance of MultisigBase, bound to a specific deployed contract.
func NewMultisigBase(address common.Address, backend bind.ContractBackend) (*MultisigBase, error) {
	contract, err := bindMultisigBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MultisigBase{MultisigBaseCaller: MultisigBaseCaller{contract: contract}, MultisigBaseTransactor: MultisigBaseTransactor{contract: contract}, MultisigBaseFilterer: MultisigBaseFilterer{contract: contract}}, nil
}

// NewMultisigBaseCaller creates a new read-only instance of MultisigBase, bound to a specific deployed contract.
func NewMultisigBaseCaller(address common.Address, caller bind.ContractCaller) (*MultisigBaseCaller, error) {
	contract, err := bindMultisigBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseCaller{contract: contract}, nil
}

// NewMultisigBaseTransactor creates a new write-only instance of MultisigBase, bound to a specific deployed contract.
func NewMultisigBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*MultisigBaseTransactor, error) {
	contract, err := bindMultisigBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseTransactor{contract: contract}, nil
}

// NewMultisigBaseFilterer creates a new log filterer instance of MultisigBase, bound to a specific deployed contract.
func NewMultisigBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*MultisigBaseFilterer, error) {
	contract, err := bindMultisigBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseFilterer{contract: contract}, nil
}

// bindMultisigBase binds a generic wrapper to an already deployed contract.
func bindMultisigBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MultisigBaseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MultisigBase *MultisigBaseRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MultisigBase.Contract.MultisigBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MultisigBase *MultisigBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultisigBase.Contract.MultisigBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MultisigBase *MultisigBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultisigBase.Contract.MultisigBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MultisigBase *MultisigBaseCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MultisigBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MultisigBase *MultisigBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultisigBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MultisigBase *MultisigBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultisigBase.Contract.contract.Transact(opts, method, params...)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() constant returns(uint256)
func (_MultisigBase *MultisigBaseCaller) MAXADMIN(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MultisigBase.contract.Call(opts, out, "MAX_ADMIN")
	return *ret0, err
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() constant returns(uint256)
func (_MultisigBase *MultisigBaseSession) MAXADMIN() (*big.Int, error) {
	return _MultisigBase.Contract.MAXADMIN(&_MultisigBase.CallOpts)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() constant returns(uint256)
func (_MultisigBase *MultisigBaseCallerSession) MAXADMIN() (*big.Int, error) {
	return _MultisigBase.Contract.MAXADMIN(&_MultisigBase.CallOpts)
}

// GetAdminInfo is a free data retrieval call binding the contract method 0xc3d5fd39.
//
// Solidity: function getAdminInfo() constant returns(address[])
func (_MultisigBase *MultisigBaseCaller) GetAdminInfo(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _MultisigBase.contract.Call(opts, out, "getAdminInfo")
	return *ret0, err
}

// GetAdminInfo is a free data retrieval call binding the contract method 0xc3d5fd39.
//
// Solidity: function getAdminInfo() constant returns(address[])
func (_MultisigBase *MultisigBaseSession) GetAdminInfo() ([]common.Address, error) {
	return _MultisigBase.Contract.GetAdminInfo(&_MultisigBase.CallOpts)
}

// GetAdminInfo is a free data retrieval call binding the contract method 0xc3d5fd39.
//
// Solidity: function getAdminInfo() constant returns(address[])
func (_MultisigBase *MultisigBaseCallerSession) GetAdminInfo() ([]common.Address, error) {
	return _MultisigBase.Contract.GetAdminInfo(&_MultisigBase.CallOpts)
}

// GetRequestIndexes is a free data retrieval call binding the contract method 0x1e482f82.
//
// Solidity: function getRequestIndexes(_from uint256, _to uint256, _pending bool, _executed bool, _canceled bool) constant returns(uint256[])
func (_MultisigBase *MultisigBaseCaller) GetRequestIndexes(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _pending bool, _executed bool, _canceled bool) ([]*big.Int, error) {
	var (
		ret0 = new([]*big.Int)
	)
	out := ret0
	err := _MultisigBase.contract.Call(opts, out, "getRequestIndexes", _from, _to, _pending, _executed, _canceled)
	return *ret0, err
}

// GetRequestIndexes is a free data retrieval call binding the contract method 0x1e482f82.
//
// Solidity: function getRequestIndexes(_from uint256, _to uint256, _pending bool, _executed bool, _canceled bool) constant returns(uint256[])
func (_MultisigBase *MultisigBaseSession) GetRequestIndexes(_from *big.Int, _to *big.Int, _pending bool, _executed bool, _canceled bool) ([]*big.Int, error) {
	return _MultisigBase.Contract.GetRequestIndexes(&_MultisigBase.CallOpts, _from, _to, _pending, _executed, _canceled)
}

// GetRequestIndexes is a free data retrieval call binding the contract method 0x1e482f82.
//
// Solidity: function getRequestIndexes(_from uint256, _to uint256, _pending bool, _executed bool, _canceled bool) constant returns(uint256[])
func (_MultisigBase *MultisigBaseCallerSession) GetRequestIndexes(_from *big.Int, _to *big.Int, _pending bool, _executed bool, _canceled bool) ([]*big.Int, error) {
	return _MultisigBase.Contract.GetRequestIndexes(&_MultisigBase.CallOpts, _from, _to, _pending, _executed, _canceled)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(_index uint256) constant returns(address, uint256, bytes, uint256, bool, bool, bool)
func (_MultisigBase *MultisigBaseCaller) GetRequestInfo(opts *bind.CallOpts, _index *big.Int) (common.Address, *big.Int, []byte, *big.Int, bool, bool, bool, error) {
	var (
		ret0 = new(common.Address)
		ret1 = new(*big.Int)
		ret2 = new([]byte)
		ret3 = new(*big.Int)
		ret4 = new(bool)
		ret5 = new(bool)
		ret6 = new(bool)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
		ret5,
		ret6,
	}
	err := _MultisigBase.contract.Call(opts, out, "getRequestInfo", _index)
	return *ret0, *ret1, *ret2, *ret3, *ret4, *ret5, *ret6, err
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(_index uint256) constant returns(address, uint256, bytes, uint256, bool, bool, bool)
func (_MultisigBase *MultisigBaseSession) GetRequestInfo(_index *big.Int) (common.Address, *big.Int, []byte, *big.Int, bool, bool, bool, error) {
	return _MultisigBase.Contract.GetRequestInfo(&_MultisigBase.CallOpts, _index)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(_index uint256) constant returns(address, uint256, bytes, uint256, bool, bool, bool)
func (_MultisigBase *MultisigBaseCallerSession) GetRequestInfo(_index *big.Int) (common.Address, *big.Int, []byte, *big.Int, bool, bool, bool, error) {
	return _MultisigBase.Contract.GetRequestInfo(&_MultisigBase.CallOpts, _index)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() constant returns(uint256)
func (_MultisigBase *MultisigBaseCaller) RequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MultisigBase.contract.Call(opts, out, "requestCount")
	return *ret0, err
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() constant returns(uint256)
func (_MultisigBase *MultisigBaseSession) RequestCount() (*big.Int, error) {
	return _MultisigBase.Contract.RequestCount(&_MultisigBase.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() constant returns(uint256)
func (_MultisigBase *MultisigBaseCallerSession) RequestCount() (*big.Int, error) {
	return _MultisigBase.Contract.RequestCount(&_MultisigBase.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() constant returns(uint256)
func (_MultisigBase *MultisigBaseCaller) Requirement(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MultisigBase.contract.Call(opts, out, "requirement")
	return *ret0, err
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() constant returns(uint256)
func (_MultisigBase *MultisigBaseSession) Requirement() (*big.Int, error) {
	return _MultisigBase.Contract.Requirement(&_MultisigBase.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() constant returns(uint256)
func (_MultisigBase *MultisigBaseCallerSession) Requirement() (*big.Int, error) {
	return _MultisigBase.Contract.Requirement(&_MultisigBase.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(_admin address) returns()
func (_MultisigBase *MultisigBaseTransactor) AddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "addAdmin", _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(_admin address) returns()
func (_MultisigBase *MultisigBaseSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _MultisigBase.Contract.AddAdmin(&_MultisigBase.TransactOpts, _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(_admin address) returns()
func (_MultisigBase *MultisigBaseTransactorSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _MultisigBase.Contract.AddAdmin(&_MultisigBase.TransactOpts, _admin)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0xa6b2c437.
//
// Solidity: function confirmRequest(_index uint256) returns()
func (_MultisigBase *MultisigBaseTransactor) ConfirmRequest(opts *bind.TransactOpts, _index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "confirmRequest", _index)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0xa6b2c437.
//
// Solidity: function confirmRequest(_index uint256) returns()
func (_MultisigBase *MultisigBaseSession) ConfirmRequest(_index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.ConfirmRequest(&_MultisigBase.TransactOpts, _index)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0xa6b2c437.
//
// Solidity: function confirmRequest(_index uint256) returns()
func (_MultisigBase *MultisigBaseTransactorSession) ConfirmRequest(_index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.ConfirmRequest(&_MultisigBase.TransactOpts, _index)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(_admin address) returns()
func (_MultisigBase *MultisigBaseTransactor) DeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "deleteAdmin", _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(_admin address) returns()
func (_MultisigBase *MultisigBaseSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _MultisigBase.Contract.DeleteAdmin(&_MultisigBase.TransactOpts, _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(_admin address) returns()
func (_MultisigBase *MultisigBaseTransactorSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _MultisigBase.Contract.DeleteAdmin(&_MultisigBase.TransactOpts, _admin)
}

// ExecuteRequest is a paid mutator transaction binding the contract method 0x6e417c69.
//
// Solidity: function executeRequest(_index uint256) returns()
func (_MultisigBase *MultisigBaseTransactor) ExecuteRequest(opts *bind.TransactOpts, _index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "executeRequest", _index)
}

// ExecuteRequest is a paid mutator transaction binding the contract method 0x6e417c69.
//
// Solidity: function executeRequest(_index uint256) returns()
func (_MultisigBase *MultisigBaseSession) ExecuteRequest(_index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.ExecuteRequest(&_MultisigBase.TransactOpts, _index)
}

// ExecuteRequest is a paid mutator transaction binding the contract method 0x6e417c69.
//
// Solidity: function executeRequest(_index uint256) returns()
func (_MultisigBase *MultisigBaseTransactorSession) ExecuteRequest(_index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.ExecuteRequest(&_MultisigBase.TransactOpts, _index)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(_index uint256) returns()
func (_MultisigBase *MultisigBaseTransactor) RevokeConfirmation(opts *bind.TransactOpts, _index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "revokeConfirmation", _index)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(_index uint256) returns()
func (_MultisigBase *MultisigBaseSession) RevokeConfirmation(_index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.RevokeConfirmation(&_MultisigBase.TransactOpts, _index)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(_index uint256) returns()
func (_MultisigBase *MultisigBaseTransactorSession) RevokeConfirmation(_index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.RevokeConfirmation(&_MultisigBase.TransactOpts, _index)
}

// SubmitRequest is a paid mutator transaction binding the contract method 0xa2320f03.
//
// Solidity: function submitRequest(_to address, _value uint256, _data bytes) returns()
func (_MultisigBase *MultisigBaseTransactor) SubmitRequest(opts *bind.TransactOpts, _to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "submitRequest", _to, _value, _data)
}

// SubmitRequest is a paid mutator transaction binding the contract method 0xa2320f03.
//
// Solidity: function submitRequest(_to address, _value uint256, _data bytes) returns()
func (_MultisigBase *MultisigBaseSession) SubmitRequest(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _MultisigBase.Contract.SubmitRequest(&_MultisigBase.TransactOpts, _to, _value, _data)
}

// SubmitRequest is a paid mutator transaction binding the contract method 0xa2320f03.
//
// Solidity: function submitRequest(_to address, _value uint256, _data bytes) returns()
func (_MultisigBase *MultisigBaseTransactorSession) SubmitRequest(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _MultisigBase.Contract.SubmitRequest(&_MultisigBase.TransactOpts, _to, _value, _data)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(_requirement uint256) returns()
func (_MultisigBase *MultisigBaseTransactor) UpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "updateRequirement", _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(_requirement uint256) returns()
func (_MultisigBase *MultisigBaseSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.UpdateRequirement(&_MultisigBase.TransactOpts, _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(_requirement uint256) returns()
func (_MultisigBase *MultisigBaseTransactorSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.UpdateRequirement(&_MultisigBase.TransactOpts, _requirement)
}

// MultisigBaseAddAdminIterator is returned from FilterAddAdmin and is used to iterate over the raw logs and unpacked data for AddAdmin events raised by the MultisigBase contract.
type MultisigBaseAddAdminIterator struct {
	Event *MultisigBaseAddAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseAddAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseAddAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseAddAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseAddAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseAddAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseAddAdmin represents a AddAdmin event raised by the MultisigBase contract.
type MultisigBaseAddAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddAdmin is a free log retrieval operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: e AddAdmin(admin indexed address)
func (_MultisigBase *MultisigBaseFilterer) FilterAddAdmin(opts *bind.FilterOpts, admin []common.Address) (*MultisigBaseAddAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseAddAdminIterator{contract: _MultisigBase.contract, event: "AddAdmin", logs: logs, sub: sub}, nil
}

// WatchAddAdmin is a free log subscription operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: e AddAdmin(admin indexed address)
func (_MultisigBase *MultisigBaseFilterer) WatchAddAdmin(opts *bind.WatchOpts, sink chan<- *MultisigBaseAddAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseAddAdmin)
				if err := _MultisigBase.contract.UnpackLog(event, "AddAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseCancelRequestIterator is returned from FilterCancelRequest and is used to iterate over the raw logs and unpacked data for CancelRequest events raised by the MultisigBase contract.
type MultisigBaseCancelRequestIterator struct {
	Event *MultisigBaseCancelRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseCancelRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseCancelRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseCancelRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseCancelRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseCancelRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseCancelRequest represents a CancelRequest event raised by the MultisigBase contract.
type MultisigBaseCancelRequest struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCancelRequest is a free log retrieval operation binding the contract event 0x25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce1.
//
// Solidity: e CancelRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterCancelRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*MultisigBaseCancelRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "CancelRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseCancelRequestIterator{contract: _MultisigBase.contract, event: "CancelRequest", logs: logs, sub: sub}, nil
}

// WatchCancelRequest is a free log subscription operation binding the contract event 0x25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce1.
//
// Solidity: e CancelRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchCancelRequest(opts *bind.WatchOpts, sink chan<- *MultisigBaseCancelRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "CancelRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseCancelRequest)
				if err := _MultisigBase.contract.UnpackLog(event, "CancelRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseConfirmRequestIterator is returned from FilterConfirmRequest and is used to iterate over the raw logs and unpacked data for ConfirmRequest events raised by the MultisigBase contract.
type MultisigBaseConfirmRequestIterator struct {
	Event *MultisigBaseConfirmRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseConfirmRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseConfirmRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseConfirmRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseConfirmRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseConfirmRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseConfirmRequest represents a ConfirmRequest event raised by the MultisigBase contract.
type MultisigBaseConfirmRequest struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterConfirmRequest is a free log retrieval operation binding the contract event 0x4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042.
//
// Solidity: e ConfirmRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterConfirmRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*MultisigBaseConfirmRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "ConfirmRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseConfirmRequestIterator{contract: _MultisigBase.contract, event: "ConfirmRequest", logs: logs, sub: sub}, nil
}

// WatchConfirmRequest is a free log subscription operation binding the contract event 0x4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042.
//
// Solidity: e ConfirmRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchConfirmRequest(opts *bind.WatchOpts, sink chan<- *MultisigBaseConfirmRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "ConfirmRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseConfirmRequest)
				if err := _MultisigBase.contract.UnpackLog(event, "ConfirmRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseDeleteAdminIterator is returned from FilterDeleteAdmin and is used to iterate over the raw logs and unpacked data for DeleteAdmin events raised by the MultisigBase contract.
type MultisigBaseDeleteAdminIterator struct {
	Event *MultisigBaseDeleteAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseDeleteAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseDeleteAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseDeleteAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseDeleteAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseDeleteAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseDeleteAdmin represents a DeleteAdmin event raised by the MultisigBase contract.
type MultisigBaseDeleteAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDeleteAdmin is a free log retrieval operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: e DeleteAdmin(admin indexed address)
func (_MultisigBase *MultisigBaseFilterer) FilterDeleteAdmin(opts *bind.FilterOpts, admin []common.Address) (*MultisigBaseDeleteAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseDeleteAdminIterator{contract: _MultisigBase.contract, event: "DeleteAdmin", logs: logs, sub: sub}, nil
}

// WatchDeleteAdmin is a free log subscription operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: e DeleteAdmin(admin indexed address)
func (_MultisigBase *MultisigBaseFilterer) WatchDeleteAdmin(opts *bind.WatchOpts, sink chan<- *MultisigBaseDeleteAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseDeleteAdmin)
				if err := _MultisigBase.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseDeployMultisigContractIterator is returned from FilterDeployMultisigContract and is used to iterate over the raw logs and unpacked data for DeployMultisigContract events raised by the MultisigBase contract.
type MultisigBaseDeployMultisigContractIterator struct {
	Event *MultisigBaseDeployMultisigContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseDeployMultisigContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseDeployMultisigContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseDeployMultisigContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseDeployMultisigContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseDeployMultisigContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseDeployMultisigContract represents a DeployMultisigContract event raised by the MultisigBase contract.
type MultisigBaseDeployMultisigContract struct {
	AdminList   []common.Address
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDeployMultisigContract is a free log retrieval operation binding the contract event 0x14aa44bb5ce6609639302921fc20d0c5c26dc52d8fbea76c78a2e7d6d8b047f5.
//
// Solidity: e DeployMultisigContract(adminList address[], requirement uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterDeployMultisigContract(opts *bind.FilterOpts) (*MultisigBaseDeployMultisigContractIterator, error) {

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "DeployMultisigContract")
	if err != nil {
		return nil, err
	}
	return &MultisigBaseDeployMultisigContractIterator{contract: _MultisigBase.contract, event: "DeployMultisigContract", logs: logs, sub: sub}, nil
}

// WatchDeployMultisigContract is a free log subscription operation binding the contract event 0x14aa44bb5ce6609639302921fc20d0c5c26dc52d8fbea76c78a2e7d6d8b047f5.
//
// Solidity: e DeployMultisigContract(adminList address[], requirement uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchDeployMultisigContract(opts *bind.WatchOpts, sink chan<- *MultisigBaseDeployMultisigContract) (event.Subscription, error) {

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "DeployMultisigContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseDeployMultisigContract)
				if err := _MultisigBase.contract.UnpackLog(event, "DeployMultisigContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseExecuteRequestIterator is returned from FilterExecuteRequest and is used to iterate over the raw logs and unpacked data for ExecuteRequest events raised by the MultisigBase contract.
type MultisigBaseExecuteRequestIterator struct {
	Event *MultisigBaseExecuteRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseExecuteRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseExecuteRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseExecuteRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseExecuteRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseExecuteRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseExecuteRequest represents a ExecuteRequest event raised by the MultisigBase contract.
type MultisigBaseExecuteRequest struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequest is a free log retrieval operation binding the contract event 0x55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee.
//
// Solidity: e ExecuteRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterExecuteRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*MultisigBaseExecuteRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "ExecuteRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseExecuteRequestIterator{contract: _MultisigBase.contract, event: "ExecuteRequest", logs: logs, sub: sub}, nil
}

// WatchExecuteRequest is a free log subscription operation binding the contract event 0x55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee.
//
// Solidity: e ExecuteRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchExecuteRequest(opts *bind.WatchOpts, sink chan<- *MultisigBaseExecuteRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "ExecuteRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseExecuteRequest)
				if err := _MultisigBase.contract.UnpackLog(event, "ExecuteRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseExecuteRequestFailureIterator is returned from FilterExecuteRequestFailure and is used to iterate over the raw logs and unpacked data for ExecuteRequestFailure events raised by the MultisigBase contract.
type MultisigBaseExecuteRequestFailureIterator struct {
	Event *MultisigBaseExecuteRequestFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseExecuteRequestFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseExecuteRequestFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseExecuteRequestFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseExecuteRequestFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseExecuteRequestFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseExecuteRequestFailure represents a ExecuteRequestFailure event raised by the MultisigBase contract.
type MultisigBaseExecuteRequestFailure struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestFailure is a free log retrieval operation binding the contract event 0x5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f7.
//
// Solidity: e ExecuteRequestFailure(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterExecuteRequestFailure(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*MultisigBaseExecuteRequestFailureIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "ExecuteRequestFailure", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseExecuteRequestFailureIterator{contract: _MultisigBase.contract, event: "ExecuteRequestFailure", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestFailure is a free log subscription operation binding the contract event 0x5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f7.
//
// Solidity: e ExecuteRequestFailure(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchExecuteRequestFailure(opts *bind.WatchOpts, sink chan<- *MultisigBaseExecuteRequestFailure, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "ExecuteRequestFailure", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseExecuteRequestFailure)
				if err := _MultisigBase.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseRevokeConfirmationIterator is returned from FilterRevokeConfirmation and is used to iterate over the raw logs and unpacked data for RevokeConfirmation events raised by the MultisigBase contract.
type MultisigBaseRevokeConfirmationIterator struct {
	Event *MultisigBaseRevokeConfirmation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseRevokeConfirmationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseRevokeConfirmation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseRevokeConfirmation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseRevokeConfirmationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseRevokeConfirmationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseRevokeConfirmation represents a RevokeConfirmation event raised by the MultisigBase contract.
type MultisigBaseRevokeConfirmation struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRevokeConfirmation is a free log retrieval operation binding the contract event 0x0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17.
//
// Solidity: e RevokeConfirmation(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterRevokeConfirmation(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*MultisigBaseRevokeConfirmationIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "RevokeConfirmation", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseRevokeConfirmationIterator{contract: _MultisigBase.contract, event: "RevokeConfirmation", logs: logs, sub: sub}, nil
}

// WatchRevokeConfirmation is a free log subscription operation binding the contract event 0x0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17.
//
// Solidity: e RevokeConfirmation(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchRevokeConfirmation(opts *bind.WatchOpts, sink chan<- *MultisigBaseRevokeConfirmation, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "RevokeConfirmation", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseRevokeConfirmation)
				if err := _MultisigBase.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseSubmitRequestIterator is returned from FilterSubmitRequest and is used to iterate over the raw logs and unpacked data for SubmitRequest events raised by the MultisigBase contract.
type MultisigBaseSubmitRequestIterator struct {
	Event *MultisigBaseSubmitRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseSubmitRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseSubmitRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseSubmitRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseSubmitRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseSubmitRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseSubmitRequest represents a SubmitRequest event raised by the MultisigBase contract.
type MultisigBaseSubmitRequest struct {
	Index     *big.Int
	From      common.Address
	To        common.Address
	Value     *big.Int
	Data      []byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSubmitRequest is a free log retrieval operation binding the contract event 0xd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb.
//
// Solidity: e SubmitRequest(index indexed uint256, from indexed address, to address, value uint256, data bytes, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterSubmitRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*MultisigBaseSubmitRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "SubmitRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseSubmitRequestIterator{contract: _MultisigBase.contract, event: "SubmitRequest", logs: logs, sub: sub}, nil
}

// WatchSubmitRequest is a free log subscription operation binding the contract event 0xd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb.
//
// Solidity: e SubmitRequest(index indexed uint256, from indexed address, to address, value uint256, data bytes, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchSubmitRequest(opts *bind.WatchOpts, sink chan<- *MultisigBaseSubmitRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "SubmitRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseSubmitRequest)
				if err := _MultisigBase.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseUpdateRequirementIterator is returned from FilterUpdateRequirement and is used to iterate over the raw logs and unpacked data for UpdateRequirement events raised by the MultisigBase contract.
type MultisigBaseUpdateRequirementIterator struct {
	Event *MultisigBaseUpdateRequirement // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseUpdateRequirementIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseUpdateRequirement)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseUpdateRequirement)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseUpdateRequirementIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseUpdateRequirementIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseUpdateRequirement represents a UpdateRequirement event raised by the MultisigBase contract.
type MultisigBaseUpdateRequirement struct {
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequirement is a free log retrieval operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: e UpdateRequirement(requirement uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterUpdateRequirement(opts *bind.FilterOpts) (*MultisigBaseUpdateRequirementIterator, error) {

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return &MultisigBaseUpdateRequirementIterator{contract: _MultisigBase.contract, event: "UpdateRequirement", logs: logs, sub: sub}, nil
}

// WatchUpdateRequirement is a free log subscription operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: e UpdateRequirement(requirement uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchUpdateRequirement(opts *bind.WatchOpts, sink chan<- *MultisigBaseUpdateRequirement) (event.Subscription, error) {

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseUpdateRequirement)
				if err := _MultisigBase.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SafeMathABI is the input ABI used to generate the binding from.
const SafeMathABI = "[]"

// SafeMathBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const SafeMathBinRuntime = `0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582054cbbad2a67f5e32dbbc74ce1c32f2ba6dd0599a799171e457b1c3c4ea7751440029`

// SafeMathBin is the compiled bytecode used for deploying new contracts.
const SafeMathBin = `0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582054cbbad2a67f5e32dbbc74ce1c32f2ba6dd0599a799171e457b1c3c4ea7751440029`

// DeploySafeMath deploys a new klaytn contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around a klaytn contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around a klaytn contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around a klaytn contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around a klaytn contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around a klaytn contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around a klaytn contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around a klaytn contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around a klaytn contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around a klaytn contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around a klaytn contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}

// BranchContractABI is the input ABI used to generate the binding from.
const BranchContractABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"getAllAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAddressInNiceForm\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAddressCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// BranchContractBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const BranchContractBinRuntime = `0x`

// BranchContractBin is the compiled bytecode used for deploying new contracts.
const BranchContractBin = `0x`

// DeployBranchContract deploys a new klaytn contract, binding an instance of BranchContract to it.
func DeployBranchContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BranchContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BranchContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BranchContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BranchContract{BranchContractCaller: BranchContractCaller{contract: contract}, BranchContractTransactor: BranchContractTransactor{contract: contract}, BranchContractFilterer: BranchContractFilterer{contract: contract}}, nil
}

// BranchContract is an auto generated Go binding around a klaytn contract.
type BranchContract struct {
	BranchContractCaller     // Read-only binding to the contract
	BranchContractTransactor // Write-only binding to the contract
	BranchContractFilterer   // Log filterer for contract events
}

// BranchContractCaller is an auto generated read-only Go binding around a klaytn contract.
type BranchContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BranchContractTransactor is an auto generated write-only Go binding around a klaytn contract.
type BranchContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BranchContractFilterer is an auto generated log filtering Go binding around a klaytn contract events.
type BranchContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BranchContractSession is an auto generated Go binding around a klaytn contract,
// with pre-set call and transact options.
type BranchContractSession struct {
	Contract     *BranchContract   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BranchContractCallerSession is an auto generated read-only Go binding around a klaytn contract,
// with pre-set call options.
type BranchContractCallerSession struct {
	Contract *BranchContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// BranchContractTransactorSession is an auto generated write-only Go binding around a klaytn contract,
// with pre-set transact options.
type BranchContractTransactorSession struct {
	Contract     *BranchContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// BranchContractRaw is an auto generated low-level Go binding around a klaytn contract.
type BranchContractRaw struct {
	Contract *BranchContract // Generic contract binding to access the raw methods on
}

// BranchContractCallerRaw is an auto generated low-level read-only Go binding around a klaytn contract.
type BranchContractCallerRaw struct {
	Contract *BranchContractCaller // Generic read-only contract binding to access the raw methods on
}

// BranchContractTransactorRaw is an auto generated low-level write-only Go binding around a klaytn contract.
type BranchContractTransactorRaw struct {
	Contract *BranchContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBranchContract creates a new instance of BranchContract, bound to a specific deployed contract.
func NewBranchContract(address common.Address, backend bind.ContractBackend) (*BranchContract, error) {
	contract, err := bindBranchContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BranchContract{BranchContractCaller: BranchContractCaller{contract: contract}, BranchContractTransactor: BranchContractTransactor{contract: contract}, BranchContractFilterer: BranchContractFilterer{contract: contract}}, nil
}

// NewBranchContractCaller creates a new read-only instance of BranchContract, bound to a specific deployed contract.
func NewBranchContractCaller(address common.Address, caller bind.ContractCaller) (*BranchContractCaller, error) {
	contract, err := bindBranchContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BranchContractCaller{contract: contract}, nil
}

// NewBranchContractTransactor creates a new write-only instance of BranchContract, bound to a specific deployed contract.
func NewBranchContractTransactor(address common.Address, transactor bind.ContractTransactor) (*BranchContractTransactor, error) {
	contract, err := bindBranchContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BranchContractTransactor{contract: contract}, nil
}

// NewBranchContractFilterer creates a new log filterer instance of BranchContract, bound to a specific deployed contract.
func NewBranchContractFilterer(address common.Address, filterer bind.ContractFilterer) (*BranchContractFilterer, error) {
	contract, err := bindBranchContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BranchContractFilterer{contract: contract}, nil
}

// bindBranchContract binds a generic wrapper to an already deployed contract.
func bindBranchContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BranchContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BranchContract *BranchContractRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BranchContract.Contract.BranchContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BranchContract *BranchContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BranchContract.Contract.BranchContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BranchContract *BranchContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BranchContract.Contract.BranchContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BranchContract *BranchContractCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BranchContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BranchContract *BranchContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BranchContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BranchContract *BranchContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BranchContract.Contract.contract.Transact(opts, method, params...)
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() constant returns(uint8[], address[])
func (_BranchContract *BranchContractCaller) GetAllAddress(opts *bind.CallOpts) ([]uint8, []common.Address, error) {
	var (
		ret0 = new([]uint8)
		ret1 = new([]common.Address)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _BranchContract.contract.Call(opts, out, "getAllAddress")
	return *ret0, *ret1, err
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() constant returns(uint8[], address[])
func (_BranchContract *BranchContractSession) GetAllAddress() ([]uint8, []common.Address, error) {
	return _BranchContract.Contract.GetAllAddress(&_BranchContract.CallOpts)
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() constant returns(uint8[], address[])
func (_BranchContract *BranchContractCallerSession) GetAllAddress() ([]uint8, []common.Address, error) {
	return _BranchContract.Contract.GetAllAddress(&_BranchContract.CallOpts)
}

// GetAllAddressCount is a free data retrieval call binding the contract method 0xe024c2d0.
//
// Solidity: function getAllAddressCount() constant returns(uint256)
func (_BranchContract *BranchContractCaller) GetAllAddressCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BranchContract.contract.Call(opts, out, "getAllAddressCount")
	return *ret0, err
}

// GetAllAddressCount is a free data retrieval call binding the contract method 0xe024c2d0.
//
// Solidity: function getAllAddressCount() constant returns(uint256)
func (_BranchContract *BranchContractSession) GetAllAddressCount() (*big.Int, error) {
	return _BranchContract.Contract.GetAllAddressCount(&_BranchContract.CallOpts)
}

// GetAllAddressCount is a free data retrieval call binding the contract method 0xe024c2d0.
//
// Solidity: function getAllAddressCount() constant returns(uint256)
func (_BranchContract *BranchContractCallerSession) GetAllAddressCount() (*big.Int, error) {
	return _BranchContract.Contract.GetAllAddressCount(&_BranchContract.CallOpts)
}

// GetAllAddressInNiceForm is a free data retrieval call binding the contract method 0xd39c3e44.
//
// Solidity: function getAllAddressInNiceForm() constant returns(address[], address[], address[], address, address)
func (_BranchContract *BranchContractCaller) GetAllAddressInNiceForm(opts *bind.CallOpts) ([]common.Address, []common.Address, []common.Address, common.Address, common.Address, error) {
	var (
		ret0 = new([]common.Address)
		ret1 = new([]common.Address)
		ret2 = new([]common.Address)
		ret3 = new(common.Address)
		ret4 = new(common.Address)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
	}
	err := _BranchContract.contract.Call(opts, out, "getAllAddressInNiceForm")
	return *ret0, *ret1, *ret2, *ret3, *ret4, err
}

// GetAllAddressInNiceForm is a free data retrieval call binding the contract method 0xd39c3e44.
//
// Solidity: function getAllAddressInNiceForm() constant returns(address[], address[], address[], address, address)
func (_BranchContract *BranchContractSession) GetAllAddressInNiceForm() ([]common.Address, []common.Address, []common.Address, common.Address, common.Address, error) {
	return _BranchContract.Contract.GetAllAddressInNiceForm(&_BranchContract.CallOpts)
}

// GetAllAddressInNiceForm is a free data retrieval call binding the contract method 0xd39c3e44.
//
// Solidity: function getAllAddressInNiceForm() constant returns(address[], address[], address[], address, address)
func (_BranchContract *BranchContractCallerSession) GetAllAddressInNiceForm() ([]common.Address, []common.Address, []common.Address, common.Address, common.Address, error) {
	return _BranchContract.Contract.GetAllAddressInNiceForm(&_BranchContract.CallOpts)
}
