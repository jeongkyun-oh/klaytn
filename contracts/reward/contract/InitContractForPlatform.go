// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"math/big"
	"strings"

	"github.com/ground-x/klaytn"
	"github.com/ground-x/klaytn/accounts/abi"
	"github.com/ground-x/klaytn/accounts/abi/bind"
	"github.com/ground-x/klaytn/blockchain/types"
	"github.com/ground-x/klaytn/common"
	"github.com/ground-x/klaytn/event"
)

// InitContractABI is the input ABI used to generate the binding from.
const InitContractABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"name\":\"To\",\"type\":\"address\"},{\"name\":\"Value\",\"type\":\"uint256\"},{\"name\":\"Data\",\"type\":\"bytes\"},{\"name\":\"ConfirmationCount\",\"type\":\"uint256\"},{\"name\":\"Pending\",\"type\":\"bool\"},{\"name\":\"Executed\",\"type\":\"bool\"},{\"name\":\"Canceled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_branchName\",\"type\":\"string\"},{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"unregisterBranchContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"},{\"name\":\"_pending\",\"type\":\"bool\"},{\"name\":\"_executed\",\"type\":\"bool\"},{\"name\":\"_canceled\",\"type\":\"bool\"}],\"name\":\"getRequestIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"deleteAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastClearedIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_branchAddress\",\"type\":\"address\"},{\"name\":\"_addressType\",\"type\":\"uint256\"},{\"name\":\"_prevLeafAddress\",\"type\":\"address\"},{\"name\":\"_curLeafAddress\",\"type\":\"address\"},{\"name\":\"_extraLeafAddress\",\"type\":\"address\"}],\"name\":\"updateLeafContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_branchAddress\",\"type\":\"address\"},{\"name\":\"_addressType\",\"type\":\"uint256\"},{\"name\":\"_leafAddress\",\"type\":\"address\"}],\"name\":\"unregisterLeafContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"branchContractCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"executeRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_branchName\",\"type\":\"string\"},{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"registerBranchContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_branchName\",\"type\":\"string\"}],\"name\":\"completeInitialization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"confirmRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_branchAddress\",\"type\":\"address\"},{\"name\":\"_addressType\",\"type\":\"uint256\"},{\"name\":\"_leafAddress\",\"type\":\"address[]\"}],\"name\":\"registerLeafContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBranchInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_branchName\",\"type\":\"string\"},{\"name\":\"_prevAddress\",\"type\":\"address\"},{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateBranchContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"updateRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminList\",\"type\":\"address[]\"},{\"name\":\"_requirement\",\"type\":\"uint256\"},{\"name\":\"_branchName\",\"type\":\"string\"},{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllBranchAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"dummyArray\",\"type\":\"address[]\"},{\"name\":\"dummyUint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adminList\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"branchName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"RegisterBranchContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"branchName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"UnregisterBranchContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"branchName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"prevAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"curAddress\",\"type\":\"address\"}],\"name\":\"UpdateBranchContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"branchAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addressType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafAddress\",\"type\":\"address[]\"}],\"name\":\"RegisterLeafContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"branchAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addressType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafAddress\",\"type\":\"address\"}],\"name\":\"UnregisterLeafContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"branchAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addressType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevLeafAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"curLeafAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"extraLeafAddress\",\"type\":\"address\"}],\"name\":\"UpdateLeafContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"branchName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"CompleteInitialization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adminList\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"DeployMultisigContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"DeleteAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"UpdateRequirement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ClearRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SubmitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ConfirmRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CancelRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExecuteRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExecuteRequestFailure\",\"type\":\"event\"}]"

// InitContractBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const InitContractBinRuntime = `0x6080604052600436106101505763ffffffff60e060020a6000350416630b81604581146101555780630d11f967146102225780631e482f821461028d57806320ea8d861461030757806327e1f7df1461031f5780632d9c3439146103405780632f0bcc341461036757806332be31001461039e578063392e53cd146103c95780634f97638f146103f2578063545d0e991461040757806358d658801461041c5780635badbe4c146104315780636e417c6914610446578063704802751461045e578063715b208b1461047f5780637408b0dc1461052d5780639ed5724a14610591578063a2320f03146105b1578063a6b2c4371461061a578063b13fe92414610632578063b6cad6cd14610663578063b756393014610717578063c2c71c511461072c578063c3d5fd39146107a0578063c47afb3a146107b5578063c97a49b6146107cd578063fd7d4f6f14610871575b600080fd5b34801561016157600080fd5b5061016d600435610886565b60408051600160a060020a0389168152602080820189905260608201879052851515608083015284151560a083015283151560c083015260e0928201838152885193830193909352875191929161010084019189019080838360005b838110156101e15781810151838201526020016101c9565b50505050905090810190601f16801561020e5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561022e57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261028b95833595369560449491939091019190819084018382808284375094975050509235600160a060020a0316935061097f92505050565b005b34801561029957600080fd5b506102b7600435602435604435151560643515156084351515610cb3565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102f35781810151838201526020016102db565b505050509050019250505060405180910390f35b34801561031357600080fd5b5061028b600435610e90565b34801561032b57600080fd5b5061028b600160a060020a0360043516611072565b34801561034c57600080fd5b50610355611222565b60408051918252519081900360200190f35b34801561037357600080fd5b5061028b600160a060020a036004358116906024359060443581169060643581169060843516611228565b3480156103aa57600080fd5b5061028b600160a060020a0360043581169060243590604435166112a8565b3480156103d557600080fd5b506103de611316565b604080519115158252519081900360200190f35b3480156103fe57600080fd5b5061028b61131f565b34801561041357600080fd5b506103556113e5565b34801561042857600080fd5b506103556113eb565b34801561043d57600080fd5b506103556113f0565b34801561045257600080fd5b5061028b6004356113f6565b34801561046a57600080fd5b5061028b600160a060020a03600435166115de565b34801561048b57600080fd5b50610494611724565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156104d85781810151838201526020016104c0565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105175781810151838201526020016104ff565b5050505090500194505050505060405180910390f35b34801561053957600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261028b94369492936024939284019190819084018382808284375094975050509235600160a060020a03169350611b8f92505050565b34801561059d57600080fd5b5061028b60048035602481019101356120b5565b3480156105bd57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261028b948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506121d59650505050505050565b34801561062657600080fd5b5061028b600435612412565b34801561063e57600080fd5b5061028b60048035600160a060020a03169060248035916044359182019101356125c1565b34801561066f57600080fd5b5061067b60043561265b565b60405180806020018415151515815260200183600160a060020a0316600160a060020a03168152602001828103825285818151815260200191508051906020019080838360005b838110156106da5781810151838201526020016106c2565b50505050905090810190601f1680156107075780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561072357600080fd5b50610355612734565b34801561073857600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261028b95833595369560449491939091019190819084018382808284375094975050600160a060020a03853581169650602090950135909416935061273a92505050565b3480156107ac57600080fd5b506102b7612a95565b3480156107c157600080fd5b5061028b600435612af8565b3480156107d957600080fd5b506040805160206004803580820135838102808601850190965280855261028b9536959394602494938501929182918501908490808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b8a359b909a90999401975091955091820193509150819084018382808284375094975050509235600160a060020a03169350612b7f92505050565b34801561087d57600080fd5b506104946131eb565b60008181526005602090815260408083208054600180830154600484015460068501546002958601805488516101009682161587026000190190911697909704601f81018a90048a0288018a0190985287875289986060988a98899889988998600160a060020a03909216979196919460ff8084169592840481169462010000909404169291879183018282801561095f5780601f106109345761010080835404028352916020019161095f565b820191906000526020600020905b81548152906001019060200180831161094257829003601f168201915b505050505094509650965096509650965096509650919395979092949650565b80600160a060020a038116151561099557600080fd5b600160a060020a038216600090815260066020526040902054829060ff1615156109be57600080fd5b3330146109ca57600080fd5b600a5460ff1615156001146109de57600080fd5b600085815260086020526040902060010154600160a060020a03848116911614610a0757600080fd5b836040516020018082805190602001908083835b60208310610a3a5780518252601f199092019160209182019101610a1b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310610a9d5780518252601f199092019160209182019101610a7e565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600860008781526020019081526020016000206000016040516020018082805460018160011615610100020316600290048015610b425780601f10610b20576101008083540402835291820191610b42565b820191906000526020600020905b815481529060010190602001808311610b2e575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310610b855780518252601f199092019160209182019101610b66565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515610bc257600080fd5b600160a060020a0383166000818152600660209081526040808320805460ff19169055888352600882529182902082518981529283019390935260609082018181528354600260001960018316156101000201909116049183018290527f67785cf16c29d07570d5093a10f1bf680274ff9ddb015bb801999c18cd558fa49389939092889290608083019085908015610c9c5780601f10610c7157610100808354040283529160200191610c9c565b820191906000526020600020905b815481529060010190602001808311610c7f57829003601f168201915b505094505050505060405180910390a15050505050565b606060008082871580610cc857506002548810155b15610cd35760025497505b600092508891505b87821015610d8857600082815260056020526040902054600160a060020a031615801590610d20575060008281526005602052604090206006015460ff161515871515145b8015610d485750600082815260056020526040902060060154610100900460ff161515861515145b8015610d71575060008281526005602052604090206006015462010000900460ff161515851515145b15610d7d576001830192505b600190910190610cdb565b82604051908082528060200260200182016040528015610db2578160200160208202803883390190505b509050600092508891505b87821015610e8457600082815260056020526040902054600160a060020a031615801590610e02575060008281526005602052604090206006015460ff161515871515145b8015610e2a5750600082815260056020526040902060060154610100900460ff161515861515145b8015610e53575060008281526005602052604090206006015462010000900460ff161515851515145b15610e7957818184815181101515610e6757fe5b60209081029091010152600192909201915b600190910190610dbd565b98975050505050505050565b3360008181526004602052604090205460ff161515610eae57600080fd5b60008281526005602081815260408084203380865293019091529091205483919060ff161515610edd57600080fd5b6000848152600560205260409020600601548490610100900460ff1615610f0357600080fd5b600085815260056020526040902060060154859062010000900460ff1615610f2a57600080fd5b60008681526005602081815260408084203385528084018352908420805460ff19169055928990525260040154610f6890600163ffffffff6132f816565b6000878152600560209081526040918290206004019290925580514281529051339289927f0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17929081900390910190a36001546000878152600560205260409020600401541015610fef576000868152600560205260409020600601805460ff191660011790555b600086815260056020526040902060030154600160a060020a031633141561106a57600086815260056020908152604091829020600601805462ff000019166201000017905581514281529151339289927f25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce192918290030190a35b505050505050565b600033301461108057600080fd5b600160a060020a038216600090815260046020526040902054829060ff1615156110a957600080fd5b6000546110bd90600163ffffffff6132f816565b600154603282111580156110d15750818111155b80156110dc57508015155b80156110e757508115155b15156110f257600080fd5b600160a060020a0385166000908152600460205260408120805460ff1916905593505b600054600019018410156111cb5784600160a060020a031660008581548110151561113c57fe5b600091825260209091200154600160a060020a031614156111c05760008054600019810190811061116957fe5b60009182526020822001548154600160a060020a0390911691908690811061118d57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055506111cb565b600190930192611115565b6000805460001901906111de908261334b565b506111e761131f565b604051600160a060020a038616907f1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc256522090600090a25050505050565b60035481565b3360008181526006602052604090205460ff16151561124657600080fd5b60408051600160a060020a038089168252602082018890528087168284015280861660608301528416608082015290517f43341da6506b6e80e576b49a91bffc0dd90c6f218b6b19d753caf865a9a5caf49181900360a00190a1505050505050565b3360008181526006602052604090205460ff1615156112c657600080fd5b60408051600160a060020a0380871682526020820186905284168183015290517f58b09a47044d0872fa22b29a2c4d30639d1e6a48d8434efcb9f6994e1b3755e39181900360600190a150505050565b600a5460ff1681565b600033301461132d57600080fd5b506003545b6002548110156113a957600081815260056020526040902060060154610100900460ff1615801561137b575060008181526005602052604090206006015462010000900460ff16155b156113a1576000818152600560205260409020600601805462ff00001916620100001790555b600101611332565b6002546003556040805142815290517fb9ce9c85727b055bd75ed2418c65d65f31157821337419862d2042439d60168d9181900360200190a150565b60095481565b603281565b60025481565b3360008181526004602052604081205490919060ff16151561141757600080fd5b600083815260056020526040902060060154839060ff161561143857600080fd5b6000848152600560205260409020600601548490610100900460ff161561145e57600080fd5b600085815260056020526040902060060154859062010000900460ff161561148557600080fd5b60008681526005602090815260409182902060068101805461010061ff001990911681179091558154600180840154600280860180548951948116159096026000190190951604601f8101879004870283018701909752868252939a5061155395600160a060020a03909216949192909183908301828280156115495780601f1061151e57610100808354040283529160200191611549565b820191906000526020600020905b81548152906001019060200180831161152c57829003601f168201915b505050505061330f565b1561159457604080514281529051339188917f55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee9181900360200190a361106a565b604080514281529051339188917f5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f79181900360200190a350505050600601805461ff001916905550565b3330146115ea57600080fd5b600160a060020a038116600090815260046020526040902054819060ff161561161257600080fd5b81600160a060020a038116151561162857600080fd5b60005461163c90600163ffffffff61333216565b600154603282111580156116505750818111155b801561165b57508015155b801561166657508115155b151561167157600080fd5b600160a060020a0385166000818152600460205260408120805460ff19166001908117909155815490810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301805473ffffffffffffffffffffffffffffffffffffffff191690911790556116e961131f565b604051600160a060020a038616907fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba90600090a25050505050565b60608060006060600080606080606080600954604051908082528060200260200182016040528015611760578160200160208202803883390190505b509650600095505b60095486101561187c57600086815260086020908152604080832060010154600160a060020a03168352600690915290205460ff16156118715760008681526008602090815260408083206001015481517fe024c2d00000000000000000000000000000000000000000000000000000000081529151600160a060020a039091169363e024c2d093600480850194919392918390030190829087803b15801561181057600080fd5b505af1158015611824573d6000803e3d6000fd5b505050506040513d602081101561183a57600080fd5b5051875188908890811061184a57fe5b60209081029091010152865187908790811061186257fe5b90602001906020020151880197505b600190950194611768565b876040519080825280602002602001820160405280156118a6578160200160208202803883390190505b509350876040519080825280602002602001820160405280156118d3578160200160208202803883390190505b509250600095505b600954861015611b805786868151811015156118f357fe5b6020908102909101015115611b7557868681518110151561191057fe5b90602001906020020151604051908082528060200260200182016040528015611943578160200160208202803883390190505b509150868681518110151561195457fe5b90602001906020020151604051908082528060200260200182016040528015611987578160200160208202803883390190505b506000878152600860205260408082206001015481517f715b208b0000000000000000000000000000000000000000000000000000000081529151939450600160a060020a03169263715b208b9260048084019391929182900301818387803b1580156119f357600080fd5b505af1158015611a07573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015611a3057600080fd5b810190808051640100000000811115611a4857600080fd5b82016020810184811115611a5b57600080fd5b8151856020820283011164010000000082111715611a7857600080fd5b50509291906020018051640100000000811115611a9457600080fd5b82016020810184811115611aa757600080fd5b8151856020820283011164010000000082111715611ac457600080fd5b5060009a509496509450505050505b8686815181101515611ae157fe5b90602001906020020151851015611b75578185815181101515611b0057fe5b9060200190602002015184868801815181101515611b1a57fe5b60ff9092166020928302909101909101528051819086908110611b3957fe5b9060200190602002015183868801815181101515611b5357fe5b600160a060020a03909216602092830290910190910152600190940193611ad3565b6001909501946118db565b50919890975095505050505050565b600081600160a060020a0381161515611ba757600080fd5b600160a060020a038316600090815260066020526040902054839060ff1615611bcf57600080fd5b846007816040518082805190602001908083835b60208310611c025780518252601f199092019160209182019101611be3565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16159150611c3f905057600080fd5b858580600160a060020a031663345309986040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611c7f57600080fd5b505af1158015611c93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611cbc57600080fd5b810190808051640100000000811115611cd457600080fd5b82016020810184811115611ce757600080fd5b8151640100000000811182820187101715611d0157600080fd5b50509291905050506040516020018082805190602001908083835b60208310611d3b5780518252601f199092019160209182019101611d1c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611d9e5780518252601f199092019160209182019101611d7f565b51815160209384036101000a60001901801990921691161790526040519190930181900381208751909550879450908301928392508401908083835b60208310611df95780518252601f199092019160209182019101611dda565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611e5c5780518252601f199092019160209182019101611e3d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515611e9957600080fd5b333014611ea557600080fd5b600a5460ff161515600114611eb957600080fd5b8751600010611ec757600080fd5b6009546040805180820182528a8152600160a060020a038a166020808301919091526000848152600882529290922081518051949a5091939092611f0f928492910190613374565b5060208201518160010160006101000a815481600160a060020a030219169083600160a060020a0316021790555090505060016007896040518082805190602001908083835b60208310611f745780518252601f199092019160209182019101611f55565b51815160001960209485036101000a8101918216911992909216179091529390910195865260408051968790038201909620805497151560ff19988916179055600160a060020a038e16600090815260069091529490942080549095166001179094555050600954919091109050611feb57600080fd5b60098054600101905560408051878152600160a060020a03891691810191909152606060208083018281528b51928401929092528a517ffa9b2165fc71c1d6ffa03291c7f5d223ea363ec063d747eec9ce2d30d24855ef938a938d938d93608084019186019080838360005b8381101561206f578181015183820152602001612057565b50505050905090810190601f16801561209c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15050505050505050565b81818080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506007816040518082805190602001908083835b6020831061211a5780518252601f1990920191602091820191016120fb565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff1615159150612158905057600080fd5b3360008181526006602052604090205460ff16151561217657600080fd5b6040805133602082018190528282529181018590527f933b0e6ba22c9fa6e54e9f516cf6cf46ff1498a763ae2aaee6a4d23425bc2e7791869186919080606081018585808284376040519201829003965090945050505050a150505050565b600083600160a060020a03811615156121ed57600080fd5b3360008181526004602052604090205460ff16151561220b57600080fd5b600280546040805161010081018252600160a060020a038a8116825260208083018b81528385018b8152336060860152600060808601819052600160a0870181905260c0870182905260e08701829052888252600585529690208551815473ffffffffffffffffffffffffffffffffffffffff1916951694909417845590519483019490945592518051949850919490936122ad939185019290910190613374565b50606082810151600383018054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff19909116179055608080850151600485015560a0808601516006909501805460c088015160e0909801511515620100000262ff0000199815156101000261ff001998151560ff19909316929092179790971617969096169490941790945560408051918b16825260208083018b9052429383018490529082018581528951958301959095528851339589957fd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb958e958e958e95929491939192918401919086019080838360005b838110156123b95781810151838201526020016123a1565b50505050905090810190601f1680156123e65780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a360025461240a90600163ffffffff61333216565b60025561106a835b3360008181526004602052604090205460ff16151561243057600080fd5b600082815260056020526040902060060154829060ff16151561245257600080fd5b60008381526005602081815260408084203380865293019091529091205484919060ff161561248057600080fd5b6000858152600560205260409020600601548590610100900460ff16156124a657600080fd5b600086815260056020526040902060060154869062010000900460ff16156124cd57600080fd5b60008781526005602081815260408084203385528084018352908420805460ff19166001908117909155938b9052919052600401546125119163ffffffff61333216565b600088815260056020908152604091829020600401929092558051428152905133928a927f4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042929081900390910190a360015460008881526005602052604090206004015410612594576000878152600560205260409020600601805460ff191690555b60008781526005602052604090206006015460ff1615156125b8576125b8876113f6565b50505050505050565b3360008181526006602052604090205460ff1615156125df57600080fd5b7fc7b359b1e189b7d721be7f0765a8d745be718566b8e67cbd2728dae5d6fd64b6858585856040518085600160a060020a0316600160a060020a03168152602001848152602001806020018281038252848482818152602001925060200280828437604051920182900397509095505050505050a15050505050565b6000818152600860208181526040808420600180820154600160a060020a0316808752600685528387205488885295855282548451600261010094831615949094026000190190911692909204601f8101869004860283018601909452838252606096958695939460ff909116939192918591908301828280156127205780601f106126f557610100808354040283529160200191612720565b820191906000526020600020905b81548152906001019060200180831161270357829003601f168201915b505050505092509250925092509193909250565b60015481565b80600160a060020a038116151561275057600080fd5b600160a060020a038316600090815260066020526040902054839060ff16151561277957600080fd5b33301461278557600080fd5b600a5460ff16151560011461279957600080fd5b600086815260086020526040902060010154600160a060020a038581169116146127c257600080fd5b846040516020018082805190602001908083835b602083106127f55780518252601f1990920191602091820191016127d6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106128585780518252601f199092019160209182019101612839565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166008600088815260200190815260200160002060000160405160200180828054600181600116156101000203166002900480156128fd5780601f106128db5761010080835404028352918201916128fd565b820191906000526020600020905b8154815290600101906020018083116128e9575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106129405780518252601f199092019160209182019101612921565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561297d57600080fd5b826008600088815260200190815260200160002060010160006101000a815481600160a060020a030219169083600160a060020a031602179055507f6ebec3bc09570e3cf26482a73a6ff7af913480e4d50ccadf106ce6f33d560ddd86868686604051808581526020018060200184600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a03168152602001828103825285818151815260200191508051906020019080838360005b83811015612a50578181015183820152602001612a38565b50505050905090810190601f168015612a7d5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050505050565b60606000805480602002602001604051908101604052809291908181526020018280548015612aed57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612acf575b505050505090505b90565b333014612b0457600080fd5b6000548160328211801590612b195750818111155b8015612b2457508015155b8015612b2f57508115155b1515612b3a57600080fd5b6001839055612b4761131f565b6040805184815290517f8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f9181900360200190a1505050565b60008085518560328211158015612b965750818111155b8015612ba157508015155b8015612bac57508115155b1515612bb757600080fd5b858580600160a060020a031663345309986040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015612bf757600080fd5b505af1158015612c0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612c3457600080fd5b810190808051640100000000811115612c4c57600080fd5b82016020810184811115612c5f57600080fd5b8151640100000000811182820187101715612c7957600080fd5b50509291905050506040516020018082805190602001908083835b60208310612cb35780518252601f199092019160209182019101612c94565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310612d165780518252601f199092019160209182019101612cf7565b51815160209384036101000a60001901801990921691161790526040519190930181900381208751909550879450908301928392508401908083835b60208310612d715780518252601f199092019160209182019101612d52565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310612dd45780518252601f199092019160209182019101612db5565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515612e1157600080fd5b7383fdd31030e6cc6a527fb8923801ef843d8488be3314612e3157600080fd5b600a5460ff1615612e4157600080fd5b8751600010612e4f57600080fd5b600095505b8951861015612f2057600460008b88815181101515612e6f57fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff16158015612ec357508986815181101515612eab57fe5b90602001906020020151600160a060020a0316600014155b1515612ece57600080fd5b6001600460008c89815181101515612ee257fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff191691151591909117905560019590950194612e54565b8951612f339060009060208d01906133f2565b5060018990556009546040805180820182528a8152600160a060020a038a16602080830191909152600084815260088252929092208151805194995091939092612f81928492910190613374565b5060208201518160010160006101000a815481600160a060020a030219169083600160a060020a0316021790555090505060016007896040518082805190602001908083835b60208310612fe65780518252601f199092019160209182019101612fc7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff02191690831515021790555060016006600089600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016009600082825401925050819055506001600a60006101000a81548160ff0219169083151502179055507ffa9b2165fc71c1d6ffa03291c7f5d223ea363ec063d747eec9ce2d30d24855ef858989604051808481526020018060200183600160a060020a0316600160a060020a03168152602001828103825284818151815260200191508051906020019080838360005b83811015613119578181015183820152602001613101565b50505050905090810190601f1680156131465780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a17ffa3e1e272694072320aad73a3fadd8876c4bf8f40899c6c7ce2fda9f4e652cfa6000600154604051808060200183815260200182810382528481815481526020019150805480156131d057602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116131b2575b5050935050505060405180910390a150505050505050505050565b606080606080600060095460405190808252806020026020018201604052801561321f578160200160208202803883390190505b50925060095460405190808252806020026020018201604052801561324e578160200160208202803883390190505b509150600090505b6009548110156132ee576000818152600860205260409020600101548351600160a060020a039091169084908390811061328c57fe5b600160a060020a039283166020918202909201810191909152600083815260088252604080822060010154909316815260069091522054825160ff909116908390839081106132d757fe5b911515602092830290910190910152600101613256565b5090939092509050565b6000808383111561330857600080fd5b5050900390565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b60008282018381101561334457600080fd5b9392505050565b81548183558181111561336f5760008381526020902061336f918101908301613460565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106133b557805160ff19168380011785556133e2565b828001600101855582156133e2579182015b828111156133e25782518255916020019190600101906133c7565b506133ee929150613460565b5090565b828054828255906000526020600020908101928215613454579160200282015b82811115613454578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178255602090920191600190910190613412565b506133ee92915061347a565b612af591905b808211156133ee5760008155600101613466565b612af591905b808211156133ee57805473ffffffffffffffffffffffffffffffffffffffff191681556001016134805600a165627a7a7230582093756fe617053766b158f7c64998c746eb38f0d5431cc50231cc9fb2cd1fd9950029`

// InitContractBin is the compiled bytecode used for deploying new contracts.
const InitContractBin = ``

// DeployInitContract deploys a new klaytn contract, binding an instance of InitContract to it.
func DeployInitContract(auth *bind.TransactOpts, backend bind.ContractBackend, dummyArray []common.Address, dummyUint *big.Int) (common.Address, *types.Transaction, *InitContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InitContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(InitContractBin), backend, dummyArray, dummyUint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &InitContract{InitContractCaller: InitContractCaller{contract: contract}, InitContractTransactor: InitContractTransactor{contract: contract}, InitContractFilterer: InitContractFilterer{contract: contract}}, nil
}

// InitContract is an auto generated Go binding around a klaytn contract.
type InitContract struct {
	InitContractCaller     // Read-only binding to the contract
	InitContractTransactor // Write-only binding to the contract
	InitContractFilterer   // Log filterer for contract events
}

// InitContractCaller is an auto generated read-only Go binding around a klaytn contract.
type InitContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitContractTransactor is an auto generated write-only Go binding around a klaytn contract.
type InitContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitContractFilterer is an auto generated log filtering Go binding around a klaytn contract events.
type InitContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitContractSession is an auto generated Go binding around a klaytn contract,
// with pre-set call and transact options.
type InitContractSession struct {
	Contract     *InitContract     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// InitContractCallerSession is an auto generated read-only Go binding around a klaytn contract,
// with pre-set call options.
type InitContractCallerSession struct {
	Contract *InitContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// InitContractTransactorSession is an auto generated write-only Go binding around a klaytn contract,
// with pre-set transact options.
type InitContractTransactorSession struct {
	Contract     *InitContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// InitContractRaw is an auto generated low-level Go binding around a klaytn contract.
type InitContractRaw struct {
	Contract *InitContract // Generic contract binding to access the raw methods on
}

// InitContractCallerRaw is an auto generated low-level read-only Go binding around a klaytn contract.
type InitContractCallerRaw struct {
	Contract *InitContractCaller // Generic read-only contract binding to access the raw methods on
}

// InitContractTransactorRaw is an auto generated low-level write-only Go binding around a klaytn contract.
type InitContractTransactorRaw struct {
	Contract *InitContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInitContract creates a new instance of InitContract, bound to a specific deployed contract.
func NewInitContract(address common.Address, backend bind.ContractBackend) (*InitContract, error) {
	contract, err := bindInitContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &InitContract{InitContractCaller: InitContractCaller{contract: contract}, InitContractTransactor: InitContractTransactor{contract: contract}, InitContractFilterer: InitContractFilterer{contract: contract}}, nil
}

// NewInitContractCaller creates a new read-only instance of InitContract, bound to a specific deployed contract.
func NewInitContractCaller(address common.Address, caller bind.ContractCaller) (*InitContractCaller, error) {
	contract, err := bindInitContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InitContractCaller{contract: contract}, nil
}

// NewInitContractTransactor creates a new write-only instance of InitContract, bound to a specific deployed contract.
func NewInitContractTransactor(address common.Address, transactor bind.ContractTransactor) (*InitContractTransactor, error) {
	contract, err := bindInitContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InitContractTransactor{contract: contract}, nil
}

// NewInitContractFilterer creates a new log filterer instance of InitContract, bound to a specific deployed contract.
func NewInitContractFilterer(address common.Address, filterer bind.ContractFilterer) (*InitContractFilterer, error) {
	contract, err := bindInitContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InitContractFilterer{contract: contract}, nil
}

// bindInitContract binds a generic wrapper to an already deployed contract.
func bindInitContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InitContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitContract *InitContractRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _InitContract.Contract.InitContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitContract *InitContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitContract.Contract.InitContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitContract *InitContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitContract.Contract.InitContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitContract *InitContractCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _InitContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitContract *InitContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitContract *InitContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitContract.Contract.contract.Transact(opts, method, params...)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() constant returns(uint256)
func (_InitContract *InitContractCaller) MAXADMIN(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "MAX_ADMIN")
	return *ret0, err
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() constant returns(uint256)
func (_InitContract *InitContractSession) MAXADMIN() (*big.Int, error) {
	return _InitContract.Contract.MAXADMIN(&_InitContract.CallOpts)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() constant returns(uint256)
func (_InitContract *InitContractCallerSession) MAXADMIN() (*big.Int, error) {
	return _InitContract.Contract.MAXADMIN(&_InitContract.CallOpts)
}

// BranchContractCount is a free data retrieval call binding the contract method 0x545d0e99.
//
// Solidity: function branchContractCount() constant returns(uint256)
func (_InitContract *InitContractCaller) BranchContractCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "branchContractCount")
	return *ret0, err
}

// BranchContractCount is a free data retrieval call binding the contract method 0x545d0e99.
//
// Solidity: function branchContractCount() constant returns(uint256)
func (_InitContract *InitContractSession) BranchContractCount() (*big.Int, error) {
	return _InitContract.Contract.BranchContractCount(&_InitContract.CallOpts)
}

// BranchContractCount is a free data retrieval call binding the contract method 0x545d0e99.
//
// Solidity: function branchContractCount() constant returns(uint256)
func (_InitContract *InitContractCallerSession) BranchContractCount() (*big.Int, error) {
	return _InitContract.Contract.BranchContractCount(&_InitContract.CallOpts)
}

// GetAdminInfo is a free data retrieval call binding the contract method 0xc3d5fd39.
//
// Solidity: function getAdminInfo() constant returns(address[])
func (_InitContract *InitContractCaller) GetAdminInfo(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "getAdminInfo")
	return *ret0, err
}

// GetAdminInfo is a free data retrieval call binding the contract method 0xc3d5fd39.
//
// Solidity: function getAdminInfo() constant returns(address[])
func (_InitContract *InitContractSession) GetAdminInfo() ([]common.Address, error) {
	return _InitContract.Contract.GetAdminInfo(&_InitContract.CallOpts)
}

// GetAdminInfo is a free data retrieval call binding the contract method 0xc3d5fd39.
//
// Solidity: function getAdminInfo() constant returns(address[])
func (_InitContract *InitContractCallerSession) GetAdminInfo() ([]common.Address, error) {
	return _InitContract.Contract.GetAdminInfo(&_InitContract.CallOpts)
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() constant returns(uint8[], address[])
func (_InitContract *InitContractCaller) GetAllAddress(opts *bind.CallOpts) ([]uint8, []common.Address, error) {
	var (
		ret0 = new([]uint8)
		ret1 = new([]common.Address)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _InitContract.contract.Call(opts, out, "getAllAddress")
	return *ret0, *ret1, err
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() constant returns(uint8[], address[])
func (_InitContract *InitContractSession) GetAllAddress() ([]uint8, []common.Address, error) {
	return _InitContract.Contract.GetAllAddress(&_InitContract.CallOpts)
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() constant returns(uint8[], address[])
func (_InitContract *InitContractCallerSession) GetAllAddress() ([]uint8, []common.Address, error) {
	return _InitContract.Contract.GetAllAddress(&_InitContract.CallOpts)
}

// GetAllBranchAddress is a free data retrieval call binding the contract method 0xfd7d4f6f.
//
// Solidity: function getAllBranchAddress() constant returns(address[], bool[])
func (_InitContract *InitContractCaller) GetAllBranchAddress(opts *bind.CallOpts) ([]common.Address, []bool, error) {
	var (
		ret0 = new([]common.Address)
		ret1 = new([]bool)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _InitContract.contract.Call(opts, out, "getAllBranchAddress")
	return *ret0, *ret1, err
}

// GetAllBranchAddress is a free data retrieval call binding the contract method 0xfd7d4f6f.
//
// Solidity: function getAllBranchAddress() constant returns(address[], bool[])
func (_InitContract *InitContractSession) GetAllBranchAddress() ([]common.Address, []bool, error) {
	return _InitContract.Contract.GetAllBranchAddress(&_InitContract.CallOpts)
}

// GetAllBranchAddress is a free data retrieval call binding the contract method 0xfd7d4f6f.
//
// Solidity: function getAllBranchAddress() constant returns(address[], bool[])
func (_InitContract *InitContractCallerSession) GetAllBranchAddress() ([]common.Address, []bool, error) {
	return _InitContract.Contract.GetAllBranchAddress(&_InitContract.CallOpts)
}

// GetBranchInfo is a free data retrieval call binding the contract method 0xb6cad6cd.
//
// Solidity: function getBranchInfo(_index uint256) constant returns(string, bool, address)
func (_InitContract *InitContractCaller) GetBranchInfo(opts *bind.CallOpts, _index *big.Int) (string, bool, common.Address, error) {
	var (
		ret0 = new(string)
		ret1 = new(bool)
		ret2 = new(common.Address)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _InitContract.contract.Call(opts, out, "getBranchInfo", _index)
	return *ret0, *ret1, *ret2, err
}

// GetBranchInfo is a free data retrieval call binding the contract method 0xb6cad6cd.
//
// Solidity: function getBranchInfo(_index uint256) constant returns(string, bool, address)
func (_InitContract *InitContractSession) GetBranchInfo(_index *big.Int) (string, bool, common.Address, error) {
	return _InitContract.Contract.GetBranchInfo(&_InitContract.CallOpts, _index)
}

// GetBranchInfo is a free data retrieval call binding the contract method 0xb6cad6cd.
//
// Solidity: function getBranchInfo(_index uint256) constant returns(string, bool, address)
func (_InitContract *InitContractCallerSession) GetBranchInfo(_index *big.Int) (string, bool, common.Address, error) {
	return _InitContract.Contract.GetBranchInfo(&_InitContract.CallOpts, _index)
}

// GetRequestIndexes is a free data retrieval call binding the contract method 0x1e482f82.
//
// Solidity: function getRequestIndexes(_from uint256, _to uint256, _pending bool, _executed bool, _canceled bool) constant returns(uint256[])
func (_InitContract *InitContractCaller) GetRequestIndexes(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _pending bool, _executed bool, _canceled bool) ([]*big.Int, error) {
	var (
		ret0 = new([]*big.Int)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "getRequestIndexes", _from, _to, _pending, _executed, _canceled)
	return *ret0, err
}

// GetRequestIndexes is a free data retrieval call binding the contract method 0x1e482f82.
//
// Solidity: function getRequestIndexes(_from uint256, _to uint256, _pending bool, _executed bool, _canceled bool) constant returns(uint256[])
func (_InitContract *InitContractSession) GetRequestIndexes(_from *big.Int, _to *big.Int, _pending bool, _executed bool, _canceled bool) ([]*big.Int, error) {
	return _InitContract.Contract.GetRequestIndexes(&_InitContract.CallOpts, _from, _to, _pending, _executed, _canceled)
}

// GetRequestIndexes is a free data retrieval call binding the contract method 0x1e482f82.
//
// Solidity: function getRequestIndexes(_from uint256, _to uint256, _pending bool, _executed bool, _canceled bool) constant returns(uint256[])
func (_InitContract *InitContractCallerSession) GetRequestIndexes(_from *big.Int, _to *big.Int, _pending bool, _executed bool, _canceled bool) ([]*big.Int, error) {
	return _InitContract.Contract.GetRequestIndexes(&_InitContract.CallOpts, _from, _to, _pending, _executed, _canceled)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(_index uint256) constant returns(To address, Value uint256, Data bytes, ConfirmationCount uint256, Pending bool, Executed bool, Canceled bool)
func (_InitContract *InitContractCaller) GetRequestInfo(opts *bind.CallOpts, _index *big.Int) (struct {
	To                common.Address
	Value             *big.Int
	Data              []byte
	ConfirmationCount *big.Int
	Pending           bool
	Executed          bool
	Canceled          bool
}, error) {
	ret := new(struct {
		To                common.Address
		Value             *big.Int
		Data              []byte
		ConfirmationCount *big.Int
		Pending           bool
		Executed          bool
		Canceled          bool
	})
	out := ret
	err := _InitContract.contract.Call(opts, out, "getRequestInfo", _index)
	return *ret, err
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(_index uint256) constant returns(To address, Value uint256, Data bytes, ConfirmationCount uint256, Pending bool, Executed bool, Canceled bool)
func (_InitContract *InitContractSession) GetRequestInfo(_index *big.Int) (struct {
	To                common.Address
	Value             *big.Int
	Data              []byte
	ConfirmationCount *big.Int
	Pending           bool
	Executed          bool
	Canceled          bool
}, error) {
	return _InitContract.Contract.GetRequestInfo(&_InitContract.CallOpts, _index)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(_index uint256) constant returns(To address, Value uint256, Data bytes, ConfirmationCount uint256, Pending bool, Executed bool, Canceled bool)
func (_InitContract *InitContractCallerSession) GetRequestInfo(_index *big.Int) (struct {
	To                common.Address
	Value             *big.Int
	Data              []byte
	ConfirmationCount *big.Int
	Pending           bool
	Executed          bool
	Canceled          bool
}, error) {
	return _InitContract.Contract.GetRequestInfo(&_InitContract.CallOpts, _index)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() constant returns(bool)
func (_InitContract *InitContractCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "isInitialized")
	return *ret0, err
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() constant returns(bool)
func (_InitContract *InitContractSession) IsInitialized() (bool, error) {
	return _InitContract.Contract.IsInitialized(&_InitContract.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() constant returns(bool)
func (_InitContract *InitContractCallerSession) IsInitialized() (bool, error) {
	return _InitContract.Contract.IsInitialized(&_InitContract.CallOpts)
}

// LastClearedIndex is a free data retrieval call binding the contract method 0x2d9c3439.
//
// Solidity: function lastClearedIndex() constant returns(uint256)
func (_InitContract *InitContractCaller) LastClearedIndex(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "lastClearedIndex")
	return *ret0, err
}

// LastClearedIndex is a free data retrieval call binding the contract method 0x2d9c3439.
//
// Solidity: function lastClearedIndex() constant returns(uint256)
func (_InitContract *InitContractSession) LastClearedIndex() (*big.Int, error) {
	return _InitContract.Contract.LastClearedIndex(&_InitContract.CallOpts)
}

// LastClearedIndex is a free data retrieval call binding the contract method 0x2d9c3439.
//
// Solidity: function lastClearedIndex() constant returns(uint256)
func (_InitContract *InitContractCallerSession) LastClearedIndex() (*big.Int, error) {
	return _InitContract.Contract.LastClearedIndex(&_InitContract.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() constant returns(uint256)
func (_InitContract *InitContractCaller) RequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "requestCount")
	return *ret0, err
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() constant returns(uint256)
func (_InitContract *InitContractSession) RequestCount() (*big.Int, error) {
	return _InitContract.Contract.RequestCount(&_InitContract.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() constant returns(uint256)
func (_InitContract *InitContractCallerSession) RequestCount() (*big.Int, error) {
	return _InitContract.Contract.RequestCount(&_InitContract.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() constant returns(uint256)
func (_InitContract *InitContractCaller) Requirement(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _InitContract.contract.Call(opts, out, "requirement")
	return *ret0, err
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() constant returns(uint256)
func (_InitContract *InitContractSession) Requirement() (*big.Int, error) {
	return _InitContract.Contract.Requirement(&_InitContract.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() constant returns(uint256)
func (_InitContract *InitContractCallerSession) Requirement() (*big.Int, error) {
	return _InitContract.Contract.Requirement(&_InitContract.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(_admin address) returns()
func (_InitContract *InitContractTransactor) AddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "addAdmin", _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(_admin address) returns()
func (_InitContract *InitContractSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.AddAdmin(&_InitContract.TransactOpts, _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(_admin address) returns()
func (_InitContract *InitContractTransactorSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.AddAdmin(&_InitContract.TransactOpts, _admin)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_InitContract *InitContractTransactor) ClearRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "clearRequest")
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_InitContract *InitContractSession) ClearRequest() (*types.Transaction, error) {
	return _InitContract.Contract.ClearRequest(&_InitContract.TransactOpts)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_InitContract *InitContractTransactorSession) ClearRequest() (*types.Transaction, error) {
	return _InitContract.Contract.ClearRequest(&_InitContract.TransactOpts)
}

// CompleteInitialization is a paid mutator transaction binding the contract method 0x9ed5724a.
//
// Solidity: function completeInitialization(_branchName string) returns()
func (_InitContract *InitContractTransactor) CompleteInitialization(opts *bind.TransactOpts, _branchName string) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "completeInitialization", _branchName)
}

// CompleteInitialization is a paid mutator transaction binding the contract method 0x9ed5724a.
//
// Solidity: function completeInitialization(_branchName string) returns()
func (_InitContract *InitContractSession) CompleteInitialization(_branchName string) (*types.Transaction, error) {
	return _InitContract.Contract.CompleteInitialization(&_InitContract.TransactOpts, _branchName)
}

// CompleteInitialization is a paid mutator transaction binding the contract method 0x9ed5724a.
//
// Solidity: function completeInitialization(_branchName string) returns()
func (_InitContract *InitContractTransactorSession) CompleteInitialization(_branchName string) (*types.Transaction, error) {
	return _InitContract.Contract.CompleteInitialization(&_InitContract.TransactOpts, _branchName)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0xa6b2c437.
//
// Solidity: function confirmRequest(_index uint256) returns()
func (_InitContract *InitContractTransactor) ConfirmRequest(opts *bind.TransactOpts, _index *big.Int) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "confirmRequest", _index)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0xa6b2c437.
//
// Solidity: function confirmRequest(_index uint256) returns()
func (_InitContract *InitContractSession) ConfirmRequest(_index *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.ConfirmRequest(&_InitContract.TransactOpts, _index)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0xa6b2c437.
//
// Solidity: function confirmRequest(_index uint256) returns()
func (_InitContract *InitContractTransactorSession) ConfirmRequest(_index *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.ConfirmRequest(&_InitContract.TransactOpts, _index)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(_admin address) returns()
func (_InitContract *InitContractTransactor) DeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "deleteAdmin", _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(_admin address) returns()
func (_InitContract *InitContractSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.DeleteAdmin(&_InitContract.TransactOpts, _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(_admin address) returns()
func (_InitContract *InitContractTransactorSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.DeleteAdmin(&_InitContract.TransactOpts, _admin)
}

// ExecuteRequest is a paid mutator transaction binding the contract method 0x6e417c69.
//
// Solidity: function executeRequest(_index uint256) returns()
func (_InitContract *InitContractTransactor) ExecuteRequest(opts *bind.TransactOpts, _index *big.Int) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "executeRequest", _index)
}

// ExecuteRequest is a paid mutator transaction binding the contract method 0x6e417c69.
//
// Solidity: function executeRequest(_index uint256) returns()
func (_InitContract *InitContractSession) ExecuteRequest(_index *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.ExecuteRequest(&_InitContract.TransactOpts, _index)
}

// ExecuteRequest is a paid mutator transaction binding the contract method 0x6e417c69.
//
// Solidity: function executeRequest(_index uint256) returns()
func (_InitContract *InitContractTransactorSession) ExecuteRequest(_index *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.ExecuteRequest(&_InitContract.TransactOpts, _index)
}

// Initialize is a paid mutator transaction binding the contract method 0xc97a49b6.
//
// Solidity: function initialize(_adminList address[], _requirement uint256, _branchName string, _contractAddress address) returns()
func (_InitContract *InitContractTransactor) Initialize(opts *bind.TransactOpts, _adminList []common.Address, _requirement *big.Int, _branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "initialize", _adminList, _requirement, _branchName, _contractAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xc97a49b6.
//
// Solidity: function initialize(_adminList address[], _requirement uint256, _branchName string, _contractAddress address) returns()
func (_InitContract *InitContractSession) Initialize(_adminList []common.Address, _requirement *big.Int, _branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.Initialize(&_InitContract.TransactOpts, _adminList, _requirement, _branchName, _contractAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xc97a49b6.
//
// Solidity: function initialize(_adminList address[], _requirement uint256, _branchName string, _contractAddress address) returns()
func (_InitContract *InitContractTransactorSession) Initialize(_adminList []common.Address, _requirement *big.Int, _branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.Initialize(&_InitContract.TransactOpts, _adminList, _requirement, _branchName, _contractAddress)
}

// RegisterBranchContract is a paid mutator transaction binding the contract method 0x7408b0dc.
//
// Solidity: function registerBranchContract(_branchName string, _contractAddress address) returns()
func (_InitContract *InitContractTransactor) RegisterBranchContract(opts *bind.TransactOpts, _branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "registerBranchContract", _branchName, _contractAddress)
}

// RegisterBranchContract is a paid mutator transaction binding the contract method 0x7408b0dc.
//
// Solidity: function registerBranchContract(_branchName string, _contractAddress address) returns()
func (_InitContract *InitContractSession) RegisterBranchContract(_branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.RegisterBranchContract(&_InitContract.TransactOpts, _branchName, _contractAddress)
}

// RegisterBranchContract is a paid mutator transaction binding the contract method 0x7408b0dc.
//
// Solidity: function registerBranchContract(_branchName string, _contractAddress address) returns()
func (_InitContract *InitContractTransactorSession) RegisterBranchContract(_branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.RegisterBranchContract(&_InitContract.TransactOpts, _branchName, _contractAddress)
}

// RegisterLeafContract is a paid mutator transaction binding the contract method 0xb13fe924.
//
// Solidity: function registerLeafContract(_branchAddress address, _addressType uint256, _leafAddress address[]) returns()
func (_InitContract *InitContractTransactor) RegisterLeafContract(opts *bind.TransactOpts, _branchAddress common.Address, _addressType *big.Int, _leafAddress []common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "registerLeafContract", _branchAddress, _addressType, _leafAddress)
}

// RegisterLeafContract is a paid mutator transaction binding the contract method 0xb13fe924.
//
// Solidity: function registerLeafContract(_branchAddress address, _addressType uint256, _leafAddress address[]) returns()
func (_InitContract *InitContractSession) RegisterLeafContract(_branchAddress common.Address, _addressType *big.Int, _leafAddress []common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.RegisterLeafContract(&_InitContract.TransactOpts, _branchAddress, _addressType, _leafAddress)
}

// RegisterLeafContract is a paid mutator transaction binding the contract method 0xb13fe924.
//
// Solidity: function registerLeafContract(_branchAddress address, _addressType uint256, _leafAddress address[]) returns()
func (_InitContract *InitContractTransactorSession) RegisterLeafContract(_branchAddress common.Address, _addressType *big.Int, _leafAddress []common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.RegisterLeafContract(&_InitContract.TransactOpts, _branchAddress, _addressType, _leafAddress)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(_index uint256) returns()
func (_InitContract *InitContractTransactor) RevokeConfirmation(opts *bind.TransactOpts, _index *big.Int) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "revokeConfirmation", _index)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(_index uint256) returns()
func (_InitContract *InitContractSession) RevokeConfirmation(_index *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.RevokeConfirmation(&_InitContract.TransactOpts, _index)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(_index uint256) returns()
func (_InitContract *InitContractTransactorSession) RevokeConfirmation(_index *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.RevokeConfirmation(&_InitContract.TransactOpts, _index)
}

// SubmitRequest is a paid mutator transaction binding the contract method 0xa2320f03.
//
// Solidity: function submitRequest(_to address, _value uint256, _data bytes) returns()
func (_InitContract *InitContractTransactor) SubmitRequest(opts *bind.TransactOpts, _to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "submitRequest", _to, _value, _data)
}

// SubmitRequest is a paid mutator transaction binding the contract method 0xa2320f03.
//
// Solidity: function submitRequest(_to address, _value uint256, _data bytes) returns()
func (_InitContract *InitContractSession) SubmitRequest(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _InitContract.Contract.SubmitRequest(&_InitContract.TransactOpts, _to, _value, _data)
}

// SubmitRequest is a paid mutator transaction binding the contract method 0xa2320f03.
//
// Solidity: function submitRequest(_to address, _value uint256, _data bytes) returns()
func (_InitContract *InitContractTransactorSession) SubmitRequest(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _InitContract.Contract.SubmitRequest(&_InitContract.TransactOpts, _to, _value, _data)
}

// UnregisterBranchContract is a paid mutator transaction binding the contract method 0x0d11f967.
//
// Solidity: function unregisterBranchContract(_index uint256, _branchName string, _contractAddress address) returns()
func (_InitContract *InitContractTransactor) UnregisterBranchContract(opts *bind.TransactOpts, _index *big.Int, _branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "unregisterBranchContract", _index, _branchName, _contractAddress)
}

// UnregisterBranchContract is a paid mutator transaction binding the contract method 0x0d11f967.
//
// Solidity: function unregisterBranchContract(_index uint256, _branchName string, _contractAddress address) returns()
func (_InitContract *InitContractSession) UnregisterBranchContract(_index *big.Int, _branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UnregisterBranchContract(&_InitContract.TransactOpts, _index, _branchName, _contractAddress)
}

// UnregisterBranchContract is a paid mutator transaction binding the contract method 0x0d11f967.
//
// Solidity: function unregisterBranchContract(_index uint256, _branchName string, _contractAddress address) returns()
func (_InitContract *InitContractTransactorSession) UnregisterBranchContract(_index *big.Int, _branchName string, _contractAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UnregisterBranchContract(&_InitContract.TransactOpts, _index, _branchName, _contractAddress)
}

// UnregisterLeafContract is a paid mutator transaction binding the contract method 0x32be3100.
//
// Solidity: function unregisterLeafContract(_branchAddress address, _addressType uint256, _leafAddress address) returns()
func (_InitContract *InitContractTransactor) UnregisterLeafContract(opts *bind.TransactOpts, _branchAddress common.Address, _addressType *big.Int, _leafAddress common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "unregisterLeafContract", _branchAddress, _addressType, _leafAddress)
}

// UnregisterLeafContract is a paid mutator transaction binding the contract method 0x32be3100.
//
// Solidity: function unregisterLeafContract(_branchAddress address, _addressType uint256, _leafAddress address) returns()
func (_InitContract *InitContractSession) UnregisterLeafContract(_branchAddress common.Address, _addressType *big.Int, _leafAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UnregisterLeafContract(&_InitContract.TransactOpts, _branchAddress, _addressType, _leafAddress)
}

// UnregisterLeafContract is a paid mutator transaction binding the contract method 0x32be3100.
//
// Solidity: function unregisterLeafContract(_branchAddress address, _addressType uint256, _leafAddress address) returns()
func (_InitContract *InitContractTransactorSession) UnregisterLeafContract(_branchAddress common.Address, _addressType *big.Int, _leafAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UnregisterLeafContract(&_InitContract.TransactOpts, _branchAddress, _addressType, _leafAddress)
}

// UpdateBranchContract is a paid mutator transaction binding the contract method 0xc2c71c51.
//
// Solidity: function updateBranchContract(_index uint256, _branchName string, _prevAddress address, _newAddress address) returns()
func (_InitContract *InitContractTransactor) UpdateBranchContract(opts *bind.TransactOpts, _index *big.Int, _branchName string, _prevAddress common.Address, _newAddress common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "updateBranchContract", _index, _branchName, _prevAddress, _newAddress)
}

// UpdateBranchContract is a paid mutator transaction binding the contract method 0xc2c71c51.
//
// Solidity: function updateBranchContract(_index uint256, _branchName string, _prevAddress address, _newAddress address) returns()
func (_InitContract *InitContractSession) UpdateBranchContract(_index *big.Int, _branchName string, _prevAddress common.Address, _newAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UpdateBranchContract(&_InitContract.TransactOpts, _index, _branchName, _prevAddress, _newAddress)
}

// UpdateBranchContract is a paid mutator transaction binding the contract method 0xc2c71c51.
//
// Solidity: function updateBranchContract(_index uint256, _branchName string, _prevAddress address, _newAddress address) returns()
func (_InitContract *InitContractTransactorSession) UpdateBranchContract(_index *big.Int, _branchName string, _prevAddress common.Address, _newAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UpdateBranchContract(&_InitContract.TransactOpts, _index, _branchName, _prevAddress, _newAddress)
}

// UpdateLeafContract is a paid mutator transaction binding the contract method 0x2f0bcc34.
//
// Solidity: function updateLeafContract(_branchAddress address, _addressType uint256, _prevLeafAddress address, _curLeafAddress address, _extraLeafAddress address) returns()
func (_InitContract *InitContractTransactor) UpdateLeafContract(opts *bind.TransactOpts, _branchAddress common.Address, _addressType *big.Int, _prevLeafAddress common.Address, _curLeafAddress common.Address, _extraLeafAddress common.Address) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "updateLeafContract", _branchAddress, _addressType, _prevLeafAddress, _curLeafAddress, _extraLeafAddress)
}

// UpdateLeafContract is a paid mutator transaction binding the contract method 0x2f0bcc34.
//
// Solidity: function updateLeafContract(_branchAddress address, _addressType uint256, _prevLeafAddress address, _curLeafAddress address, _extraLeafAddress address) returns()
func (_InitContract *InitContractSession) UpdateLeafContract(_branchAddress common.Address, _addressType *big.Int, _prevLeafAddress common.Address, _curLeafAddress common.Address, _extraLeafAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UpdateLeafContract(&_InitContract.TransactOpts, _branchAddress, _addressType, _prevLeafAddress, _curLeafAddress, _extraLeafAddress)
}

// UpdateLeafContract is a paid mutator transaction binding the contract method 0x2f0bcc34.
//
// Solidity: function updateLeafContract(_branchAddress address, _addressType uint256, _prevLeafAddress address, _curLeafAddress address, _extraLeafAddress address) returns()
func (_InitContract *InitContractTransactorSession) UpdateLeafContract(_branchAddress common.Address, _addressType *big.Int, _prevLeafAddress common.Address, _curLeafAddress common.Address, _extraLeafAddress common.Address) (*types.Transaction, error) {
	return _InitContract.Contract.UpdateLeafContract(&_InitContract.TransactOpts, _branchAddress, _addressType, _prevLeafAddress, _curLeafAddress, _extraLeafAddress)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(_requirement uint256) returns()
func (_InitContract *InitContractTransactor) UpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _InitContract.contract.Transact(opts, "updateRequirement", _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(_requirement uint256) returns()
func (_InitContract *InitContractSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.UpdateRequirement(&_InitContract.TransactOpts, _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(_requirement uint256) returns()
func (_InitContract *InitContractTransactorSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _InitContract.Contract.UpdateRequirement(&_InitContract.TransactOpts, _requirement)
}

// InitContractAddAdminIterator is returned from FilterAddAdmin and is used to iterate over the raw logs and unpacked data for AddAdmin events raised by the InitContract contract.
type InitContractAddAdminIterator struct {
	Event *InitContractAddAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractAddAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractAddAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractAddAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractAddAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractAddAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractAddAdmin represents a AddAdmin event raised by the InitContract contract.
type InitContractAddAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddAdmin is a free log retrieval operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: e AddAdmin(admin indexed address)
func (_InitContract *InitContractFilterer) FilterAddAdmin(opts *bind.FilterOpts, admin []common.Address) (*InitContractAddAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &InitContractAddAdminIterator{contract: _InitContract.contract, event: "AddAdmin", logs: logs, sub: sub}, nil
}

// WatchAddAdmin is a free log subscription operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: e AddAdmin(admin indexed address)
func (_InitContract *InitContractFilterer) WatchAddAdmin(opts *bind.WatchOpts, sink chan<- *InitContractAddAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractAddAdmin)
				if err := _InitContract.contract.UnpackLog(event, "AddAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractCancelRequestIterator is returned from FilterCancelRequest and is used to iterate over the raw logs and unpacked data for CancelRequest events raised by the InitContract contract.
type InitContractCancelRequestIterator struct {
	Event *InitContractCancelRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractCancelRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractCancelRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractCancelRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractCancelRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractCancelRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractCancelRequest represents a CancelRequest event raised by the InitContract contract.
type InitContractCancelRequest struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCancelRequest is a free log retrieval operation binding the contract event 0x25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce1.
//
// Solidity: e CancelRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) FilterCancelRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*InitContractCancelRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "CancelRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &InitContractCancelRequestIterator{contract: _InitContract.contract, event: "CancelRequest", logs: logs, sub: sub}, nil
}

// WatchCancelRequest is a free log subscription operation binding the contract event 0x25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce1.
//
// Solidity: e CancelRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) WatchCancelRequest(opts *bind.WatchOpts, sink chan<- *InitContractCancelRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "CancelRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractCancelRequest)
				if err := _InitContract.contract.UnpackLog(event, "CancelRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractClearRequestIterator is returned from FilterClearRequest and is used to iterate over the raw logs and unpacked data for ClearRequest events raised by the InitContract contract.
type InitContractClearRequestIterator struct {
	Event *InitContractClearRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractClearRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractClearRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractClearRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractClearRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractClearRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractClearRequest represents a ClearRequest event raised by the InitContract contract.
type InitContractClearRequest struct {
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClearRequest is a free log retrieval operation binding the contract event 0xb9ce9c85727b055bd75ed2418c65d65f31157821337419862d2042439d60168d.
//
// Solidity: e ClearRequest(timestamp uint256)
func (_InitContract *InitContractFilterer) FilterClearRequest(opts *bind.FilterOpts) (*InitContractClearRequestIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return &InitContractClearRequestIterator{contract: _InitContract.contract, event: "ClearRequest", logs: logs, sub: sub}, nil
}

// WatchClearRequest is a free log subscription operation binding the contract event 0xb9ce9c85727b055bd75ed2418c65d65f31157821337419862d2042439d60168d.
//
// Solidity: e ClearRequest(timestamp uint256)
func (_InitContract *InitContractFilterer) WatchClearRequest(opts *bind.WatchOpts, sink chan<- *InitContractClearRequest) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractClearRequest)
				if err := _InitContract.contract.UnpackLog(event, "ClearRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractCompleteInitializationIterator is returned from FilterCompleteInitialization and is used to iterate over the raw logs and unpacked data for CompleteInitialization events raised by the InitContract contract.
type InitContractCompleteInitializationIterator struct {
	Event *InitContractCompleteInitialization // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractCompleteInitializationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractCompleteInitialization)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractCompleteInitialization)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractCompleteInitializationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractCompleteInitializationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractCompleteInitialization represents a CompleteInitialization event raised by the InitContract contract.
type InitContractCompleteInitialization struct {
	BranchName      string
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterCompleteInitialization is a free log retrieval operation binding the contract event 0x933b0e6ba22c9fa6e54e9f516cf6cf46ff1498a763ae2aaee6a4d23425bc2e77.
//
// Solidity: e CompleteInitialization(branchName string, contractAddress address)
func (_InitContract *InitContractFilterer) FilterCompleteInitialization(opts *bind.FilterOpts) (*InitContractCompleteInitializationIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "CompleteInitialization")
	if err != nil {
		return nil, err
	}
	return &InitContractCompleteInitializationIterator{contract: _InitContract.contract, event: "CompleteInitialization", logs: logs, sub: sub}, nil
}

// WatchCompleteInitialization is a free log subscription operation binding the contract event 0x933b0e6ba22c9fa6e54e9f516cf6cf46ff1498a763ae2aaee6a4d23425bc2e77.
//
// Solidity: e CompleteInitialization(branchName string, contractAddress address)
func (_InitContract *InitContractFilterer) WatchCompleteInitialization(opts *bind.WatchOpts, sink chan<- *InitContractCompleteInitialization) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "CompleteInitialization")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractCompleteInitialization)
				if err := _InitContract.contract.UnpackLog(event, "CompleteInitialization", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractConfirmRequestIterator is returned from FilterConfirmRequest and is used to iterate over the raw logs and unpacked data for ConfirmRequest events raised by the InitContract contract.
type InitContractConfirmRequestIterator struct {
	Event *InitContractConfirmRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractConfirmRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractConfirmRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractConfirmRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractConfirmRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractConfirmRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractConfirmRequest represents a ConfirmRequest event raised by the InitContract contract.
type InitContractConfirmRequest struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterConfirmRequest is a free log retrieval operation binding the contract event 0x4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042.
//
// Solidity: e ConfirmRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) FilterConfirmRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*InitContractConfirmRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "ConfirmRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &InitContractConfirmRequestIterator{contract: _InitContract.contract, event: "ConfirmRequest", logs: logs, sub: sub}, nil
}

// WatchConfirmRequest is a free log subscription operation binding the contract event 0x4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042.
//
// Solidity: e ConfirmRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) WatchConfirmRequest(opts *bind.WatchOpts, sink chan<- *InitContractConfirmRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "ConfirmRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractConfirmRequest)
				if err := _InitContract.contract.UnpackLog(event, "ConfirmRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractDeleteAdminIterator is returned from FilterDeleteAdmin and is used to iterate over the raw logs and unpacked data for DeleteAdmin events raised by the InitContract contract.
type InitContractDeleteAdminIterator struct {
	Event *InitContractDeleteAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractDeleteAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractDeleteAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractDeleteAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractDeleteAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractDeleteAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractDeleteAdmin represents a DeleteAdmin event raised by the InitContract contract.
type InitContractDeleteAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDeleteAdmin is a free log retrieval operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: e DeleteAdmin(admin indexed address)
func (_InitContract *InitContractFilterer) FilterDeleteAdmin(opts *bind.FilterOpts, admin []common.Address) (*InitContractDeleteAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &InitContractDeleteAdminIterator{contract: _InitContract.contract, event: "DeleteAdmin", logs: logs, sub: sub}, nil
}

// WatchDeleteAdmin is a free log subscription operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: e DeleteAdmin(admin indexed address)
func (_InitContract *InitContractFilterer) WatchDeleteAdmin(opts *bind.WatchOpts, sink chan<- *InitContractDeleteAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractDeleteAdmin)
				if err := _InitContract.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractDeployMultisigContractIterator is returned from FilterDeployMultisigContract and is used to iterate over the raw logs and unpacked data for DeployMultisigContract events raised by the InitContract contract.
type InitContractDeployMultisigContractIterator struct {
	Event *InitContractDeployMultisigContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractDeployMultisigContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractDeployMultisigContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractDeployMultisigContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractDeployMultisigContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractDeployMultisigContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractDeployMultisigContract represents a DeployMultisigContract event raised by the InitContract contract.
type InitContractDeployMultisigContract struct {
	AdminList   []common.Address
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDeployMultisigContract is a free log retrieval operation binding the contract event 0x14aa44bb5ce6609639302921fc20d0c5c26dc52d8fbea76c78a2e7d6d8b047f5.
//
// Solidity: e DeployMultisigContract(adminList address[], requirement uint256)
func (_InitContract *InitContractFilterer) FilterDeployMultisigContract(opts *bind.FilterOpts) (*InitContractDeployMultisigContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "DeployMultisigContract")
	if err != nil {
		return nil, err
	}
	return &InitContractDeployMultisigContractIterator{contract: _InitContract.contract, event: "DeployMultisigContract", logs: logs, sub: sub}, nil
}

// WatchDeployMultisigContract is a free log subscription operation binding the contract event 0x14aa44bb5ce6609639302921fc20d0c5c26dc52d8fbea76c78a2e7d6d8b047f5.
//
// Solidity: e DeployMultisigContract(adminList address[], requirement uint256)
func (_InitContract *InitContractFilterer) WatchDeployMultisigContract(opts *bind.WatchOpts, sink chan<- *InitContractDeployMultisigContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "DeployMultisigContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractDeployMultisigContract)
				if err := _InitContract.contract.UnpackLog(event, "DeployMultisigContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractExecuteRequestIterator is returned from FilterExecuteRequest and is used to iterate over the raw logs and unpacked data for ExecuteRequest events raised by the InitContract contract.
type InitContractExecuteRequestIterator struct {
	Event *InitContractExecuteRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractExecuteRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractExecuteRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractExecuteRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractExecuteRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractExecuteRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractExecuteRequest represents a ExecuteRequest event raised by the InitContract contract.
type InitContractExecuteRequest struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequest is a free log retrieval operation binding the contract event 0x55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee.
//
// Solidity: e ExecuteRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) FilterExecuteRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*InitContractExecuteRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "ExecuteRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &InitContractExecuteRequestIterator{contract: _InitContract.contract, event: "ExecuteRequest", logs: logs, sub: sub}, nil
}

// WatchExecuteRequest is a free log subscription operation binding the contract event 0x55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee.
//
// Solidity: e ExecuteRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) WatchExecuteRequest(opts *bind.WatchOpts, sink chan<- *InitContractExecuteRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "ExecuteRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractExecuteRequest)
				if err := _InitContract.contract.UnpackLog(event, "ExecuteRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractExecuteRequestFailureIterator is returned from FilterExecuteRequestFailure and is used to iterate over the raw logs and unpacked data for ExecuteRequestFailure events raised by the InitContract contract.
type InitContractExecuteRequestFailureIterator struct {
	Event *InitContractExecuteRequestFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractExecuteRequestFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractExecuteRequestFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractExecuteRequestFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractExecuteRequestFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractExecuteRequestFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractExecuteRequestFailure represents a ExecuteRequestFailure event raised by the InitContract contract.
type InitContractExecuteRequestFailure struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestFailure is a free log retrieval operation binding the contract event 0x5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f7.
//
// Solidity: e ExecuteRequestFailure(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) FilterExecuteRequestFailure(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*InitContractExecuteRequestFailureIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "ExecuteRequestFailure", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &InitContractExecuteRequestFailureIterator{contract: _InitContract.contract, event: "ExecuteRequestFailure", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestFailure is a free log subscription operation binding the contract event 0x5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f7.
//
// Solidity: e ExecuteRequestFailure(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) WatchExecuteRequestFailure(opts *bind.WatchOpts, sink chan<- *InitContractExecuteRequestFailure, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "ExecuteRequestFailure", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractExecuteRequestFailure)
				if err := _InitContract.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractInitializeIterator is returned from FilterInitialize and is used to iterate over the raw logs and unpacked data for Initialize events raised by the InitContract contract.
type InitContractInitializeIterator struct {
	Event *InitContractInitialize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractInitializeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractInitialize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractInitialize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractInitializeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractInitializeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractInitialize represents a Initialize event raised by the InitContract contract.
type InitContractInitialize struct {
	AdminList   []common.Address
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterInitialize is a free log retrieval operation binding the contract event 0xfa3e1e272694072320aad73a3fadd8876c4bf8f40899c6c7ce2fda9f4e652cfa.
//
// Solidity: e Initialize(adminList address[], requirement uint256)
func (_InitContract *InitContractFilterer) FilterInitialize(opts *bind.FilterOpts) (*InitContractInitializeIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "Initialize")
	if err != nil {
		return nil, err
	}
	return &InitContractInitializeIterator{contract: _InitContract.contract, event: "Initialize", logs: logs, sub: sub}, nil
}

// WatchInitialize is a free log subscription operation binding the contract event 0xfa3e1e272694072320aad73a3fadd8876c4bf8f40899c6c7ce2fda9f4e652cfa.
//
// Solidity: e Initialize(adminList address[], requirement uint256)
func (_InitContract *InitContractFilterer) WatchInitialize(opts *bind.WatchOpts, sink chan<- *InitContractInitialize) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "Initialize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractInitialize)
				if err := _InitContract.contract.UnpackLog(event, "Initialize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractRegisterBranchContractIterator is returned from FilterRegisterBranchContract and is used to iterate over the raw logs and unpacked data for RegisterBranchContract events raised by the InitContract contract.
type InitContractRegisterBranchContractIterator struct {
	Event *InitContractRegisterBranchContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractRegisterBranchContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractRegisterBranchContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractRegisterBranchContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractRegisterBranchContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractRegisterBranchContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractRegisterBranchContract represents a RegisterBranchContract event raised by the InitContract contract.
type InitContractRegisterBranchContract struct {
	Index           *big.Int
	BranchName      string
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterRegisterBranchContract is a free log retrieval operation binding the contract event 0xfa9b2165fc71c1d6ffa03291c7f5d223ea363ec063d747eec9ce2d30d24855ef.
//
// Solidity: e RegisterBranchContract(index uint256, branchName string, contractAddress address)
func (_InitContract *InitContractFilterer) FilterRegisterBranchContract(opts *bind.FilterOpts) (*InitContractRegisterBranchContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "RegisterBranchContract")
	if err != nil {
		return nil, err
	}
	return &InitContractRegisterBranchContractIterator{contract: _InitContract.contract, event: "RegisterBranchContract", logs: logs, sub: sub}, nil
}

// WatchRegisterBranchContract is a free log subscription operation binding the contract event 0xfa9b2165fc71c1d6ffa03291c7f5d223ea363ec063d747eec9ce2d30d24855ef.
//
// Solidity: e RegisterBranchContract(index uint256, branchName string, contractAddress address)
func (_InitContract *InitContractFilterer) WatchRegisterBranchContract(opts *bind.WatchOpts, sink chan<- *InitContractRegisterBranchContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "RegisterBranchContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractRegisterBranchContract)
				if err := _InitContract.contract.UnpackLog(event, "RegisterBranchContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractRegisterLeafContractIterator is returned from FilterRegisterLeafContract and is used to iterate over the raw logs and unpacked data for RegisterLeafContract events raised by the InitContract contract.
type InitContractRegisterLeafContractIterator struct {
	Event *InitContractRegisterLeafContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractRegisterLeafContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractRegisterLeafContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractRegisterLeafContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractRegisterLeafContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractRegisterLeafContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractRegisterLeafContract represents a RegisterLeafContract event raised by the InitContract contract.
type InitContractRegisterLeafContract struct {
	BranchAddress common.Address
	AddressType   *big.Int
	LeafAddress   []common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRegisterLeafContract is a free log retrieval operation binding the contract event 0xc7b359b1e189b7d721be7f0765a8d745be718566b8e67cbd2728dae5d6fd64b6.
//
// Solidity: e RegisterLeafContract(branchAddress address, addressType uint256, leafAddress address[])
func (_InitContract *InitContractFilterer) FilterRegisterLeafContract(opts *bind.FilterOpts) (*InitContractRegisterLeafContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "RegisterLeafContract")
	if err != nil {
		return nil, err
	}
	return &InitContractRegisterLeafContractIterator{contract: _InitContract.contract, event: "RegisterLeafContract", logs: logs, sub: sub}, nil
}

// WatchRegisterLeafContract is a free log subscription operation binding the contract event 0xc7b359b1e189b7d721be7f0765a8d745be718566b8e67cbd2728dae5d6fd64b6.
//
// Solidity: e RegisterLeafContract(branchAddress address, addressType uint256, leafAddress address[])
func (_InitContract *InitContractFilterer) WatchRegisterLeafContract(opts *bind.WatchOpts, sink chan<- *InitContractRegisterLeafContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "RegisterLeafContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractRegisterLeafContract)
				if err := _InitContract.contract.UnpackLog(event, "RegisterLeafContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractRevokeConfirmationIterator is returned from FilterRevokeConfirmation and is used to iterate over the raw logs and unpacked data for RevokeConfirmation events raised by the InitContract contract.
type InitContractRevokeConfirmationIterator struct {
	Event *InitContractRevokeConfirmation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractRevokeConfirmationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractRevokeConfirmation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractRevokeConfirmation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractRevokeConfirmationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractRevokeConfirmationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractRevokeConfirmation represents a RevokeConfirmation event raised by the InitContract contract.
type InitContractRevokeConfirmation struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRevokeConfirmation is a free log retrieval operation binding the contract event 0x0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17.
//
// Solidity: e RevokeConfirmation(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) FilterRevokeConfirmation(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*InitContractRevokeConfirmationIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "RevokeConfirmation", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &InitContractRevokeConfirmationIterator{contract: _InitContract.contract, event: "RevokeConfirmation", logs: logs, sub: sub}, nil
}

// WatchRevokeConfirmation is a free log subscription operation binding the contract event 0x0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17.
//
// Solidity: e RevokeConfirmation(index indexed uint256, from indexed address, timestamp uint256)
func (_InitContract *InitContractFilterer) WatchRevokeConfirmation(opts *bind.WatchOpts, sink chan<- *InitContractRevokeConfirmation, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "RevokeConfirmation", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractRevokeConfirmation)
				if err := _InitContract.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractSubmitRequestIterator is returned from FilterSubmitRequest and is used to iterate over the raw logs and unpacked data for SubmitRequest events raised by the InitContract contract.
type InitContractSubmitRequestIterator struct {
	Event *InitContractSubmitRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractSubmitRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractSubmitRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractSubmitRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractSubmitRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractSubmitRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractSubmitRequest represents a SubmitRequest event raised by the InitContract contract.
type InitContractSubmitRequest struct {
	Index     *big.Int
	From      common.Address
	To        common.Address
	Value     *big.Int
	Data      []byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSubmitRequest is a free log retrieval operation binding the contract event 0xd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb.
//
// Solidity: e SubmitRequest(index indexed uint256, from indexed address, to address, value uint256, data bytes, timestamp uint256)
func (_InitContract *InitContractFilterer) FilterSubmitRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*InitContractSubmitRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "SubmitRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &InitContractSubmitRequestIterator{contract: _InitContract.contract, event: "SubmitRequest", logs: logs, sub: sub}, nil
}

// WatchSubmitRequest is a free log subscription operation binding the contract event 0xd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb.
//
// Solidity: e SubmitRequest(index indexed uint256, from indexed address, to address, value uint256, data bytes, timestamp uint256)
func (_InitContract *InitContractFilterer) WatchSubmitRequest(opts *bind.WatchOpts, sink chan<- *InitContractSubmitRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "SubmitRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractSubmitRequest)
				if err := _InitContract.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractUnregisterBranchContractIterator is returned from FilterUnregisterBranchContract and is used to iterate over the raw logs and unpacked data for UnregisterBranchContract events raised by the InitContract contract.
type InitContractUnregisterBranchContractIterator struct {
	Event *InitContractUnregisterBranchContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractUnregisterBranchContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractUnregisterBranchContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractUnregisterBranchContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractUnregisterBranchContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractUnregisterBranchContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractUnregisterBranchContract represents a UnregisterBranchContract event raised by the InitContract contract.
type InitContractUnregisterBranchContract struct {
	Index           *big.Int
	BranchName      string
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnregisterBranchContract is a free log retrieval operation binding the contract event 0x67785cf16c29d07570d5093a10f1bf680274ff9ddb015bb801999c18cd558fa4.
//
// Solidity: e UnregisterBranchContract(index uint256, branchName string, contractAddress address)
func (_InitContract *InitContractFilterer) FilterUnregisterBranchContract(opts *bind.FilterOpts) (*InitContractUnregisterBranchContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "UnregisterBranchContract")
	if err != nil {
		return nil, err
	}
	return &InitContractUnregisterBranchContractIterator{contract: _InitContract.contract, event: "UnregisterBranchContract", logs: logs, sub: sub}, nil
}

// WatchUnregisterBranchContract is a free log subscription operation binding the contract event 0x67785cf16c29d07570d5093a10f1bf680274ff9ddb015bb801999c18cd558fa4.
//
// Solidity: e UnregisterBranchContract(index uint256, branchName string, contractAddress address)
func (_InitContract *InitContractFilterer) WatchUnregisterBranchContract(opts *bind.WatchOpts, sink chan<- *InitContractUnregisterBranchContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "UnregisterBranchContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractUnregisterBranchContract)
				if err := _InitContract.contract.UnpackLog(event, "UnregisterBranchContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractUnregisterLeafContractIterator is returned from FilterUnregisterLeafContract and is used to iterate over the raw logs and unpacked data for UnregisterLeafContract events raised by the InitContract contract.
type InitContractUnregisterLeafContractIterator struct {
	Event *InitContractUnregisterLeafContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractUnregisterLeafContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractUnregisterLeafContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractUnregisterLeafContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractUnregisterLeafContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractUnregisterLeafContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractUnregisterLeafContract represents a UnregisterLeafContract event raised by the InitContract contract.
type InitContractUnregisterLeafContract struct {
	BranchAddress common.Address
	AddressType   *big.Int
	LeafAddress   common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUnregisterLeafContract is a free log retrieval operation binding the contract event 0x58b09a47044d0872fa22b29a2c4d30639d1e6a48d8434efcb9f6994e1b3755e3.
//
// Solidity: e UnregisterLeafContract(branchAddress address, addressType uint256, leafAddress address)
func (_InitContract *InitContractFilterer) FilterUnregisterLeafContract(opts *bind.FilterOpts) (*InitContractUnregisterLeafContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "UnregisterLeafContract")
	if err != nil {
		return nil, err
	}
	return &InitContractUnregisterLeafContractIterator{contract: _InitContract.contract, event: "UnregisterLeafContract", logs: logs, sub: sub}, nil
}

// WatchUnregisterLeafContract is a free log subscription operation binding the contract event 0x58b09a47044d0872fa22b29a2c4d30639d1e6a48d8434efcb9f6994e1b3755e3.
//
// Solidity: e UnregisterLeafContract(branchAddress address, addressType uint256, leafAddress address)
func (_InitContract *InitContractFilterer) WatchUnregisterLeafContract(opts *bind.WatchOpts, sink chan<- *InitContractUnregisterLeafContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "UnregisterLeafContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractUnregisterLeafContract)
				if err := _InitContract.contract.UnpackLog(event, "UnregisterLeafContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractUpdateBranchContractIterator is returned from FilterUpdateBranchContract and is used to iterate over the raw logs and unpacked data for UpdateBranchContract events raised by the InitContract contract.
type InitContractUpdateBranchContractIterator struct {
	Event *InitContractUpdateBranchContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractUpdateBranchContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractUpdateBranchContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractUpdateBranchContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractUpdateBranchContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractUpdateBranchContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractUpdateBranchContract represents a UpdateBranchContract event raised by the InitContract contract.
type InitContractUpdateBranchContract struct {
	Index       *big.Int
	BranchName  string
	PrevAddress common.Address
	CurAddress  common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateBranchContract is a free log retrieval operation binding the contract event 0x6ebec3bc09570e3cf26482a73a6ff7af913480e4d50ccadf106ce6f33d560ddd.
//
// Solidity: e UpdateBranchContract(index uint256, branchName string, prevAddress address, curAddress address)
func (_InitContract *InitContractFilterer) FilterUpdateBranchContract(opts *bind.FilterOpts) (*InitContractUpdateBranchContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "UpdateBranchContract")
	if err != nil {
		return nil, err
	}
	return &InitContractUpdateBranchContractIterator{contract: _InitContract.contract, event: "UpdateBranchContract", logs: logs, sub: sub}, nil
}

// WatchUpdateBranchContract is a free log subscription operation binding the contract event 0x6ebec3bc09570e3cf26482a73a6ff7af913480e4d50ccadf106ce6f33d560ddd.
//
// Solidity: e UpdateBranchContract(index uint256, branchName string, prevAddress address, curAddress address)
func (_InitContract *InitContractFilterer) WatchUpdateBranchContract(opts *bind.WatchOpts, sink chan<- *InitContractUpdateBranchContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "UpdateBranchContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractUpdateBranchContract)
				if err := _InitContract.contract.UnpackLog(event, "UpdateBranchContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractUpdateLeafContractIterator is returned from FilterUpdateLeafContract and is used to iterate over the raw logs and unpacked data for UpdateLeafContract events raised by the InitContract contract.
type InitContractUpdateLeafContractIterator struct {
	Event *InitContractUpdateLeafContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractUpdateLeafContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractUpdateLeafContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractUpdateLeafContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractUpdateLeafContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractUpdateLeafContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractUpdateLeafContract represents a UpdateLeafContract event raised by the InitContract contract.
type InitContractUpdateLeafContract struct {
	BranchAddress    common.Address
	AddressType      *big.Int
	PrevLeafAddress  common.Address
	CurLeafAddress   common.Address
	ExtraLeafAddress common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterUpdateLeafContract is a free log retrieval operation binding the contract event 0x43341da6506b6e80e576b49a91bffc0dd90c6f218b6b19d753caf865a9a5caf4.
//
// Solidity: e UpdateLeafContract(branchAddress address, addressType uint256, prevLeafAddress address, curLeafAddress address, extraLeafAddress address)
func (_InitContract *InitContractFilterer) FilterUpdateLeafContract(opts *bind.FilterOpts) (*InitContractUpdateLeafContractIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "UpdateLeafContract")
	if err != nil {
		return nil, err
	}
	return &InitContractUpdateLeafContractIterator{contract: _InitContract.contract, event: "UpdateLeafContract", logs: logs, sub: sub}, nil
}

// WatchUpdateLeafContract is a free log subscription operation binding the contract event 0x43341da6506b6e80e576b49a91bffc0dd90c6f218b6b19d753caf865a9a5caf4.
//
// Solidity: e UpdateLeafContract(branchAddress address, addressType uint256, prevLeafAddress address, curLeafAddress address, extraLeafAddress address)
func (_InitContract *InitContractFilterer) WatchUpdateLeafContract(opts *bind.WatchOpts, sink chan<- *InitContractUpdateLeafContract) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "UpdateLeafContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractUpdateLeafContract)
				if err := _InitContract.contract.UnpackLog(event, "UpdateLeafContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InitContractUpdateRequirementIterator is returned from FilterUpdateRequirement and is used to iterate over the raw logs and unpacked data for UpdateRequirement events raised by the InitContract contract.
type InitContractUpdateRequirementIterator struct {
	Event *InitContractUpdateRequirement // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitContractUpdateRequirementIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitContractUpdateRequirement)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitContractUpdateRequirement)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitContractUpdateRequirementIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitContractUpdateRequirementIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitContractUpdateRequirement represents a UpdateRequirement event raised by the InitContract contract.
type InitContractUpdateRequirement struct {
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequirement is a free log retrieval operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: e UpdateRequirement(requirement uint256)
func (_InitContract *InitContractFilterer) FilterUpdateRequirement(opts *bind.FilterOpts) (*InitContractUpdateRequirementIterator, error) {

	logs, sub, err := _InitContract.contract.FilterLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return &InitContractUpdateRequirementIterator{contract: _InitContract.contract, event: "UpdateRequirement", logs: logs, sub: sub}, nil
}

// WatchUpdateRequirement is a free log subscription operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: e UpdateRequirement(requirement uint256)
func (_InitContract *InitContractFilterer) WatchUpdateRequirement(opts *bind.WatchOpts, sink chan<- *InitContractUpdateRequirement) (event.Subscription, error) {

	logs, sub, err := _InitContract.contract.WatchLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitContractUpdateRequirement)
				if err := _InitContract.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseABI is the input ABI used to generate the binding from.
const MultisigBaseABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"name\":\"To\",\"type\":\"address\"},{\"name\":\"Value\",\"type\":\"uint256\"},{\"name\":\"Data\",\"type\":\"bytes\"},{\"name\":\"ConfirmationCount\",\"type\":\"uint256\"},{\"name\":\"Pending\",\"type\":\"bool\"},{\"name\":\"Executed\",\"type\":\"bool\"},{\"name\":\"Canceled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"},{\"name\":\"_pending\",\"type\":\"bool\"},{\"name\":\"_executed\",\"type\":\"bool\"},{\"name\":\"_canceled\",\"type\":\"bool\"}],\"name\":\"getRequestIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"deleteAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastClearedIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"executeRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"confirmRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"updateRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_adminList\",\"type\":\"address[]\"},{\"name\":\"_requirement\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adminList\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"DeployMultisigContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"DeleteAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"UpdateRequirement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ClearRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SubmitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ConfirmRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CancelRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExecuteRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExecuteRequestFailure\",\"type\":\"event\"}]"

// MultisigBaseBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const MultisigBaseBinRuntime = `0x6080604052600436106100da5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b81604581146100df5780631e482f82146101ac57806320ea8d861461022657806327e1f7df146102405780632d9c3439146102615780634f97638f1461028857806358d658801461029d5780635badbe4c146102b25780636e417c69146102c757806370480275146102df578063a2320f0314610300578063a6b2c43714610369578063b756393014610381578063c3d5fd3914610396578063c47afb3a146103ab575b600080fd5b3480156100eb57600080fd5b506100f76004356103c3565b60408051600160a060020a0389168152602080820189905260608201879052851515608083015284151560a083015283151560c083015260e0928201838152885193830193909352875191929161010084019189019080838360005b8381101561016b578181015183820152602001610153565b50505050905090810190601f1680156101985780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156101b857600080fd5b506101d66004356024356044351515606435151560843515156104bc565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102125781810151838201526020016101fa565b505050509050019250505060405180910390f35b34801561023257600080fd5b5061023e600435610699565b005b34801561024c57600080fd5b5061023e600160a060020a036004351661087b565b34801561026d57600080fd5b50610276610a2b565b60408051918252519081900360200190f35b34801561029457600080fd5b5061023e610a31565b3480156102a957600080fd5b50610276610af7565b3480156102be57600080fd5b50610276610afc565b3480156102d357600080fd5b5061023e600435610b02565b3480156102eb57600080fd5b5061023e600160a060020a0360043516610cea565b34801561030c57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261023e948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610e309650505050505050565b34801561037557600080fd5b5061023e60043561106d565b34801561038d57600080fd5b5061027661121c565b3480156103a257600080fd5b506101d6611222565b3480156103b757600080fd5b5061023e600435611285565b60008181526005602090815260408083208054600180830154600484015460068501546002958601805488516101009682161587026000190190911697909704601f81018a90048a0288018a0190985287875289986060988a98899889988998600160a060020a03909216979196919460ff8084169592840481169462010000909404169291879183018282801561049c5780601f106104715761010080835404028352916020019161049c565b820191906000526020600020905b81548152906001019060200180831161047f57829003601f168201915b505050505094509650965096509650965096509650919395979092949650565b6060600080828715806104d157506002548810155b156104dc5760025497505b600092508891505b8782101561059157600082815260056020526040902054600160a060020a031615801590610529575060008281526005602052604090206006015460ff161515871515145b80156105515750600082815260056020526040902060060154610100900460ff161515861515145b801561057a575060008281526005602052604090206006015462010000900460ff161515851515145b15610586576001830192505b6001909101906104e4565b826040519080825280602002602001820160405280156105bb578160200160208202803883390190505b509050600092508891505b8782101561068d57600082815260056020526040902054600160a060020a03161580159061060b575060008281526005602052604090206006015460ff161515871515145b80156106335750600082815260056020526040902060060154610100900460ff161515861515145b801561065c575060008281526005602052604090206006015462010000900460ff161515851515145b156106825781818481518110151561067057fe5b60209081029091010152600192909201915b6001909101906105c6565b98975050505050505050565b3360008181526004602052604090205460ff1615156106b757600080fd5b60008281526005602081815260408084203380865293019091529091205483919060ff1615156106e657600080fd5b6000848152600560205260409020600601548490610100900460ff161561070c57600080fd5b600085815260056020526040902060060154859062010000900460ff161561073357600080fd5b60008681526005602081815260408084203385528084018352908420805460ff1916905592899052526004015461077190600163ffffffff61130c16565b6000878152600560209081526040918290206004019290925580514281529051339289927f0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17929081900390910190a360015460008781526005602052604090206004015410156107f8576000868152600560205260409020600601805460ff191660011790555b600086815260056020526040902060030154600160a060020a031633141561087357600086815260056020908152604091829020600601805462ff000019166201000017905581514281529151339289927f25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce192918290030190a35b505050505050565b600033301461088957600080fd5b600160a060020a038216600090815260046020526040902054829060ff1615156108b257600080fd5b6000546108c690600163ffffffff61130c16565b600154603282111580156108da5750818111155b80156108e557508015155b80156108f057508115155b15156108fb57600080fd5b600160a060020a0385166000908152600460205260408120805460ff1916905593505b600054600019018410156109d45784600160a060020a031660008581548110151561094557fe5b600091825260209091200154600160a060020a031614156109c95760008054600019810190811061097257fe5b60009182526020822001548154600160a060020a0390911691908690811061099657fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055506109d4565b60019093019261091e565b6000805460001901906109e7908261135f565b506109f0610a31565b604051600160a060020a038616907f1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc256522090600090a25050505050565b60035481565b6000333014610a3f57600080fd5b506003545b600254811015610abb57600081815260056020526040902060060154610100900460ff16158015610a8d575060008181526005602052604090206006015462010000900460ff16155b15610ab3576000818152600560205260409020600601805462ff00001916620100001790555b600101610a44565b6002546003556040805142815290517fb9ce9c85727b055bd75ed2418c65d65f31157821337419862d2042439d60168d9181900360200190a150565b603281565b60025481565b3360008181526004602052604081205490919060ff161515610b2357600080fd5b600083815260056020526040902060060154839060ff1615610b4457600080fd5b6000848152600560205260409020600601548490610100900460ff1615610b6a57600080fd5b600085815260056020526040902060060154859062010000900460ff1615610b9157600080fd5b60008681526005602090815260409182902060068101805461010061ff001990911681179091558154600180840154600280860180548951948116159096026000190190951604601f8101879004870283018701909752868252939a50610c5f95600160a060020a0390921694919290918390830182828015610c555780601f10610c2a57610100808354040283529160200191610c55565b820191906000526020600020905b815481529060010190602001808311610c3857829003601f168201915b5050505050611323565b15610ca057604080514281529051339188917f55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee9181900360200190a3610873565b604080514281529051339188917f5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f79181900360200190a350505050600601805461ff001916905550565b333014610cf657600080fd5b600160a060020a038116600090815260046020526040902054819060ff1615610d1e57600080fd5b81600160a060020a0381161515610d3457600080fd5b600054610d4890600163ffffffff61134616565b60015460328211158015610d5c5750818111155b8015610d6757508015155b8015610d7257508115155b1515610d7d57600080fd5b600160a060020a0385166000818152600460205260408120805460ff19166001908117909155815490810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301805473ffffffffffffffffffffffffffffffffffffffff19169091179055610df5610a31565b604051600160a060020a038616907fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba90600090a25050505050565b600083600160a060020a0381161515610e4857600080fd5b3360008181526004602052604090205460ff161515610e6657600080fd5b600280546040805161010081018252600160a060020a038a8116825260208083018b81528385018b8152336060860152600060808601819052600160a0870181905260c0870182905260e08701829052888252600585529690208551815473ffffffffffffffffffffffffffffffffffffffff191695169490941784559051948301949094559251805194985091949093610f08939185019290910190611388565b50606082810151600383018054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff19909116179055608080850151600485015560a0808601516006909501805460c088015160e0909801511515620100000262ff0000199815156101000261ff001998151560ff19909316929092179790971617969096169490941790945560408051918b16825260208083018b9052429383018490529082018581528951958301959095528851339589957fd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb958e958e958e95929491939192918401919086019080838360005b83811015611014578181015183820152602001610ffc565b50505050905090810190601f1680156110415780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a360025461106590600163ffffffff61134616565b600255610873835b3360008181526004602052604090205460ff16151561108b57600080fd5b600082815260056020526040902060060154829060ff1615156110ad57600080fd5b60008381526005602081815260408084203380865293019091529091205484919060ff16156110db57600080fd5b6000858152600560205260409020600601548590610100900460ff161561110157600080fd5b600086815260056020526040902060060154869062010000900460ff161561112857600080fd5b60008781526005602081815260408084203385528084018352908420805460ff19166001908117909155938b90529190526004015461116c9163ffffffff61134616565b600088815260056020908152604091829020600401929092558051428152905133928a927f4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042929081900390910190a3600154600088815260056020526040902060040154106111ef576000878152600560205260409020600601805460ff191690555b60008781526005602052604090206006015460ff1615156112135761121387610b02565b50505050505050565b60015481565b6060600080548060200260200160405190810160405280929190818152602001828054801561127a57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161125c575b505050505090505b90565b33301461129157600080fd5b60005481603282118015906112a65750818111155b80156112b157508015155b80156112bc57508115155b15156112c757600080fd5b60018390556112d4610a31565b6040805184815290517f8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f9181900360200190a1505050565b6000808383111561131c57600080fd5b5050900390565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b60008282018381101561135857600080fd5b9392505050565b81548183558181111561138357600083815260209020611383918101908301611406565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106113c957805160ff19168380011785556113f6565b828001600101855582156113f6579182015b828111156113f65782518255916020019190600101906113db565b50611402929150611406565b5090565b61128291905b80821115611402576000815560010161140c5600a165627a7a72305820a9c456202b5f0aa6a91919c730608d39b488fe371afcca1c1563ae1cccfb1f410029`

// MultisigBaseBin is the compiled bytecode used for deploying new contracts.
const MultisigBaseBin = `0x60806040523480156200001157600080fd5b50604051620016eb380380620016eb83398101604052805160208201519101805190919060009082603282118015906200004b5750818111155b80156200005757508015155b80156200006357508115155b15156200006f57600080fd5b600092505b845183101562000147576004600086858151811015156200009157fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff16158015620000e757508483815181101515620000cf57fe5b90602001906020020151600160a060020a0316600014155b1515620000f357600080fd5b60016004600087868151811015156200010857fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff19169115159190911790556001929092019162000074565b84516200015c906000906020880190620001fb565b50836001819055507f14aa44bb5ce6609639302921fc20d0c5c26dc52d8fbea76c78a2e7d6d8b047f5600060015460405180806020018381526020018281038252848181548152602001915080548015620001e157602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311620001c2575b5050935050505060405180910390a150505050506200028f565b82805482825590600052602060002090810192821562000253579160200282015b82811115620002535782518254600160a060020a031916600160a060020a039091161782556020909201916001909101906200021c565b506200026192915062000265565b5090565b6200028c91905b8082111562000261578054600160a060020a03191681556001016200026c565b90565b61144c806200029f6000396000f3006080604052600436106100da5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b81604581146100df5780631e482f82146101ac57806320ea8d861461022657806327e1f7df146102405780632d9c3439146102615780634f97638f1461028857806358d658801461029d5780635badbe4c146102b25780636e417c69146102c757806370480275146102df578063a2320f0314610300578063a6b2c43714610369578063b756393014610381578063c3d5fd3914610396578063c47afb3a146103ab575b600080fd5b3480156100eb57600080fd5b506100f76004356103c3565b60408051600160a060020a0389168152602080820189905260608201879052851515608083015284151560a083015283151560c083015260e0928201838152885193830193909352875191929161010084019189019080838360005b8381101561016b578181015183820152602001610153565b50505050905090810190601f1680156101985780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156101b857600080fd5b506101d66004356024356044351515606435151560843515156104bc565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102125781810151838201526020016101fa565b505050509050019250505060405180910390f35b34801561023257600080fd5b5061023e600435610699565b005b34801561024c57600080fd5b5061023e600160a060020a036004351661087b565b34801561026d57600080fd5b50610276610a2b565b60408051918252519081900360200190f35b34801561029457600080fd5b5061023e610a31565b3480156102a957600080fd5b50610276610af7565b3480156102be57600080fd5b50610276610afc565b3480156102d357600080fd5b5061023e600435610b02565b3480156102eb57600080fd5b5061023e600160a060020a0360043516610cea565b34801561030c57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261023e948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610e309650505050505050565b34801561037557600080fd5b5061023e60043561106d565b34801561038d57600080fd5b5061027661121c565b3480156103a257600080fd5b506101d6611222565b3480156103b757600080fd5b5061023e600435611285565b60008181526005602090815260408083208054600180830154600484015460068501546002958601805488516101009682161587026000190190911697909704601f81018a90048a0288018a0190985287875289986060988a98899889988998600160a060020a03909216979196919460ff8084169592840481169462010000909404169291879183018282801561049c5780601f106104715761010080835404028352916020019161049c565b820191906000526020600020905b81548152906001019060200180831161047f57829003601f168201915b505050505094509650965096509650965096509650919395979092949650565b6060600080828715806104d157506002548810155b156104dc5760025497505b600092508891505b8782101561059157600082815260056020526040902054600160a060020a031615801590610529575060008281526005602052604090206006015460ff161515871515145b80156105515750600082815260056020526040902060060154610100900460ff161515861515145b801561057a575060008281526005602052604090206006015462010000900460ff161515851515145b15610586576001830192505b6001909101906104e4565b826040519080825280602002602001820160405280156105bb578160200160208202803883390190505b509050600092508891505b8782101561068d57600082815260056020526040902054600160a060020a03161580159061060b575060008281526005602052604090206006015460ff161515871515145b80156106335750600082815260056020526040902060060154610100900460ff161515861515145b801561065c575060008281526005602052604090206006015462010000900460ff161515851515145b156106825781818481518110151561067057fe5b60209081029091010152600192909201915b6001909101906105c6565b98975050505050505050565b3360008181526004602052604090205460ff1615156106b757600080fd5b60008281526005602081815260408084203380865293019091529091205483919060ff1615156106e657600080fd5b6000848152600560205260409020600601548490610100900460ff161561070c57600080fd5b600085815260056020526040902060060154859062010000900460ff161561073357600080fd5b60008681526005602081815260408084203385528084018352908420805460ff1916905592899052526004015461077190600163ffffffff61130c16565b6000878152600560209081526040918290206004019290925580514281529051339289927f0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17929081900390910190a360015460008781526005602052604090206004015410156107f8576000868152600560205260409020600601805460ff191660011790555b600086815260056020526040902060030154600160a060020a031633141561087357600086815260056020908152604091829020600601805462ff000019166201000017905581514281529151339289927f25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce192918290030190a35b505050505050565b600033301461088957600080fd5b600160a060020a038216600090815260046020526040902054829060ff1615156108b257600080fd5b6000546108c690600163ffffffff61130c16565b600154603282111580156108da5750818111155b80156108e557508015155b80156108f057508115155b15156108fb57600080fd5b600160a060020a0385166000908152600460205260408120805460ff1916905593505b600054600019018410156109d45784600160a060020a031660008581548110151561094557fe5b600091825260209091200154600160a060020a031614156109c95760008054600019810190811061097257fe5b60009182526020822001548154600160a060020a0390911691908690811061099657fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055506109d4565b60019093019261091e565b6000805460001901906109e7908261135f565b506109f0610a31565b604051600160a060020a038616907f1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc256522090600090a25050505050565b60035481565b6000333014610a3f57600080fd5b506003545b600254811015610abb57600081815260056020526040902060060154610100900460ff16158015610a8d575060008181526005602052604090206006015462010000900460ff16155b15610ab3576000818152600560205260409020600601805462ff00001916620100001790555b600101610a44565b6002546003556040805142815290517fb9ce9c85727b055bd75ed2418c65d65f31157821337419862d2042439d60168d9181900360200190a150565b603281565b60025481565b3360008181526004602052604081205490919060ff161515610b2357600080fd5b600083815260056020526040902060060154839060ff1615610b4457600080fd5b6000848152600560205260409020600601548490610100900460ff1615610b6a57600080fd5b600085815260056020526040902060060154859062010000900460ff1615610b9157600080fd5b60008681526005602090815260409182902060068101805461010061ff001990911681179091558154600180840154600280860180548951948116159096026000190190951604601f8101879004870283018701909752868252939a50610c5f95600160a060020a0390921694919290918390830182828015610c555780601f10610c2a57610100808354040283529160200191610c55565b820191906000526020600020905b815481529060010190602001808311610c3857829003601f168201915b5050505050611323565b15610ca057604080514281529051339188917f55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee9181900360200190a3610873565b604080514281529051339188917f5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f79181900360200190a350505050600601805461ff001916905550565b333014610cf657600080fd5b600160a060020a038116600090815260046020526040902054819060ff1615610d1e57600080fd5b81600160a060020a0381161515610d3457600080fd5b600054610d4890600163ffffffff61134616565b60015460328211158015610d5c5750818111155b8015610d6757508015155b8015610d7257508115155b1515610d7d57600080fd5b600160a060020a0385166000818152600460205260408120805460ff19166001908117909155815490810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301805473ffffffffffffffffffffffffffffffffffffffff19169091179055610df5610a31565b604051600160a060020a038616907fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba90600090a25050505050565b600083600160a060020a0381161515610e4857600080fd5b3360008181526004602052604090205460ff161515610e6657600080fd5b600280546040805161010081018252600160a060020a038a8116825260208083018b81528385018b8152336060860152600060808601819052600160a0870181905260c0870182905260e08701829052888252600585529690208551815473ffffffffffffffffffffffffffffffffffffffff191695169490941784559051948301949094559251805194985091949093610f08939185019290910190611388565b50606082810151600383018054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff19909116179055608080850151600485015560a0808601516006909501805460c088015160e0909801511515620100000262ff0000199815156101000261ff001998151560ff19909316929092179790971617969096169490941790945560408051918b16825260208083018b9052429383018490529082018581528951958301959095528851339589957fd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb958e958e958e95929491939192918401919086019080838360005b83811015611014578181015183820152602001610ffc565b50505050905090810190601f1680156110415780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a360025461106590600163ffffffff61134616565b600255610873835b3360008181526004602052604090205460ff16151561108b57600080fd5b600082815260056020526040902060060154829060ff1615156110ad57600080fd5b60008381526005602081815260408084203380865293019091529091205484919060ff16156110db57600080fd5b6000858152600560205260409020600601548590610100900460ff161561110157600080fd5b600086815260056020526040902060060154869062010000900460ff161561112857600080fd5b60008781526005602081815260408084203385528084018352908420805460ff19166001908117909155938b90529190526004015461116c9163ffffffff61134616565b600088815260056020908152604091829020600401929092558051428152905133928a927f4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042929081900390910190a3600154600088815260056020526040902060040154106111ef576000878152600560205260409020600601805460ff191690555b60008781526005602052604090206006015460ff1615156112135761121387610b02565b50505050505050565b60015481565b6060600080548060200260200160405190810160405280929190818152602001828054801561127a57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161125c575b505050505090505b90565b33301461129157600080fd5b60005481603282118015906112a65750818111155b80156112b157508015155b80156112bc57508115155b15156112c757600080fd5b60018390556112d4610a31565b6040805184815290517f8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f9181900360200190a1505050565b6000808383111561131c57600080fd5b5050900390565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b60008282018381101561135857600080fd5b9392505050565b81548183558181111561138357600083815260209020611383918101908301611406565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106113c957805160ff19168380011785556113f6565b828001600101855582156113f6579182015b828111156113f65782518255916020019190600101906113db565b50611402929150611406565b5090565b61128291905b80821115611402576000815560010161140c5600a165627a7a72305820a9c456202b5f0aa6a91919c730608d39b488fe371afcca1c1563ae1cccfb1f410029`

// DeployMultisigBase deploys a new klaytn contract, binding an instance of MultisigBase to it.
func DeployMultisigBase(auth *bind.TransactOpts, backend bind.ContractBackend, _adminList []common.Address, _requirement *big.Int) (common.Address, *types.Transaction, *MultisigBase, error) {
	parsed, err := abi.JSON(strings.NewReader(MultisigBaseABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MultisigBaseBin), backend, _adminList, _requirement)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MultisigBase{MultisigBaseCaller: MultisigBaseCaller{contract: contract}, MultisigBaseTransactor: MultisigBaseTransactor{contract: contract}, MultisigBaseFilterer: MultisigBaseFilterer{contract: contract}}, nil
}

// MultisigBase is an auto generated Go binding around a klaytn contract.
type MultisigBase struct {
	MultisigBaseCaller     // Read-only binding to the contract
	MultisigBaseTransactor // Write-only binding to the contract
	MultisigBaseFilterer   // Log filterer for contract events
}

// MultisigBaseCaller is an auto generated read-only Go binding around a klaytn contract.
type MultisigBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultisigBaseTransactor is an auto generated write-only Go binding around a klaytn contract.
type MultisigBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultisigBaseFilterer is an auto generated log filtering Go binding around a klaytn contract events.
type MultisigBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultisigBaseSession is an auto generated Go binding around a klaytn contract,
// with pre-set call and transact options.
type MultisigBaseSession struct {
	Contract     *MultisigBase     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MultisigBaseCallerSession is an auto generated read-only Go binding around a klaytn contract,
// with pre-set call options.
type MultisigBaseCallerSession struct {
	Contract *MultisigBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// MultisigBaseTransactorSession is an auto generated write-only Go binding around a klaytn contract,
// with pre-set transact options.
type MultisigBaseTransactorSession struct {
	Contract     *MultisigBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// MultisigBaseRaw is an auto generated low-level Go binding around a klaytn contract.
type MultisigBaseRaw struct {
	Contract *MultisigBase // Generic contract binding to access the raw methods on
}

// MultisigBaseCallerRaw is an auto generated low-level read-only Go binding around a klaytn contract.
type MultisigBaseCallerRaw struct {
	Contract *MultisigBaseCaller // Generic read-only contract binding to access the raw methods on
}

// MultisigBaseTransactorRaw is an auto generated low-level write-only Go binding around a klaytn contract.
type MultisigBaseTransactorRaw struct {
	Contract *MultisigBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMultisigBase creates a new instance of MultisigBase, bound to a specific deployed contract.
func NewMultisigBase(address common.Address, backend bind.ContractBackend) (*MultisigBase, error) {
	contract, err := bindMultisigBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MultisigBase{MultisigBaseCaller: MultisigBaseCaller{contract: contract}, MultisigBaseTransactor: MultisigBaseTransactor{contract: contract}, MultisigBaseFilterer: MultisigBaseFilterer{contract: contract}}, nil
}

// NewMultisigBaseCaller creates a new read-only instance of MultisigBase, bound to a specific deployed contract.
func NewMultisigBaseCaller(address common.Address, caller bind.ContractCaller) (*MultisigBaseCaller, error) {
	contract, err := bindMultisigBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseCaller{contract: contract}, nil
}

// NewMultisigBaseTransactor creates a new write-only instance of MultisigBase, bound to a specific deployed contract.
func NewMultisigBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*MultisigBaseTransactor, error) {
	contract, err := bindMultisigBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseTransactor{contract: contract}, nil
}

// NewMultisigBaseFilterer creates a new log filterer instance of MultisigBase, bound to a specific deployed contract.
func NewMultisigBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*MultisigBaseFilterer, error) {
	contract, err := bindMultisigBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseFilterer{contract: contract}, nil
}

// bindMultisigBase binds a generic wrapper to an already deployed contract.
func bindMultisigBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MultisigBaseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MultisigBase *MultisigBaseRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MultisigBase.Contract.MultisigBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MultisigBase *MultisigBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultisigBase.Contract.MultisigBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MultisigBase *MultisigBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultisigBase.Contract.MultisigBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MultisigBase *MultisigBaseCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MultisigBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MultisigBase *MultisigBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultisigBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MultisigBase *MultisigBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultisigBase.Contract.contract.Transact(opts, method, params...)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() constant returns(uint256)
func (_MultisigBase *MultisigBaseCaller) MAXADMIN(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MultisigBase.contract.Call(opts, out, "MAX_ADMIN")
	return *ret0, err
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() constant returns(uint256)
func (_MultisigBase *MultisigBaseSession) MAXADMIN() (*big.Int, error) {
	return _MultisigBase.Contract.MAXADMIN(&_MultisigBase.CallOpts)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() constant returns(uint256)
func (_MultisigBase *MultisigBaseCallerSession) MAXADMIN() (*big.Int, error) {
	return _MultisigBase.Contract.MAXADMIN(&_MultisigBase.CallOpts)
}

// GetAdminInfo is a free data retrieval call binding the contract method 0xc3d5fd39.
//
// Solidity: function getAdminInfo() constant returns(address[])
func (_MultisigBase *MultisigBaseCaller) GetAdminInfo(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _MultisigBase.contract.Call(opts, out, "getAdminInfo")
	return *ret0, err
}

// GetAdminInfo is a free data retrieval call binding the contract method 0xc3d5fd39.
//
// Solidity: function getAdminInfo() constant returns(address[])
func (_MultisigBase *MultisigBaseSession) GetAdminInfo() ([]common.Address, error) {
	return _MultisigBase.Contract.GetAdminInfo(&_MultisigBase.CallOpts)
}

// GetAdminInfo is a free data retrieval call binding the contract method 0xc3d5fd39.
//
// Solidity: function getAdminInfo() constant returns(address[])
func (_MultisigBase *MultisigBaseCallerSession) GetAdminInfo() ([]common.Address, error) {
	return _MultisigBase.Contract.GetAdminInfo(&_MultisigBase.CallOpts)
}

// GetRequestIndexes is a free data retrieval call binding the contract method 0x1e482f82.
//
// Solidity: function getRequestIndexes(_from uint256, _to uint256, _pending bool, _executed bool, _canceled bool) constant returns(uint256[])
func (_MultisigBase *MultisigBaseCaller) GetRequestIndexes(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _pending bool, _executed bool, _canceled bool) ([]*big.Int, error) {
	var (
		ret0 = new([]*big.Int)
	)
	out := ret0
	err := _MultisigBase.contract.Call(opts, out, "getRequestIndexes", _from, _to, _pending, _executed, _canceled)
	return *ret0, err
}

// GetRequestIndexes is a free data retrieval call binding the contract method 0x1e482f82.
//
// Solidity: function getRequestIndexes(_from uint256, _to uint256, _pending bool, _executed bool, _canceled bool) constant returns(uint256[])
func (_MultisigBase *MultisigBaseSession) GetRequestIndexes(_from *big.Int, _to *big.Int, _pending bool, _executed bool, _canceled bool) ([]*big.Int, error) {
	return _MultisigBase.Contract.GetRequestIndexes(&_MultisigBase.CallOpts, _from, _to, _pending, _executed, _canceled)
}

// GetRequestIndexes is a free data retrieval call binding the contract method 0x1e482f82.
//
// Solidity: function getRequestIndexes(_from uint256, _to uint256, _pending bool, _executed bool, _canceled bool) constant returns(uint256[])
func (_MultisigBase *MultisigBaseCallerSession) GetRequestIndexes(_from *big.Int, _to *big.Int, _pending bool, _executed bool, _canceled bool) ([]*big.Int, error) {
	return _MultisigBase.Contract.GetRequestIndexes(&_MultisigBase.CallOpts, _from, _to, _pending, _executed, _canceled)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(_index uint256) constant returns(To address, Value uint256, Data bytes, ConfirmationCount uint256, Pending bool, Executed bool, Canceled bool)
func (_MultisigBase *MultisigBaseCaller) GetRequestInfo(opts *bind.CallOpts, _index *big.Int) (struct {
	To                common.Address
	Value             *big.Int
	Data              []byte
	ConfirmationCount *big.Int
	Pending           bool
	Executed          bool
	Canceled          bool
}, error) {
	ret := new(struct {
		To                common.Address
		Value             *big.Int
		Data              []byte
		ConfirmationCount *big.Int
		Pending           bool
		Executed          bool
		Canceled          bool
	})
	out := ret
	err := _MultisigBase.contract.Call(opts, out, "getRequestInfo", _index)
	return *ret, err
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(_index uint256) constant returns(To address, Value uint256, Data bytes, ConfirmationCount uint256, Pending bool, Executed bool, Canceled bool)
func (_MultisigBase *MultisigBaseSession) GetRequestInfo(_index *big.Int) (struct {
	To                common.Address
	Value             *big.Int
	Data              []byte
	ConfirmationCount *big.Int
	Pending           bool
	Executed          bool
	Canceled          bool
}, error) {
	return _MultisigBase.Contract.GetRequestInfo(&_MultisigBase.CallOpts, _index)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(_index uint256) constant returns(To address, Value uint256, Data bytes, ConfirmationCount uint256, Pending bool, Executed bool, Canceled bool)
func (_MultisigBase *MultisigBaseCallerSession) GetRequestInfo(_index *big.Int) (struct {
	To                common.Address
	Value             *big.Int
	Data              []byte
	ConfirmationCount *big.Int
	Pending           bool
	Executed          bool
	Canceled          bool
}, error) {
	return _MultisigBase.Contract.GetRequestInfo(&_MultisigBase.CallOpts, _index)
}

// LastClearedIndex is a free data retrieval call binding the contract method 0x2d9c3439.
//
// Solidity: function lastClearedIndex() constant returns(uint256)
func (_MultisigBase *MultisigBaseCaller) LastClearedIndex(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MultisigBase.contract.Call(opts, out, "lastClearedIndex")
	return *ret0, err
}

// LastClearedIndex is a free data retrieval call binding the contract method 0x2d9c3439.
//
// Solidity: function lastClearedIndex() constant returns(uint256)
func (_MultisigBase *MultisigBaseSession) LastClearedIndex() (*big.Int, error) {
	return _MultisigBase.Contract.LastClearedIndex(&_MultisigBase.CallOpts)
}

// LastClearedIndex is a free data retrieval call binding the contract method 0x2d9c3439.
//
// Solidity: function lastClearedIndex() constant returns(uint256)
func (_MultisigBase *MultisigBaseCallerSession) LastClearedIndex() (*big.Int, error) {
	return _MultisigBase.Contract.LastClearedIndex(&_MultisigBase.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() constant returns(uint256)
func (_MultisigBase *MultisigBaseCaller) RequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MultisigBase.contract.Call(opts, out, "requestCount")
	return *ret0, err
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() constant returns(uint256)
func (_MultisigBase *MultisigBaseSession) RequestCount() (*big.Int, error) {
	return _MultisigBase.Contract.RequestCount(&_MultisigBase.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() constant returns(uint256)
func (_MultisigBase *MultisigBaseCallerSession) RequestCount() (*big.Int, error) {
	return _MultisigBase.Contract.RequestCount(&_MultisigBase.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() constant returns(uint256)
func (_MultisigBase *MultisigBaseCaller) Requirement(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MultisigBase.contract.Call(opts, out, "requirement")
	return *ret0, err
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() constant returns(uint256)
func (_MultisigBase *MultisigBaseSession) Requirement() (*big.Int, error) {
	return _MultisigBase.Contract.Requirement(&_MultisigBase.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() constant returns(uint256)
func (_MultisigBase *MultisigBaseCallerSession) Requirement() (*big.Int, error) {
	return _MultisigBase.Contract.Requirement(&_MultisigBase.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(_admin address) returns()
func (_MultisigBase *MultisigBaseTransactor) AddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "addAdmin", _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(_admin address) returns()
func (_MultisigBase *MultisigBaseSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _MultisigBase.Contract.AddAdmin(&_MultisigBase.TransactOpts, _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(_admin address) returns()
func (_MultisigBase *MultisigBaseTransactorSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _MultisigBase.Contract.AddAdmin(&_MultisigBase.TransactOpts, _admin)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_MultisigBase *MultisigBaseTransactor) ClearRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "clearRequest")
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_MultisigBase *MultisigBaseSession) ClearRequest() (*types.Transaction, error) {
	return _MultisigBase.Contract.ClearRequest(&_MultisigBase.TransactOpts)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_MultisigBase *MultisigBaseTransactorSession) ClearRequest() (*types.Transaction, error) {
	return _MultisigBase.Contract.ClearRequest(&_MultisigBase.TransactOpts)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0xa6b2c437.
//
// Solidity: function confirmRequest(_index uint256) returns()
func (_MultisigBase *MultisigBaseTransactor) ConfirmRequest(opts *bind.TransactOpts, _index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "confirmRequest", _index)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0xa6b2c437.
//
// Solidity: function confirmRequest(_index uint256) returns()
func (_MultisigBase *MultisigBaseSession) ConfirmRequest(_index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.ConfirmRequest(&_MultisigBase.TransactOpts, _index)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0xa6b2c437.
//
// Solidity: function confirmRequest(_index uint256) returns()
func (_MultisigBase *MultisigBaseTransactorSession) ConfirmRequest(_index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.ConfirmRequest(&_MultisigBase.TransactOpts, _index)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(_admin address) returns()
func (_MultisigBase *MultisigBaseTransactor) DeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "deleteAdmin", _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(_admin address) returns()
func (_MultisigBase *MultisigBaseSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _MultisigBase.Contract.DeleteAdmin(&_MultisigBase.TransactOpts, _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(_admin address) returns()
func (_MultisigBase *MultisigBaseTransactorSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _MultisigBase.Contract.DeleteAdmin(&_MultisigBase.TransactOpts, _admin)
}

// ExecuteRequest is a paid mutator transaction binding the contract method 0x6e417c69.
//
// Solidity: function executeRequest(_index uint256) returns()
func (_MultisigBase *MultisigBaseTransactor) ExecuteRequest(opts *bind.TransactOpts, _index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "executeRequest", _index)
}

// ExecuteRequest is a paid mutator transaction binding the contract method 0x6e417c69.
//
// Solidity: function executeRequest(_index uint256) returns()
func (_MultisigBase *MultisigBaseSession) ExecuteRequest(_index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.ExecuteRequest(&_MultisigBase.TransactOpts, _index)
}

// ExecuteRequest is a paid mutator transaction binding the contract method 0x6e417c69.
//
// Solidity: function executeRequest(_index uint256) returns()
func (_MultisigBase *MultisigBaseTransactorSession) ExecuteRequest(_index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.ExecuteRequest(&_MultisigBase.TransactOpts, _index)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(_index uint256) returns()
func (_MultisigBase *MultisigBaseTransactor) RevokeConfirmation(opts *bind.TransactOpts, _index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "revokeConfirmation", _index)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(_index uint256) returns()
func (_MultisigBase *MultisigBaseSession) RevokeConfirmation(_index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.RevokeConfirmation(&_MultisigBase.TransactOpts, _index)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(_index uint256) returns()
func (_MultisigBase *MultisigBaseTransactorSession) RevokeConfirmation(_index *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.RevokeConfirmation(&_MultisigBase.TransactOpts, _index)
}

// SubmitRequest is a paid mutator transaction binding the contract method 0xa2320f03.
//
// Solidity: function submitRequest(_to address, _value uint256, _data bytes) returns()
func (_MultisigBase *MultisigBaseTransactor) SubmitRequest(opts *bind.TransactOpts, _to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "submitRequest", _to, _value, _data)
}

// SubmitRequest is a paid mutator transaction binding the contract method 0xa2320f03.
//
// Solidity: function submitRequest(_to address, _value uint256, _data bytes) returns()
func (_MultisigBase *MultisigBaseSession) SubmitRequest(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _MultisigBase.Contract.SubmitRequest(&_MultisigBase.TransactOpts, _to, _value, _data)
}

// SubmitRequest is a paid mutator transaction binding the contract method 0xa2320f03.
//
// Solidity: function submitRequest(_to address, _value uint256, _data bytes) returns()
func (_MultisigBase *MultisigBaseTransactorSession) SubmitRequest(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _MultisigBase.Contract.SubmitRequest(&_MultisigBase.TransactOpts, _to, _value, _data)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(_requirement uint256) returns()
func (_MultisigBase *MultisigBaseTransactor) UpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _MultisigBase.contract.Transact(opts, "updateRequirement", _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(_requirement uint256) returns()
func (_MultisigBase *MultisigBaseSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.UpdateRequirement(&_MultisigBase.TransactOpts, _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(_requirement uint256) returns()
func (_MultisigBase *MultisigBaseTransactorSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _MultisigBase.Contract.UpdateRequirement(&_MultisigBase.TransactOpts, _requirement)
}

// MultisigBaseAddAdminIterator is returned from FilterAddAdmin and is used to iterate over the raw logs and unpacked data for AddAdmin events raised by the MultisigBase contract.
type MultisigBaseAddAdminIterator struct {
	Event *MultisigBaseAddAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseAddAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseAddAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseAddAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseAddAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseAddAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseAddAdmin represents a AddAdmin event raised by the MultisigBase contract.
type MultisigBaseAddAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddAdmin is a free log retrieval operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: e AddAdmin(admin indexed address)
func (_MultisigBase *MultisigBaseFilterer) FilterAddAdmin(opts *bind.FilterOpts, admin []common.Address) (*MultisigBaseAddAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseAddAdminIterator{contract: _MultisigBase.contract, event: "AddAdmin", logs: logs, sub: sub}, nil
}

// WatchAddAdmin is a free log subscription operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: e AddAdmin(admin indexed address)
func (_MultisigBase *MultisigBaseFilterer) WatchAddAdmin(opts *bind.WatchOpts, sink chan<- *MultisigBaseAddAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseAddAdmin)
				if err := _MultisigBase.contract.UnpackLog(event, "AddAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseCancelRequestIterator is returned from FilterCancelRequest and is used to iterate over the raw logs and unpacked data for CancelRequest events raised by the MultisigBase contract.
type MultisigBaseCancelRequestIterator struct {
	Event *MultisigBaseCancelRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseCancelRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseCancelRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseCancelRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseCancelRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseCancelRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseCancelRequest represents a CancelRequest event raised by the MultisigBase contract.
type MultisigBaseCancelRequest struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCancelRequest is a free log retrieval operation binding the contract event 0x25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce1.
//
// Solidity: e CancelRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterCancelRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*MultisigBaseCancelRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "CancelRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseCancelRequestIterator{contract: _MultisigBase.contract, event: "CancelRequest", logs: logs, sub: sub}, nil
}

// WatchCancelRequest is a free log subscription operation binding the contract event 0x25434cd4ef6bc8bcb8c09466f4a148d49a8808e55c4ff151173394bac0164ce1.
//
// Solidity: e CancelRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchCancelRequest(opts *bind.WatchOpts, sink chan<- *MultisigBaseCancelRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "CancelRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseCancelRequest)
				if err := _MultisigBase.contract.UnpackLog(event, "CancelRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseClearRequestIterator is returned from FilterClearRequest and is used to iterate over the raw logs and unpacked data for ClearRequest events raised by the MultisigBase contract.
type MultisigBaseClearRequestIterator struct {
	Event *MultisigBaseClearRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseClearRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseClearRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseClearRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseClearRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseClearRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseClearRequest represents a ClearRequest event raised by the MultisigBase contract.
type MultisigBaseClearRequest struct {
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClearRequest is a free log retrieval operation binding the contract event 0xb9ce9c85727b055bd75ed2418c65d65f31157821337419862d2042439d60168d.
//
// Solidity: e ClearRequest(timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterClearRequest(opts *bind.FilterOpts) (*MultisigBaseClearRequestIterator, error) {

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return &MultisigBaseClearRequestIterator{contract: _MultisigBase.contract, event: "ClearRequest", logs: logs, sub: sub}, nil
}

// WatchClearRequest is a free log subscription operation binding the contract event 0xb9ce9c85727b055bd75ed2418c65d65f31157821337419862d2042439d60168d.
//
// Solidity: e ClearRequest(timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchClearRequest(opts *bind.WatchOpts, sink chan<- *MultisigBaseClearRequest) (event.Subscription, error) {

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseClearRequest)
				if err := _MultisigBase.contract.UnpackLog(event, "ClearRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseConfirmRequestIterator is returned from FilterConfirmRequest and is used to iterate over the raw logs and unpacked data for ConfirmRequest events raised by the MultisigBase contract.
type MultisigBaseConfirmRequestIterator struct {
	Event *MultisigBaseConfirmRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseConfirmRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseConfirmRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseConfirmRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseConfirmRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseConfirmRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseConfirmRequest represents a ConfirmRequest event raised by the MultisigBase contract.
type MultisigBaseConfirmRequest struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterConfirmRequest is a free log retrieval operation binding the contract event 0x4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042.
//
// Solidity: e ConfirmRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterConfirmRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*MultisigBaseConfirmRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "ConfirmRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseConfirmRequestIterator{contract: _MultisigBase.contract, event: "ConfirmRequest", logs: logs, sub: sub}, nil
}

// WatchConfirmRequest is a free log subscription operation binding the contract event 0x4509facb2564521097d4675ebc3f50a6123df0d145d57229534536e677e7f042.
//
// Solidity: e ConfirmRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchConfirmRequest(opts *bind.WatchOpts, sink chan<- *MultisigBaseConfirmRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "ConfirmRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseConfirmRequest)
				if err := _MultisigBase.contract.UnpackLog(event, "ConfirmRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseDeleteAdminIterator is returned from FilterDeleteAdmin and is used to iterate over the raw logs and unpacked data for DeleteAdmin events raised by the MultisigBase contract.
type MultisigBaseDeleteAdminIterator struct {
	Event *MultisigBaseDeleteAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseDeleteAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseDeleteAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseDeleteAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseDeleteAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseDeleteAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseDeleteAdmin represents a DeleteAdmin event raised by the MultisigBase contract.
type MultisigBaseDeleteAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDeleteAdmin is a free log retrieval operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: e DeleteAdmin(admin indexed address)
func (_MultisigBase *MultisigBaseFilterer) FilterDeleteAdmin(opts *bind.FilterOpts, admin []common.Address) (*MultisigBaseDeleteAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseDeleteAdminIterator{contract: _MultisigBase.contract, event: "DeleteAdmin", logs: logs, sub: sub}, nil
}

// WatchDeleteAdmin is a free log subscription operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: e DeleteAdmin(admin indexed address)
func (_MultisigBase *MultisigBaseFilterer) WatchDeleteAdmin(opts *bind.WatchOpts, sink chan<- *MultisigBaseDeleteAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseDeleteAdmin)
				if err := _MultisigBase.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseDeployMultisigContractIterator is returned from FilterDeployMultisigContract and is used to iterate over the raw logs and unpacked data for DeployMultisigContract events raised by the MultisigBase contract.
type MultisigBaseDeployMultisigContractIterator struct {
	Event *MultisigBaseDeployMultisigContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseDeployMultisigContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseDeployMultisigContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseDeployMultisigContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseDeployMultisigContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseDeployMultisigContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseDeployMultisigContract represents a DeployMultisigContract event raised by the MultisigBase contract.
type MultisigBaseDeployMultisigContract struct {
	AdminList   []common.Address
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDeployMultisigContract is a free log retrieval operation binding the contract event 0x14aa44bb5ce6609639302921fc20d0c5c26dc52d8fbea76c78a2e7d6d8b047f5.
//
// Solidity: e DeployMultisigContract(adminList address[], requirement uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterDeployMultisigContract(opts *bind.FilterOpts) (*MultisigBaseDeployMultisigContractIterator, error) {

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "DeployMultisigContract")
	if err != nil {
		return nil, err
	}
	return &MultisigBaseDeployMultisigContractIterator{contract: _MultisigBase.contract, event: "DeployMultisigContract", logs: logs, sub: sub}, nil
}

// WatchDeployMultisigContract is a free log subscription operation binding the contract event 0x14aa44bb5ce6609639302921fc20d0c5c26dc52d8fbea76c78a2e7d6d8b047f5.
//
// Solidity: e DeployMultisigContract(adminList address[], requirement uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchDeployMultisigContract(opts *bind.WatchOpts, sink chan<- *MultisigBaseDeployMultisigContract) (event.Subscription, error) {

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "DeployMultisigContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseDeployMultisigContract)
				if err := _MultisigBase.contract.UnpackLog(event, "DeployMultisigContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseExecuteRequestIterator is returned from FilterExecuteRequest and is used to iterate over the raw logs and unpacked data for ExecuteRequest events raised by the MultisigBase contract.
type MultisigBaseExecuteRequestIterator struct {
	Event *MultisigBaseExecuteRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseExecuteRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseExecuteRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseExecuteRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseExecuteRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseExecuteRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseExecuteRequest represents a ExecuteRequest event raised by the MultisigBase contract.
type MultisigBaseExecuteRequest struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequest is a free log retrieval operation binding the contract event 0x55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee.
//
// Solidity: e ExecuteRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterExecuteRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*MultisigBaseExecuteRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "ExecuteRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseExecuteRequestIterator{contract: _MultisigBase.contract, event: "ExecuteRequest", logs: logs, sub: sub}, nil
}

// WatchExecuteRequest is a free log subscription operation binding the contract event 0x55d47b3ef994e6498ee206748741ea9f316c915fecd2f02ba467e113f64ab7ee.
//
// Solidity: e ExecuteRequest(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchExecuteRequest(opts *bind.WatchOpts, sink chan<- *MultisigBaseExecuteRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "ExecuteRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseExecuteRequest)
				if err := _MultisigBase.contract.UnpackLog(event, "ExecuteRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseExecuteRequestFailureIterator is returned from FilterExecuteRequestFailure and is used to iterate over the raw logs and unpacked data for ExecuteRequestFailure events raised by the MultisigBase contract.
type MultisigBaseExecuteRequestFailureIterator struct {
	Event *MultisigBaseExecuteRequestFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseExecuteRequestFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseExecuteRequestFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseExecuteRequestFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseExecuteRequestFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseExecuteRequestFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseExecuteRequestFailure represents a ExecuteRequestFailure event raised by the MultisigBase contract.
type MultisigBaseExecuteRequestFailure struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestFailure is a free log retrieval operation binding the contract event 0x5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f7.
//
// Solidity: e ExecuteRequestFailure(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterExecuteRequestFailure(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*MultisigBaseExecuteRequestFailureIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "ExecuteRequestFailure", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseExecuteRequestFailureIterator{contract: _MultisigBase.contract, event: "ExecuteRequestFailure", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestFailure is a free log subscription operation binding the contract event 0x5ebb796d512ca336f8595033b3fbee6cfee4f065de25e3e721c735911dc546f7.
//
// Solidity: e ExecuteRequestFailure(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchExecuteRequestFailure(opts *bind.WatchOpts, sink chan<- *MultisigBaseExecuteRequestFailure, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "ExecuteRequestFailure", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseExecuteRequestFailure)
				if err := _MultisigBase.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseRevokeConfirmationIterator is returned from FilterRevokeConfirmation and is used to iterate over the raw logs and unpacked data for RevokeConfirmation events raised by the MultisigBase contract.
type MultisigBaseRevokeConfirmationIterator struct {
	Event *MultisigBaseRevokeConfirmation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseRevokeConfirmationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseRevokeConfirmation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseRevokeConfirmation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseRevokeConfirmationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseRevokeConfirmationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseRevokeConfirmation represents a RevokeConfirmation event raised by the MultisigBase contract.
type MultisigBaseRevokeConfirmation struct {
	Index     *big.Int
	From      common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRevokeConfirmation is a free log retrieval operation binding the contract event 0x0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17.
//
// Solidity: e RevokeConfirmation(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterRevokeConfirmation(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*MultisigBaseRevokeConfirmationIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "RevokeConfirmation", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseRevokeConfirmationIterator{contract: _MultisigBase.contract, event: "RevokeConfirmation", logs: logs, sub: sub}, nil
}

// WatchRevokeConfirmation is a free log subscription operation binding the contract event 0x0689115a9648267371febe5b74f8643f532350a9a41d4be1756e1e9030c44b17.
//
// Solidity: e RevokeConfirmation(index indexed uint256, from indexed address, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchRevokeConfirmation(opts *bind.WatchOpts, sink chan<- *MultisigBaseRevokeConfirmation, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "RevokeConfirmation", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseRevokeConfirmation)
				if err := _MultisigBase.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseSubmitRequestIterator is returned from FilterSubmitRequest and is used to iterate over the raw logs and unpacked data for SubmitRequest events raised by the MultisigBase contract.
type MultisigBaseSubmitRequestIterator struct {
	Event *MultisigBaseSubmitRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseSubmitRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseSubmitRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseSubmitRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseSubmitRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseSubmitRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseSubmitRequest represents a SubmitRequest event raised by the MultisigBase contract.
type MultisigBaseSubmitRequest struct {
	Index     *big.Int
	From      common.Address
	To        common.Address
	Value     *big.Int
	Data      []byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSubmitRequest is a free log retrieval operation binding the contract event 0xd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb.
//
// Solidity: e SubmitRequest(index indexed uint256, from indexed address, to address, value uint256, data bytes, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterSubmitRequest(opts *bind.FilterOpts, index []*big.Int, from []common.Address) (*MultisigBaseSubmitRequestIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "SubmitRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &MultisigBaseSubmitRequestIterator{contract: _MultisigBase.contract, event: "SubmitRequest", logs: logs, sub: sub}, nil
}

// WatchSubmitRequest is a free log subscription operation binding the contract event 0xd7c11897713533deb6e710c30ab1de0e47826511b50cef8b93e1d30d675c32cb.
//
// Solidity: e SubmitRequest(index indexed uint256, from indexed address, to address, value uint256, data bytes, timestamp uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchSubmitRequest(opts *bind.WatchOpts, sink chan<- *MultisigBaseSubmitRequest, index []*big.Int, from []common.Address) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "SubmitRequest", indexRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseSubmitRequest)
				if err := _MultisigBase.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MultisigBaseUpdateRequirementIterator is returned from FilterUpdateRequirement and is used to iterate over the raw logs and unpacked data for UpdateRequirement events raised by the MultisigBase contract.
type MultisigBaseUpdateRequirementIterator struct {
	Event *MultisigBaseUpdateRequirement // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultisigBaseUpdateRequirementIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultisigBaseUpdateRequirement)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultisigBaseUpdateRequirement)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultisigBaseUpdateRequirementIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultisigBaseUpdateRequirementIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultisigBaseUpdateRequirement represents a UpdateRequirement event raised by the MultisigBase contract.
type MultisigBaseUpdateRequirement struct {
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequirement is a free log retrieval operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: e UpdateRequirement(requirement uint256)
func (_MultisigBase *MultisigBaseFilterer) FilterUpdateRequirement(opts *bind.FilterOpts) (*MultisigBaseUpdateRequirementIterator, error) {

	logs, sub, err := _MultisigBase.contract.FilterLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return &MultisigBaseUpdateRequirementIterator{contract: _MultisigBase.contract, event: "UpdateRequirement", logs: logs, sub: sub}, nil
}

// WatchUpdateRequirement is a free log subscription operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: e UpdateRequirement(requirement uint256)
func (_MultisigBase *MultisigBaseFilterer) WatchUpdateRequirement(opts *bind.WatchOpts, sink chan<- *MultisigBaseUpdateRequirement) (event.Subscription, error) {

	logs, sub, err := _MultisigBase.contract.WatchLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultisigBaseUpdateRequirement)
				if err := _MultisigBase.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SafeMathABI is the input ABI used to generate the binding from.
const SafeMathABI = "[]"

// SafeMathBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const SafeMathBinRuntime = `0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820bef6e741dc501c1f62076fd952fd324e54b60d052b748e87d20390b3bd5799f80029`

// SafeMathBin is the compiled bytecode used for deploying new contracts.
const SafeMathBin = `0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820bef6e741dc501c1f62076fd952fd324e54b60d052b748e87d20390b3bd5799f80029`

// DeploySafeMath deploys a new klaytn contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around a klaytn contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around a klaytn contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around a klaytn contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around a klaytn contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around a klaytn contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around a klaytn contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around a klaytn contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around a klaytn contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around a klaytn contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around a klaytn contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}

// BranchContractABI is the input ABI used to generate the binding from.
const BranchContractABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"THIS_CONTRACT_NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAddressInNiceForm\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAddressCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// BranchContractBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const BranchContractBinRuntime = `0x`

// BranchContractBin is the compiled bytecode used for deploying new contracts.
const BranchContractBin = `0x`

// DeployBranchContract deploys a new klaytn contract, binding an instance of BranchContract to it.
func DeployBranchContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BranchContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BranchContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BranchContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BranchContract{BranchContractCaller: BranchContractCaller{contract: contract}, BranchContractTransactor: BranchContractTransactor{contract: contract}, BranchContractFilterer: BranchContractFilterer{contract: contract}}, nil
}

// BranchContract is an auto generated Go binding around a klaytn contract.
type BranchContract struct {
	BranchContractCaller     // Read-only binding to the contract
	BranchContractTransactor // Write-only binding to the contract
	BranchContractFilterer   // Log filterer for contract events
}

// BranchContractCaller is an auto generated read-only Go binding around a klaytn contract.
type BranchContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BranchContractTransactor is an auto generated write-only Go binding around a klaytn contract.
type BranchContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BranchContractFilterer is an auto generated log filtering Go binding around a klaytn contract events.
type BranchContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BranchContractSession is an auto generated Go binding around a klaytn contract,
// with pre-set call and transact options.
type BranchContractSession struct {
	Contract     *BranchContract   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BranchContractCallerSession is an auto generated read-only Go binding around a klaytn contract,
// with pre-set call options.
type BranchContractCallerSession struct {
	Contract *BranchContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// BranchContractTransactorSession is an auto generated write-only Go binding around a klaytn contract,
// with pre-set transact options.
type BranchContractTransactorSession struct {
	Contract     *BranchContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// BranchContractRaw is an auto generated low-level Go binding around a klaytn contract.
type BranchContractRaw struct {
	Contract *BranchContract // Generic contract binding to access the raw methods on
}

// BranchContractCallerRaw is an auto generated low-level read-only Go binding around a klaytn contract.
type BranchContractCallerRaw struct {
	Contract *BranchContractCaller // Generic read-only contract binding to access the raw methods on
}

// BranchContractTransactorRaw is an auto generated low-level write-only Go binding around a klaytn contract.
type BranchContractTransactorRaw struct {
	Contract *BranchContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBranchContract creates a new instance of BranchContract, bound to a specific deployed contract.
func NewBranchContract(address common.Address, backend bind.ContractBackend) (*BranchContract, error) {
	contract, err := bindBranchContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BranchContract{BranchContractCaller: BranchContractCaller{contract: contract}, BranchContractTransactor: BranchContractTransactor{contract: contract}, BranchContractFilterer: BranchContractFilterer{contract: contract}}, nil
}

// NewBranchContractCaller creates a new read-only instance of BranchContract, bound to a specific deployed contract.
func NewBranchContractCaller(address common.Address, caller bind.ContractCaller) (*BranchContractCaller, error) {
	contract, err := bindBranchContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BranchContractCaller{contract: contract}, nil
}

// NewBranchContractTransactor creates a new write-only instance of BranchContract, bound to a specific deployed contract.
func NewBranchContractTransactor(address common.Address, transactor bind.ContractTransactor) (*BranchContractTransactor, error) {
	contract, err := bindBranchContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BranchContractTransactor{contract: contract}, nil
}

// NewBranchContractFilterer creates a new log filterer instance of BranchContract, bound to a specific deployed contract.
func NewBranchContractFilterer(address common.Address, filterer bind.ContractFilterer) (*BranchContractFilterer, error) {
	contract, err := bindBranchContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BranchContractFilterer{contract: contract}, nil
}

// bindBranchContract binds a generic wrapper to an already deployed contract.
func bindBranchContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BranchContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BranchContract *BranchContractRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BranchContract.Contract.BranchContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BranchContract *BranchContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BranchContract.Contract.BranchContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BranchContract *BranchContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BranchContract.Contract.BranchContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BranchContract *BranchContractCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BranchContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BranchContract *BranchContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BranchContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BranchContract *BranchContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BranchContract.Contract.contract.Transact(opts, method, params...)
}

// THISCONTRACTNAME is a free data retrieval call binding the contract method 0x34530998.
//
// Solidity: function THIS_CONTRACT_NAME() constant returns(string)
func (_BranchContract *BranchContractCaller) THISCONTRACTNAME(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BranchContract.contract.Call(opts, out, "THIS_CONTRACT_NAME")
	return *ret0, err
}

// THISCONTRACTNAME is a free data retrieval call binding the contract method 0x34530998.
//
// Solidity: function THIS_CONTRACT_NAME() constant returns(string)
func (_BranchContract *BranchContractSession) THISCONTRACTNAME() (string, error) {
	return _BranchContract.Contract.THISCONTRACTNAME(&_BranchContract.CallOpts)
}

// THISCONTRACTNAME is a free data retrieval call binding the contract method 0x34530998.
//
// Solidity: function THIS_CONTRACT_NAME() constant returns(string)
func (_BranchContract *BranchContractCallerSession) THISCONTRACTNAME() (string, error) {
	return _BranchContract.Contract.THISCONTRACTNAME(&_BranchContract.CallOpts)
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() constant returns(uint8[], address[])
func (_BranchContract *BranchContractCaller) GetAllAddress(opts *bind.CallOpts) ([]uint8, []common.Address, error) {
	var (
		ret0 = new([]uint8)
		ret1 = new([]common.Address)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _BranchContract.contract.Call(opts, out, "getAllAddress")
	return *ret0, *ret1, err
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() constant returns(uint8[], address[])
func (_BranchContract *BranchContractSession) GetAllAddress() ([]uint8, []common.Address, error) {
	return _BranchContract.Contract.GetAllAddress(&_BranchContract.CallOpts)
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() constant returns(uint8[], address[])
func (_BranchContract *BranchContractCallerSession) GetAllAddress() ([]uint8, []common.Address, error) {
	return _BranchContract.Contract.GetAllAddress(&_BranchContract.CallOpts)
}

// GetAllAddressCount is a free data retrieval call binding the contract method 0xe024c2d0.
//
// Solidity: function getAllAddressCount() constant returns(uint256)
func (_BranchContract *BranchContractCaller) GetAllAddressCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BranchContract.contract.Call(opts, out, "getAllAddressCount")
	return *ret0, err
}

// GetAllAddressCount is a free data retrieval call binding the contract method 0xe024c2d0.
//
// Solidity: function getAllAddressCount() constant returns(uint256)
func (_BranchContract *BranchContractSession) GetAllAddressCount() (*big.Int, error) {
	return _BranchContract.Contract.GetAllAddressCount(&_BranchContract.CallOpts)
}

// GetAllAddressCount is a free data retrieval call binding the contract method 0xe024c2d0.
//
// Solidity: function getAllAddressCount() constant returns(uint256)
func (_BranchContract *BranchContractCallerSession) GetAllAddressCount() (*big.Int, error) {
	return _BranchContract.Contract.GetAllAddressCount(&_BranchContract.CallOpts)
}

// GetAllAddressInNiceForm is a free data retrieval call binding the contract method 0xd39c3e44.
//
// Solidity: function getAllAddressInNiceForm() constant returns(address[], address[], address[], address, address)
func (_BranchContract *BranchContractCaller) GetAllAddressInNiceForm(opts *bind.CallOpts) ([]common.Address, []common.Address, []common.Address, common.Address, common.Address, error) {
	var (
		ret0 = new([]common.Address)
		ret1 = new([]common.Address)
		ret2 = new([]common.Address)
		ret3 = new(common.Address)
		ret4 = new(common.Address)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
	}
	err := _BranchContract.contract.Call(opts, out, "getAllAddressInNiceForm")
	return *ret0, *ret1, *ret2, *ret3, *ret4, err
}

// GetAllAddressInNiceForm is a free data retrieval call binding the contract method 0xd39c3e44.
//
// Solidity: function getAllAddressInNiceForm() constant returns(address[], address[], address[], address, address)
func (_BranchContract *BranchContractSession) GetAllAddressInNiceForm() ([]common.Address, []common.Address, []common.Address, common.Address, common.Address, error) {
	return _BranchContract.Contract.GetAllAddressInNiceForm(&_BranchContract.CallOpts)
}

// GetAllAddressInNiceForm is a free data retrieval call binding the contract method 0xd39c3e44.
//
// Solidity: function getAllAddressInNiceForm() constant returns(address[], address[], address[], address, address)
func (_BranchContract *BranchContractCallerSession) GetAllAddressInNiceForm() ([]common.Address, []common.Address, []common.Address, common.Address, common.Address, error) {
	return _BranchContract.Contract.GetAllAddressInNiceForm(&_BranchContract.CallOpts)
}
