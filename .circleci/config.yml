# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      - image: kjhman21/dev:go1.11.2-solc0.4.24
    working_directory: /go/src/github.com/ground-x/klaytn
    steps:
      - checkout
      - run:
          name: "Build and run tests"
          command: |
            make fmt
            make all
            git clone --depth 1 https://$TEST_TOKEN@github.com/ground-x/klaytn-tests.git tests/testdata
            make test

  coverage:
    docker:
      - image: kjhman21/dev:go1.11.2-solc0.4.24
    working_directory: /go/src/github.com/ground-x/klaytn
    steps:
      - checkout
      - run:
          name: "Run coverage tests"
          command: |
            git clone --depth 1 https://$TEST_TOKEN@github.com/ground-x/klaytn-tests.git tests/testdata
            make cover
            mkdir -p /tmp/coverage_reports
            cp coverage_report.txt /tmp/coverage_reports/
            cp coverage_report.html /tmp/coverage_reports/
      - store_artifacts:
          path: /tmp/coverage_reports

  linters:
    docker:
      - image: circleci/golang:1.11.2
    working_directory: /go/src/github.com/ground-x/klaytn
    steps:
      - checkout
      - run:
          name: "Run linters"
          command: |
            make lint-try
            mkdir -p /tmp/linter_reports
            cp linter_report.txt /tmp/linter_reports/
      - store_artifacts:
          path: /tmp/linter_reports

  dockernize:
    docker:
      - image: circleci/golang:1.11.2
    working_directory: /go/src/github.com/ground-x/klaytn
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: "Install awscli"
          command: |
            curl -fsSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python get-pip.py --user
            ~/.local/bin/pip install awscli --upgrade --user
            echo 'export PATH=/home/circleci/.local/bin:$PATH' >> $BASH_ENV
      - run:
          name: "Log in to AWS ECR"
          command: eval $(aws ecr get-login --no-include-email --region ap-northeast-2)
      - run:
          name: "Build & Push Docker Image"
          command: |
            docker build -t 428948643293.dkr.ecr.ap-northeast-2.amazonaws.com/gxp/client-go:latest -t 428948643293.dkr.ecr.ap-northeast-2.amazonaws.com/gxp/client-go:$CIRCLE_SHA1 .
            docker push 428948643293.dkr.ecr.ap-northeast-2.amazonaws.com/gxp/client-go:latest
            docker push 428948643293.dkr.ecr.ap-northeast-2.amazonaws.com/gxp/client-go:$CIRCLE_SHA1

  packaging:
    machine: true
    working_directory: ~/go/src/github.com/ground-x/klaytn
    steps:
      - checkout
      - run:
          name: "Install awscli"
          command: |
            curl -fsSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python get-pip.py --user
            ~/.local/bin/pip install awscli --upgrade --user
      - run:
          name: "Packaging klaytn for linux-amd64"
          command: |
            export GOPATH=~/go
            export KLAYTN_RELEASE_NUM=$(go run build/rpm/main.go release_num)
            export KLAYTN_VERSION=$(go run build/rpm/main.go version)
            make klay-linux-amd64
            mkdir -p klay-linux-amd64
            cp -R build/packaging/linux/* klay-linux-amd64/
            cp -R build/bin/klay-linux-amd64 klay-linux-amd64/bin/klay
            cp -R build/packaging/aspen klay-linux-amd64/conf/
            KLAYTN_PACKAGE_NAME="klay-$KLAYTN_VERSION-$KLAYTN_RELEASE_NUM-linux-amd64.tar.gz"
            tar czf $KLAYTN_PACKAGE_NAME klay-linux-amd64
            aws s3 cp $KLAYTN_PACKAGE_NAME s3://klaytn-ops-stuff/releases/klaytn/$KLAYTN_VERSION/
            aws s3 cp $KLAYTN_PACKAGE_NAME s3://klaytn-ops-stuff/releases/klaytn/latest/

      - run:
          name: "Packaging klaytn for macOS"
          command: |
            export GOPATH=~/go
            export KLAYTN_RELEASE_NUM=$(go run build/rpm/main.go release_num)
            export KLAYTN_VERSION=$(go run build/rpm/main.go version)
            make klay-darwin-amd64
            mkdir -p klay-darwin-amd64
            cp -R build/packaging/linux/* klay-darwin-amd64/
            cp -R build/bin/klay-darwin-10.10-amd64 klay-darwin-amd64/bin/klay
            cp -R build/packaging/aspen klay-darwin-amd64/conf/
            KLAYTN_PACKAGE_NAME="klay-$KLAYTN_VERSION-$KLAYTN_RELEASE_NUM-darwin-amd64.tar.gz"
            tar czf $KLAYTN_PACKAGE_NAME klay-darwin-amd64
            aws s3 cp $KLAYTN_PACKAGE_NAME s3://klaytn-ops-stuff/releases/klaytn/$KLAYTN_VERSION/
            aws s3 cp $KLAYTN_PACKAGE_NAME s3://klaytn-ops-stuff/releases/klaytn/latest/

      - run:
          name: "Packaging klaytn for windows"
          command: |
            export GOPATH=~/go
            export KLAYTN_RELEASE_NUM=$(go run build/rpm/main.go release_num)
            export KLAYTN_VERSION=$(go run build/rpm/main.go version)
            make klay-windows-amd64
            mkdir -p klay-windows-amd64/bin
            cp -R build/packaging/windows/* klay-windows-amd64/
            cp -R build/bin/klay-windows-4.0-amd64.exe klay-windows-amd64/bin/klay.exe
            KLAYTN_PACKAGE_NAME="klay-$KLAYTN_VERSION-$KLAYTN_RELEASE_NUM-windows-amd64.zip"
            cp -R build/packaging/aspen klay-windows-amd64/conf/
            zip -r $KLAYTN_PACKAGE_NAME klay-windows-amd64
            aws s3 cp $KLAYTN_PACKAGE_NAME s3://klaytn-ops-stuff/releases/klaytn/$KLAYTN_VERSION/
            aws s3 cp $KLAYTN_PACKAGE_NAME s3://klaytn-ops-stuff/releases/klaytn/latest/

  rpm-untagged:
    docker:
      - image: bitaholic/circleci-rpmbuild:latest
    working_directory: /go/src/github.com/ground-x/klaytn
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ba:f9:c7:16:49:74:49:10:78:1e:17:2c:9d:1c:d5:74"
      - run:
          name: "Build & Deploy rpm package"
          command: |
            export GOPATH=/go
            export KLAYTN_VERSION=$(go run build/rpm/main.go version)
            go run build/rpm/main.go gen_spec --devel --build_num $CIRCLE_BUILD_NUM > /rpmbuild/SPECS/klaytn-devel-$KLAYTN_VERSION.spec
            cd ..
            mv klaytn klaytn-devel-$KLAYTN_VERSION
            tar czf klaytn-devel-$KLAYTN_VERSION.tar.gz klaytn-devel-$KLAYTN_VERSION
            mv klaytn-devel-$KLAYTN_VERSION.tar.gz /rpmbuild/SOURCES/
            rpmbuild -ba /rpmbuild/SPECS/klaytn-devel-$KLAYTN_VERSION.spec
            scp -o StrictHostKeyChecking=no /rpmbuild/RPMS/x86_64/klaytn-devel-v*.rpm ec2-user@52.79.114.173:/srv/repo/
            ssh -o StrictHostKeyChecking=no ec2-user@52.79.114.173 createrepo --update /srv/repo

  rpm-tagged:
    docker:
      - image: bitaholic/circleci-rpmbuild:latest
    working_directory: /go/src/github.com/ground-x/klaytn
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ba:f9:c7:16:49:74:49:10:78:1e:17:2c:9d:1c:d5:74"
      - run:
          name: "Build & Deploy rpm package"
          command: |
            export GOPATH=/go
            export KLAYTN_RELEASE_NUM=$(go run build/rpm/main.go release_num)
            export KLAYTN_VERSION=$(go run build/rpm/main.go version)
            go run build/rpm/main.go gen_spec > /rpmbuild/SPECS/klaytn-$KLAYTN_VERSION.spec
            cd ..
            mv klaytn klaytn-$KLAYTN_VERSION
            tar czf klaytn-$KLAYTN_VERSION.tar.gz klaytn-$KLAYTN_VERSION
            mv klaytn-$KLAYTN_VERSION.tar.gz /rpmbuild/SOURCES/
            rpmbuild -ba /rpmbuild/SPECS/klaytn-$KLAYTN_VERSION.spec
            scp -o StrictHostKeyChecking=no /rpmbuild/RPMS/x86_64/klaytn-v*.rpm ec2-user@52.79.114.173:/srv/repo/
            ssh -o StrictHostKeyChecking=no ec2-user@52.79.114.173 createrepo --update /srv/repo

workflows:
  version: 2
  build_n_packaging:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - packaging:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - dockernize:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - rpm-tagged:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
  nightly-coverage:
    triggers:
      - schedule:
          cron: "0 18 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - coverage
  nightly-linters:
    triggers:
      - schedule:
          cron: "0 19 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - linters
