// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/klaytn/klaytn/datasync/chaindatafetcher (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	blockchain "github.com/klaytn/klaytn/blockchain"
	types "github.com/klaytn/klaytn/datasync/chaindatafetcher/types"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// HandleChainEvent mocks base method
func (m *MockRepository) HandleChainEvent(arg0 blockchain.ChainEvent, arg1 types.RequestType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleChainEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleChainEvent indicates an expected call of HandleChainEvent
func (mr *MockRepositoryMockRecorder) HandleChainEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleChainEvent", reflect.TypeOf((*MockRepository)(nil).HandleChainEvent), arg0, arg1)
}

// InsertContracts mocks base method
func (m *MockRepository) InsertContracts(arg0 blockchain.ChainEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertContracts", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertContracts indicates an expected call of InsertContracts
func (mr *MockRepositoryMockRecorder) InsertContracts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertContracts", reflect.TypeOf((*MockRepository)(nil).InsertContracts), arg0)
}

// InsertTokenTransfers mocks base method
func (m *MockRepository) InsertTokenTransfers(arg0 blockchain.ChainEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTokenTransfers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTokenTransfers indicates an expected call of InsertTokenTransfers
func (mr *MockRepositoryMockRecorder) InsertTokenTransfers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTokenTransfers", reflect.TypeOf((*MockRepository)(nil).InsertTokenTransfers), arg0)
}

// InsertTraceResults mocks base method
func (m *MockRepository) InsertTraceResults(arg0 blockchain.ChainEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTraceResults", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTraceResults indicates an expected call of InsertTraceResults
func (mr *MockRepositoryMockRecorder) InsertTraceResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTraceResults", reflect.TypeOf((*MockRepository)(nil).InsertTraceResults), arg0)
}

// InsertTransactions mocks base method
func (m *MockRepository) InsertTransactions(arg0 blockchain.ChainEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransactions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransactions indicates an expected call of InsertTransactions
func (mr *MockRepositoryMockRecorder) InsertTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactions", reflect.TypeOf((*MockRepository)(nil).InsertTransactions), arg0)
}

// ReadCheckpoint mocks base method
func (m *MockRepository) ReadCheckpoint() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCheckpoint")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCheckpoint indicates an expected call of ReadCheckpoint
func (mr *MockRepositoryMockRecorder) ReadCheckpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCheckpoint", reflect.TypeOf((*MockRepository)(nil).ReadCheckpoint))
}

// SetComponent mocks base method
func (m *MockRepository) SetComponent(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetComponent", arg0)
}

// SetComponent indicates an expected call of SetComponent
func (mr *MockRepositoryMockRecorder) SetComponent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetComponent", reflect.TypeOf((*MockRepository)(nil).SetComponent), arg0)
}

// WriteCheckpoint mocks base method
func (m *MockRepository) WriteCheckpoint(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCheckpoint", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCheckpoint indicates an expected call of WriteCheckpoint
func (mr *MockRepositoryMockRecorder) WriteCheckpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCheckpoint", reflect.TypeOf((*MockRepository)(nil).WriteCheckpoint), arg0)
}
